cscope 15 $HOME/BB/build/src-bobby               0001421752
	@cmdline-bootloader/circ_buffer.c

1 
	~"cúc_buf„r.h
"

3 
	$push
(
byã
 
d©a
, 
CúcBuf
 * 
b
)

5 
b
->
buf
[b->
íd
++] = 
d©a
;

7 if(
b
->
íd
 =
CIRC_BUF_LEN
)

9 
b
->
íd
 = 0;

12 if(
b
->
íd
 =b->
°¨t
)

14 
b
->
°¨t
++;

16 if(
b
->
°¨t
 =
CIRC_BUF_LEN
)

18 
b
->
°¨t
 = 0;

21 
	}
}

23 
	$p›
(
CúcBuf
 * 
b
)

25 
uöt8_t
 
d©a
;

27 if–
	`isEm±y
(
b
) )

32 
d©a
 = 
b
->
buf
[b->
°¨t
++];

34 if(
b
->
°¨t
 =
CIRC_BUF_LEN
)

36 
b
->
°¨t
 = 0;

39  
d©a
;

40 
	}
}

42 
byã
 
	$isEm±y
(
CúcBuf
 * 
b
)

44 if(
b
->
°¨t
 =b->
íd
)

49 
	}
}

	@cmdline-bootloader/circ_buffer.h

1 #i‚de‡
__CIRC_BUFFER_H__


2 
	#__CIRC_BUFFER_H__


	)

4 
	~"defs.h
"

6 #i‚de‡
CIRC_BUF_LEN


7 
	#CIRC_BUF_LEN
 30

	)

10 
	s_cúc_buf_t


12 
byã
 
	mbuf
[
CIRC_BUF_LEN
];

13 
byã
 
	m°¨t
;

14 
byã
 
	míd
;

15 } 
	tCúcBuf
;

17 
push
(
byã
, 
CúcBuf
 *);

18 
p›
(
CúcBuf
 *);

19 
byã
 
isEm±y
(
CúcBuf
 *);

	@cmdline-bootloader/defs.h

1 #i‚de‡
__DEFS_H__


2 
	#__DEFS_H__


	)

4 
	~<°döt.h
>

8 
uöt8_t
 
	tbyã
;

9 
	#POINTER_SIZE
 (*)

	)

	@cmdline-bootloader/hostserial.c

3 #i‚de‡
_HOSTSERIAL_C_


4 
	#_HOSTSERIAL_C_


	)

6 
	~"ho°£rül.h
"

19 
	#BUF_SIZE
 256

	)

21 
±hªad_muãx_t
 
£rülMuãx
;

22 
±hªad_muãx_t
 
ª•⁄£Muãx
;

24 
CúcBuf
 
£rülD©a
;

27 
	ssh™dÀ
 {

28 
	mfd
;

29 
ãrmios
 
	mﬁdtio
;

30 
	mdebug
;

32 
±hªad_t
 
	mªad_tid
;

35 
£rülH™dÀ
 
	gmy_sh
;

36 
	gweAªW‹kög
 = 1;

39 *
	$ªadSîül
(*
h
)

41 
sh™dÀ
* 
sh
 = (sh™dÀ*Ë
h
;

42 
byã
 
buf
[
BUF_SIZE
];

44 
i
;

46 
weAªW‹kög
)

48 
tŸÆ
 = 
	`ªad
(
sh
->
fd
, 
buf
, 
BUF_SIZE
);

49 i‡(
tŸÆ
 < 0)

51 
	`Ârötf
(
°dîr
, "error in serial input\n");

55 
i
=0; i<
tŸÆ
; i++)

58 
	`push
(
buf
[
i
], &(
£rülD©a
));

59 i‡(
sh
->
debug
 > 1Ë{
	`Ârötf
(
°dîr
, "%02X %c\n", 
buf
[
i
],buf[i]);
	`fÊush
(
°dout
);}

64  
NULL
;

65 
	}
}

68 
	$öôSîül
(c⁄° *
∑th
, 
ãrmios
 *
ﬁdtio
, 
debug
, 
baud
)

70 
fd
;

71 i‡(
debug
>2Ë
	`¥ötf
("%†\n", 
∑th
);

72 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
|
O_NOCTTY
|
O_NDELAY
);

73 i‡(
fd
 < 0)

75 i‡(
debug
>0Ë
	`¥ötf
("UnableÅo open serialÖort\n");

78 i‡(
debug
>2Ë
	`¥ötf
("Open succeeded\n");

79 
	`f˙é
(
fd
, 
F_SETFL
, 0);

81 
ãrmios
 
√wtio
;

83 
	`tcgë©å
(
fd
, 
ﬁdtio
);

85 
	`bzîo
(&
√wtio
, (newtio));

88 
√wtio
.
c_cÊag
 = 
baud
 | 
CS8
 | 
CLOCAL
 | 
CREAD
;

89 
√wtio
.
c_iÊag
 = 
IGNPAR
;

90 
√wtio
.
c_oÊag
 = 0;

93 
√wtio
.
c_lÊag
 = 0;

95 
√wtio
.
c_cc
[
VTIME
] = 0;

96 
√wtio
.
c_cc
[
VMIN
] = 1;

98 
	`tcÊush
(
fd
, 
TCIFLUSH
);

99 
	`tc£èâr
(
fd
,
TCSANOW
,&
√wtio
);

101  
fd
;

102 
	}
}

106 
	$°¨tupSîül
(c⁄° *
p‹t
, 
debug
, 
baud
)

108 
sh™dÀ
* 
sh
 = (sh™dÀ*Ë
	`mÆloc
 ( (shandle));

109 
sh
->
fd
 = 
	`öôSîül
(
p‹t
, &sh->
ﬁdtio
,
debug
, 
baud
);

110 i‡(
sh
->
fd
 < 0) {

111 
	`‰ì
(
sh
);

115 
sh
->
debug
 = debug;

116 
weAªW‹kög
 = 1;

117 
	`±hªad_¸óã
(&
sh
->
ªad_tid
, 
NULL
, 
ªadSîül
, (*)sh);

119 
	`±hªad_muãx_öô
(&
£rülMuãx
, 
NULL
);

120 
	`±hªad_muãx_öô
(&
ª•⁄£Muãx
, 
NULL
);

122 
my_sh
 = (
£rülH™dÀ
Ë
sh
;

124 
	}
}

127 
	$shutdownSîül
()

129 
sh™dÀ
* 
sh
 = (sh™dÀ*Ë
my_sh
;

130 
weAªW‹kög
 = 0;

131 
	`±hªad_joö
(
sh
->
ªad_tid
,0);

133 
	`±hªad_muãx_de°roy
(&
£rülMuãx
);

134 
	`±hªad_muãx_de°roy
(&
ª•⁄£Muãx
);

136 
	`tc£èâr
(
sh
->
fd
, 
TCSANOW
, &sh->
ﬁdtio
);

137 
	`˛o£
(
sh
->
fd
);

138 
	`‰ì
–
sh
 );

139 
	}
}

142 
	$¥o˚ss
()

144 
byã
 
cuº
;

146  !
	`isEm±y
(&(
£rülD©a
)) )

148 
cuº
 = (
byã
)
	`p›
(&(
£rülD©a
));

156 
	}
}

159 
	$£ndMesßge
(
byã
* 
d©a
, byã 
size
)

161 
sh™dÀ
* 
sh
 = (sh™dÀ*Ë
my_sh
;

162 
i
;

168 
	`±hªad_muãx_lock
(&
£rülMuãx
);

170 
i
 = 
	`wrôe
(
sh
->
fd
, 
d©a
, 
size
);

171 
	`±hªad_muãx_u∆ock
(&
£rülMuãx
);

173 i‡(
i
 !
size
) {

174 
	`Ârötf
(
°dîr
, "Eº‹: WrŸêöc‹ª˘ byãs, %d, whí should havêwrôã¿%d\n", 
i
, 
size
);

177 
	}
}

	@cmdline-bootloader/hostserial.h

3 #i‚de‡
_HOSTSERIAL_H_


4 
	#_HOSTSERIAL_H_


	)

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<°rög.h
>

9 
	~<ãrmios.h
>

10 
	~<±hªad.h
>

11 
	~"cúc_buf„r.h
"

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

16 *
	t£rülH™dÀ
;

19 
°¨tupSîül
(c⁄° *
p‹t
, 
debug
, 
baud
);

20 
shutdownSîül
();

23 
¥o˚ss
();

26 
£ndMesßge
(
byã
* 
d©a
, byã 
size
);

	@cmdline-bootloader/reprogrammer.c

1 #i‚de‡
_REPROGRAMMER_C_


2 
	#_REPROGRAMMER_C_


	)

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

6 
	~<uni°d.h
>

7 
	~<˘y≥.h
>

8 
	~<sys/°©.h
>

9 
	~"°rög.h
"

10 
	~"ho°£rül.h
"

11 
	~"time.h
"

14 
	#VERSION
 "1.0"

	)

15 
	#C_BOOT
 'B'

	)

16 
	#C_PROG
 'R'

	)

17 
	#C_SPAN
 'S'

	)

18 
	#C_QUIT
 'Q'

	)

21 
	#MAX_LENGTH
 10

	)

24 
	#NUM_RETRIES
 4

	)

25 
	#WAIT_DELAY
 5

	)

26 
	#SEND_DELAY
 30000

	)

29 
	#RC_VERSION
 "1.2"

	)

30 
	#PROG_CMD
 0x50

	)

31 
	#WRITEOUT1
 0xFF

	)

32 
	#WRITEOUT2
 0xFE

	)

33 
	#HEX_END
 0xFF

	)

34 
	#ADDR_LENGTH
 2

	)

35 
	#REV1B_PAGE_SIZE
 256

	)

36 
	#REV1C_PAGE_SIZE
 512

	)

37 
	#PDATA_SIZE
 18

	)

40 
	#SYS_CMD
 0x12

	)

41 
	#SYS_HANDLER
 0x00

	)

42 
	#SYS_BOOT
 0xFF

	)

43 
	#CRC_POLY
 0xA6

	)

44 
	#UDATA_SIZE
 17

	)

45 
	#UMSG_SIZE
 (
UDATA_SIZE
 + 4)

	)

47 
	#REV_QUERY
 0x51

	)

49 
	#ACK
 0x08

	)

50 
	#NACK
 0x0A

	)

51 
	#ESCAPE
 0x7D

	)

52 
	#ESCAPE_CHAR
 0x20

	)

55 
	#SPAN_TREE
 0x54

	)

56 
	#SPAN_REQ
 0x52

	)

57 
	#SPAN_YES
 0x59

	)

58 
	#SPAN_NO
 0x4E

	)

59 
	#SPAN_MSG
 {
SPAN_TREE
, 
SPAN_REQ
}

	)

60 
	#SMSG_SIZE
 2

	)

62 * 
	gp‹äame
 = 
NULL
;

63 * 
	ghexFûíame
 = 
NULL
;

64 
FILE
* 
	ghexFûe
 = 
NULL
;

66 
	gvîbo£
 = 0;

67 * 
	g¥og
 = 0;

69 
	gbaudøã
 = 38400;

71 
byã
 
	g£¡Byã
 = 0;

72 
uöt16_t
 
	g∑ge_size
;

74 
±hªad_muãx_t
 
	g£rülMuãx
;

75 
±hªad_muãx_t
 
	gcúcbuffMuãx
;

76 
±hªad_muãx_t
 
	gª•⁄£Muãx
;

79 
CúcBuf
 
	g£rülD©a
;

82 
	$kbhô
(){

83 
timevÆ
 
timeout
;

84 
fd_£t
 
ªad_h™dÀs
;

85 
°©us
;

88 
	`FD_ZERO
(&
ªad_h™dÀs
);

89 
	`FD_SET
(0, &
ªad_h™dÀs
);

90 
timeout
.
tv_£c
 =Åimeout.
tv_u£c
 = 0;

91 
°©us
 = 
	`£À˘
(0 + 1, &
ªad_h™dÀs
, 
NULL
, NULL, &
timeout
);

94 if(
°©us
Ë
	`gëch¨
();

96  
°©us
;

97 
	}
}

100 
	$˛órS¸ìn
()

102 
√edTôÀ
 = 1;

103 i‡(
√edTôÀ
) {

104 
	`¥ötf
("En£mbÀ Rïrogømmî (v.%s)\n\n", 
VERSION
);

105 
√edTôÀ
 = 0;

107 
	`Ârötf
(
°dout
, "\n"); 
	`fÊush
(stdout);

109 
i
;

111 #ifde‡
UNIX


112 
i
 = 
	`sy°em
("clear");

114 
i
 = 
	`sy°em
("cls");

117 
	}
}

120 
	$ußge
()

122 
	`¥ötf
("%s: [-p] [p‹äame] [-f] [deÁu… fûíame] [-b] [baud] [-v]\n\n", 
¥og
);

123 
	`exô
(1);

124 
	}
}

127 
	$míu
()

130 
	`˛órS¸ìn
();

132 
	`¥ötf
("Ho° TîmöÆ (v.%s)\n\n", 
VERSION
);

133 
	`¥ötf
("ChooseáÅask:\n");

134 
	`¥ötf
("%¯- F‹˚Én£mbÀ i¡ÿboŸlﬂdî mode\n", 
C_BOOT
);

135 
	`¥ötf
("%¯- Rïrogøm cubes\n", 
C_PROG
);

136 
	`¥ötf
("%¯- Buûdá s∑¬ögÅªe\n", 
C_SPAN
);

137 
	`¥ötf
("%¯- Quô\n", 
C_QUIT
);

139 
	`¥ötf
("\nSelection: ");

140 
	}
}

143 
	$mygëlöe
(** 
n
, 
size_t
* 
l
, 
FILE
** 
b
)

146 
Àngth
 = 
	`gëlöe
(
n
, 
l
, *
b
);

149 if–
Àngth
 == 0 )

155 
Àngth
--;

156 *(*
n
 + 
Àngth
) = 0;

158  
Àngth
;

159 
	}
}

162 
	$edôP©h
(* 
p
)

167  *
p
 )

169 #ifde‡
UNIX


170 if–*
p
 == '\\' ) {

171 *
p
 = '/';

174 if–*
p
 == '/' ) {

175 *
p
 = '\\';

179 
p
++;

182 
	}
}

185 
	$›íSîül
(* 
£rül
)

187 
baud
 = (10000000/(16*
baudøã
)) - 1;

189 if–!
	`°¨tupSîül
(
£rül
, 0, 
baud
) )

191 
	`¥ötf
("Invalid Port!\n\n");

195 
	}
}

198 
	$›íFûe
(
FILE
** 
fûe
, * 
fûíame
)

201 
l
 = 
	`°æí
(
fûíame
);

202 
edôed
[
l
+1];

203 
	`mem˝y
(
edôed
, 
fûíame
, 
l
);

204 
edôed
[
l
] = 0;

207 
	`edôP©h
(
edôed
);

210 *
fûe
 = 
	`f›í
(
edôed
, "r");

211 if(*
fûe
 =
NULL
)

213 
	`¥ötf
("Invalid file!\n\n");

217 
	}
}

220 
byã
 
	$toByã
(
c
)

222 
c
) {

247 
	}
}

250 
	$•lôLöe
(
uöt16_t
 
‹ig_addr
, 
byã
 *
‹ig_d©a
, 
‹ig_Àn
, 
∑ge_size
, uöt16_à*
addr1
,

251 
byã
 *
d©a1
, byã *
Àn1
, 
uöt16_t
 *
addr2
, byã *
d©a2
, byã *
Àn2
)

253 *
Àn1
 = ((((
‹ig_addr
-1Ë/ 
∑ge_size
) + 1) *Öage_size) - orig_addr;

254 *
Àn2
 = 
‹ig_Àn
 - *
Àn1
;

256 *
addr1
 = 
‹ig_addr
;

257 *
addr2
 = 
‹ig_addr
 + *
Àn1
;

259 
d©a1
[0] = (
byã
)((*
addr1
 & 0xFF00) >> 8);

260 
d©a1
[1] = (
byã
)(*
addr1
);

261 
d©a2
[0] = (
byã
)((*
addr2
 & 0xFF00) >> 8);

262 
d©a2
[1] = (
byã
)(*
addr2
);

264 
i
;

265 
i
=0; i<*
Àn1
; i++){

266 
d©a1
[2+
i
] = 
‹ig_d©a
[2+i];

268 
i
=0; i<*
Àn2
; i++){

269 
d©a2
[2+
i
] = 
‹ig_d©a
[2+*
Àn1
+i];

287 
	}
}

290 
	$gëO√Löe
(
uöt16_t
* 
addr
, 
byã
* 
d©a
, 
FILE
** 
f
)

292 
byã
 
Àngth
 = 0;

293 
byã
 
checksum
 = 0;

294 
byã
 
ty≥
 = 0;

295 
byã
 
vÆ
;

296 
c
;

297 
i
;

301 
c
 = ()
	`fgëc
(*
f
);

303 if–
	`„of
(*
f
) ) {

307 
c
 != ':');

310 
Àngth
 = (
	`toByã
(()
	`fgëc
(*
f
))) << 4;

311 
Àngth
 +(
	`toByã
(()
	`fgëc
(*
f
)));

312 
checksum
 +
Àngth
;

315 if–
Àngth
 > 
PDATA_SIZE
 ) {

316  -
Àngth
;

320 *
addr
 = 0x0000;

321 
i
=0; i<
ADDR_LENGTH
; i++)

323 
vÆ
 = (
	`toByã
(()
	`fgëc
(*
f
))) << 4;

324 
vÆ
 +(
	`toByã
(()
	`fgëc
(*
f
)));

325 
checksum
 +
vÆ
;

327 
d©a
[
i
] = 
vÆ
;

328 *
addr
 |
vÆ
 << ((
ADDR_LENGTH
-
i
-1)*8);

332 
ty≥
 = (
	`toByã
(()
	`fgëc
(*
f
))) << 4;

333 
ty≥
 +(
	`toByã
(()
	`fgëc
(*
f
)));

334 
checksum
 +
ty≥
;

337 if–
ty≥
 )

340 
vÆ
 = (
	`toByã
(()
	`fgëc
(*
f
))) << 4;

341 
vÆ
 +(
	`toByã
(()
	`fgëc
(*
f
)));

342 
checksum
 +
vÆ
;

345 if–
checksum
 ) {

355 
i
=0; i<
Àngth
; i++)

357 
vÆ
 = (
	`toByã
(()
	`fgëc
(*
f
))) << 4;

358 
vÆ
 +(
	`toByã
(()
	`fgëc
(*
f
)));

359 
checksum
 +
vÆ
;

361 
d©a
[
i
 + 
ADDR_LENGTH
] = 
vÆ
;

365 
vÆ
 = (
	`toByã
(()
	`fgëc
(*
f
))) << 4;

366 
vÆ
 +(
	`toByã
(()
	`fgëc
(*
f
)));

367 
checksum
 +
vÆ
;

370 if–
checksum
 ) {

375  
Àngth
;

377 
	}
}

380 
	$¥ötD©aLöe
(
byã
* 
d©a
, 
Àngth
)

382 
i
;

384 
	`¥ötf
("addr: %02X%02X\nd©a: ", 
d©a
[0], data[1]);

385 
i
=0; i<
Àngth
; i++) {

386 
	`¥ötf
("%02X ",
d©a
[
i
+
ADDR_LENGTH
]);

388 
	}
}

391 
	$£ndBoŸlﬂdîMesßge
(
byã
* 
d©a
, byã 
size
)

394 if(
size
 > 
PDATA_SIZE
) {  0; }

396 
byã
 
buf
[
size
*2];

398 
ödex
 = 0;

399 
i
;

400 
byã
 
vÆ
;

401 
byã
 
checksum
 = 0;

404 
vÆ
 = 
PROG_CMD
;

405 
buf
[
ödex
++] = 
vÆ
;

406 
checksum
 +
vÆ
;

409 
vÆ
 = 
size
 - 
ADDR_LENGTH
;

410 
buf
[
ödex
++] = 
vÆ
;

411 
checksum
 +
vÆ
;

414 
i
=0; i<
size
; i++)

416 
vÆ
 = *(
d©a
+
i
);

417 
checksum
 +
vÆ
;

420 
buf
[
ödex
++] = 
vÆ
;

424 
i
=0; i<(
PDATA_SIZE
 - 
size
); i++)

426 
buf
[
ödex
++] = 0x00;

430 
checksum
 = (checksum ^ 0xFF) + 1;

433 
buf
[
ödex
++] = 
checksum
;

436 
£¡Byã
 = 
checksum
;

437  
	`£ndMesßge
(
buf
, 
ödex
);

438 
	}
}

440 
	gbyã•îdŸ
 = 1;

444 
	$maybïrötdŸ
(
Àn
)

446 
bef‹edŸ
 = 0;

447 
bef‹edŸ
 -
Àn
;

448 
bef‹edŸ
 <= 0) {

449 
	`¥ötf
(".");

450 
	`fÊush
(
°dout
);

451 
bef‹edŸ
 +
byã•îdŸ
;

453 
	}
}

456 
	$boŸlﬂdîSíd
(
byã
* 
d©a
, byã 
Àngth
)

458 
i
, 
cou¡
;

459 
byã
 
ªcdByã
 = 0;

462 
i
=0; i<
NUM_RETRIES
; i++)

465 
	`£ndBoŸlﬂdîMesßge
(
d©a
, 
Àngth
 + 
ADDR_LENGTH
);

469 
cou¡
 = 0;

470 
time_t
 
ídTime
 = 
	`time
(
NULL
Ë+ 
WAIT_DELAY
;

472  
	`isEm±y
(&(
£rülD©a
)Ë&& (
	`time
(
NULL
Ë< 
ídTime
) );

475 if–!
	`isEm±y
(&(
£rülD©a
)) )

478  !
	`isEm±y
(&(
£rülD©a
)) ) {

479 
ªcdByã
 = (
byã
)
	`p›
(&(
£rülD©a
));

482 i‡(
vîbo£
) {

483 
	`¥ötf
("a: %02X%02X s: %02XÑ: %02X\r", 
d©a
[0], d©a[1], 
£¡Byã
, 
ªcdByã
);

484 
	`fÊush
(
°dout
);

486 
	`maybïrötdŸ
(
Àngth
);

490 if–
£¡Byã
 =
ªcdByã
 ) {

496 
	`¥ötf
("a: %02X%02X s: %02XÑ:Ç⁄e\n", 
d©a
[0], d©a[1], 
£¡Byã
);

501 if–
i
 >
NUM_RETRIES
 ) {

502 
	`¥ötD©aLöe
(
d©a
, 
Àngth
);

503 
	`¥ötf
("\nRetry Failed - Reprogrammingáborted!\n");

508 
	}
}

511 
	$ª¥ogøm
()

513 
byã
 
d©a
[
PDATA_SIZE
];

514 
byã
 
sysD©a
[2] = {
WRITEOUT1
, 
WRITEOUT2
};

516 
uöt16_t
 
addr
;

517 
uöt16_t
 
cuºPage
 = 
∑ge_size
;

519 
Àngth
;

520 
suc˚ss
 = 1;

523 
	`˛órS¸ìn
();

524 
	`¥ötf
("Reprogramming started ...\n");

525 
	`¥ötf
("|------------------------------------------------|\n");

528  
suc˚ss
 && !
	`„of
(
hexFûe
) )

530 
Àngth
 = 
	`gëO√Löe
(&
addr
, 
d©a
, &
hexFûe
);

533 if–
Àngth
 < 0 ) {

534 
	`¥ötf
("readÜineÉrror\n");

535 
suc˚ss
 = 0;

539 if–
Àngth
 == 0 ) {

549 if(
addr
 + 
Àngth
 >
cuºPage
) {

550 
uöt16_t
 
addr1
, 
addr2
;

551 
byã
 
Àn1
, 
Àn2
;

552 
byã
 
d©a1
[18], 
d©a2
[18];

553 
	`•lôLöe
(
addr
, 
d©a
, 
Àngth
, 
∑ge_size
, &
addr1
, 
d©a1
, &
Àn1
, &
addr2
, 
d©a2
, &
Àn2
);

555 if(
Àn1
 > 0){

556 
suc˚ss
 = 
	`boŸlﬂdîSíd
(
d©a1
, 
Àn1
);

559 
addr
 + 
Àngth
 >
cuºPage
)

561 
cuºPage
 +
∑ge_size
;

564 
suc˚ss
 = 
	`boŸlﬂdîSíd
(
sysD©a
, 0);

567 if–!
suc˚ss
 ) {

576 if(
Àn2
 > 0){

577 
suc˚ss
 = 
	`boŸlﬂdîSíd
(
d©a2
, 
Àn2
);

584 if–(
addr
 < 
cuºPage
Ë&& (add∏>cuºPage-
∑ge_size
) ) {

585 
suc˚ss
 = 
	`boŸlﬂdîSíd
(
d©a
, 
Àngth
);

589 
	`¥ötD©aLöe
(
d©a
, 
Àngth
);

590 
	`¥ötf
("\nBound†Eº‹! R™ge: %04X - %04X\n", 
cuºPage
-
∑ge_size
, currPage);

591 
suc˚ss
 = 0;

596 if–
suc˚ss
 ) {

597 
	`mem£t
(
d©a
, 
HEX_END
, 2);

598 
suc˚ss
 = 
	`boŸlﬂdîSíd
(
d©a
, 0);

602 if–
suc˚ss
 ) {

603 
	`¥ötf
("\nEnsemble successfullyÑeprogrammed!\n");

607 
	`f˛o£
(
hexFûe
);

608 
	}
}

611 
byã
 
	$¸cCÆc
(
byã
 
cuºCrc
, byã 
√wVÆ
)

613 
byã
 
¸c
 = 
cuºCrc
;

614 
i
;

616 
¸c
 ^
√wVÆ
;

617 
i
=0; i<8; i++) {

618 if(0x80 & 
¸c
) {

619 
¸c
 = (¸¯<< 1Ë^ 
CRC_POLY
;

622 
¸c
 = (crc << 1);

626  
¸c
;

627 
	}
}

630 
	$sy°emSíd
(
byã
 
ty≥
)

632 
byã
 
d©a
[
UMSG_SIZE
*2];

634 
i
;

635 
ödex
 = 0;

636 
byã
 
vÆ
 = 0;

637 
byã
 
checksum
 = 0;

640 
byã
 
∑rôy
 = 0;

641 
∑rôy
 ^= 0x01;

644 
d©a
[
ödex
++] = 
SYS_CMD
 | 
∑rôy
;

645 
d©a
[
ödex
++] = 
SYS_HANDLER
;

646 
d©a
[
ödex
++] = 
SYS_HANDLER
;

648 
checksum
 = 
	`¸cCÆc
(checksum, 
SYS_HANDLER
);

649 
checksum
 = 
	`¸cCÆc
(checksum, 
SYS_HANDLER
);

652 
i
=0; i<
UDATA_SIZE
; i++) {

653 
vÆ
 = 
ty≥
 ^ 
i
;

654 
checksum
 = 
	`¸cCÆc
(checksum, 
vÆ
);

657 if–(
vÆ
 =
ACK
Ë|| (vÆ =(ACK+1)Ë|| (vÆ =
NACK
) || (val == (NACK+1)) ||

658 (
vÆ
 =
SYS_CMD
Ë|| (vÆ =(SYS_CMD +1)Ë|| (vÆ =
ESCAPE
 ) ) {

659 
d©a
[
ödex
++] = 
ESCAPE
;

660 
d©a
[
ödex
++] = 
vÆ
 ^ 
ESCAPE_CHAR
;

664 
d©a
[
ödex
++] = 
ty≥
 ^ 
i
;

669 if–(
checksum
 =
ACK
Ë|| (checksum =(ACK+1)Ë|| (checksum =
NACK
) || (checksum == (NACK+1)) ||

670 (
checksum
 =
SYS_CMD
Ë|| (checksum =(SYS_CMD +1)Ë|| (checksum =
ESCAPE
 ) ) {

671 
d©a
[
ödex
++] = 
ESCAPE
;

672 
d©a
[
ödex
++] = 
checksum
 ^ 
ESCAPE_CHAR
;

675 
d©a
[
ödex
++] = 
checksum
;

679 
	`£ndMesßge
(
d©a
, 
ödex
);

682 i‡(
vîbo£
Ë
	`¥ötf
("Síàty≥ %02X sy°em mesßge.\n", 
ty≥
);

685  !
	`isEm±y
(&(
£rülD©a
)) )

687 
	`p›
(&(
£rülD©a
));

690 
	}
}

692 
	$gëVîsi⁄
()

694 
byã
 
quîy
 = 
REV_QUERY
;

695 
	`£ndMesßge
(&
quîy
, 1);

696 
byã
 
i
;

699 
i
=0; i<
NUM_RETRIES
; i++)

701 
time_t
 
ídTime
 = 
	`time
(
NULL
Ë+ 
WAIT_DELAY
;

703  
	`isEm±y
(&(
£rülD©a
)Ë&& (
	`time
(
NULL
Ë< 
ídTime
) );

706 if–!
	`isEm±y
(&(
£rülD©a
)) ) {

707  
	`p›
(&(
£rülD©a
));

711 
	`¥ötf
("FailedÅoÑead block version.\n");

717 
	}
}

720 
	$¸óãS∑n
()

722 
i
, 
cou¡
;

723 
suc˚ss
 = 0;

724 
byã
 
ªcdByã
;

725 
byã
 
d©a
[2] = 
SPAN_MSG
;

726 
time_t
 
ídTime
;

729 
i
=0; i<
NUM_RETRIES
; i++)

732  !
	`isEm±y
(&(
£rülD©a
)) ) {

733 
	`p›
(&(
£rülD©a
));

737 
	`£ndMesßge
(
d©a
, 
SMSG_SIZE
);

738 i‡(
vîbo£
) {

739 
	`¥ötf
("Sít: %c%¯ ", ()
d©a
[0], ()d©a[1]);
	`fÊush
(
°dout
);

743 
cou¡
 = 0;

744 
ídTime
 = 
	`time
(
NULL
Ë+ 
WAIT_DELAY
;

746  
	`isEm±y
(&(
£rülD©a
)Ë&& (
	`time
(
NULL
Ë< 
ídTime
) );

750  !
	`isEm±y
(&(
£rülD©a
)) ) {

751 
ªcdByã
 = (
byã
)
	`p›
(&(
£rülD©a
));

752 
suc˚ss
 = (
ªcdByã
 =
SPAN_TREE
);

754 if–
suc˚ss
 ) {

755 i‡(
vîbo£
) {

756 
	`¥ötf
("Recd: %c", ()
ªcdByã
);
	`fÊush
(
°dout
);

763 if–!
suc˚ss
 ) {

764 i‡(
vîbo£
) {

765 
	`¥ötf
("Recd: (n⁄e)“⁄e)\n");
	`fÊush
(
°dout
);

767 
suc˚ss
 = 0;

773 
cou¡
 = 0;

774 
ídTime
 = 
	`time
(
NULL
Ë+ 
WAIT_DELAY
;

776  
	`isEm±y
(&(
£rülD©a
)Ë&& (
	`time
(
NULL
Ë< 
ídTime
) );

780 if–!
	`isEm±y
(&(
£rülD©a
)) ) {

781 
ªcdByã
 = (
byã
)
	`p›
(&(
£rülD©a
));

782 i‡(
vîbo£
Ë
	`¥ötf
("%c\n", ()
ªcdByã
);

784 
suc˚ss
 = suc˚s†&& (
ªcdByã
 =
SPAN_YES
);

788 
suc˚ss
 = 0;

789 i‡(
vîbo£
Ë
	`¥ötf
("(none)\n");

793 if–
suc˚ss
 ) {

799  !
	`isEm±y
(&(
£rülD©a
)) ) {

800 
	`p›
(&(
£rülD©a
));

804 if–
i
 >
NUM_RETRIES
 ) {

805 
	`¥ötf
("UnableÅo create spanningÅree!\n");

807 
	}
}

810 
	$maö
(
¨gc
, ** 
¨gv
)

812 
i
;

813 
size_t
 
maxLígth
 = 
MAX_LENGTH
;

814 
vîsi⁄
;

817 
	`˛órS¸ìn
();

819 
¥og
 = 
¨gv
[0];

822 
i
=1; i<
¨gc
; i++)

825 if–
	`°rcmp
(
¨gv
[
i
], "-p") == 0 )

828 if–
¨gc
 <(
i
+1) ) {

829 
	`ußge
();

833 
p‹äame
 = 
¨gv
[++
i
];

835 if–!
	`›íSîül
(
p‹äame
) ) {

836 
	`exô
(1);

841 if–
	`°rcmp
(
¨gv
[
i
], "-f") == 0 )

844 if–
¨gc
 <(
i
+1) ) {

845 
	`ußge
();

849 
hexFûíame
 = 
¨gv
[++
i
];

852 if–!
	`›íFûe
(&
hexFûe
, 
hexFûíame
) ) {

853 
	`exô
(1);

858 if–
	`°rcmp
(
¨gv
[
i
], "-b") == 0 )

861 if–
¨gc
 <(
i
+1) ) {

862 
	`ußge
();

866 
baudøã
 = 
	`©oi
(
¨gv
[++
i
]);

869 if(
p‹äame
 !
NULL
) {

871 
	`shutdownSîül
();

872 
	`›íSîül
(
p‹äame
);

876 i‡(
	`°rcmp
(
¨gv
[1], "-v") == 0 )

878 
vîbo£
 = 1;

883 
	`ußge
();

888 
	`˛órS¸ìn
();

891 if–
p‹äame
 =
NULL
 )

894 
p‹äame
 = 
	`mÆloc
(
MAX_LENGTH
 + 1);

897 
	`¥ötf
("Enter serialÖort: ");

900 
	`mygëlöe
(&
p‹äame
, &
maxLígth
, &
°dö
);

902  !
	`›íSîül
(
p‹äame
) );

903 
	`‰ì
(
p‹äame
);

907 
	`˛órS¸ìn
();

910 if–
hexFûíame
 =
NULL
 )

913 
hexFûíame
 = 
	`mÆloc
(
MAX_LENGTH
 + 1);

916 
	`¥ötf
("EnterÖath of hex file: ");

919 
	`mygëlöe
(&
hexFûíame
, &
maxLígth
, &
°dö
);

921  !
	`›íFûe
(&
hexFûe
, 
hexFûíame
) );

926 
°©
 
sbuf
;

927 i‡(
	`°©
(
hexFûíame
, &
sbuf
)) {

928 
	`Ârötf
(
°dîr
, "C™'à°© '%s'\n", 
hexFûíame
);

929 
	`exô
(-1);

931 
byã•îdŸ
 = ((16*(
sbuf
.
°_size
/42))/50)+1;

954 
	`˛órS¸ìn
();

955 
	`¥ötf
("Press Enter whenáll blocksáre in bootloader mode (blue/red)...\n\n");

959 
	`sy°emSíd
(
SYS_BOOT
);

960 
	`u¶ìp
(250000);

961 
	`¥ötf
("."); 
	`fÊush
(
°dout
);

964  !
	`kbhô
() );

966 
	`˛órS¸ìn
();

967 
	`¥ötf
("Press Enter whenáll blocksáre in spanningÅree (blue/green)...\n\n");

972 
	`¸óãS∑n
();

973 
	`u¶ìp
(50000);

974 
	`¥ötf
("."); 
	`fÊush
(
°dout
);

977  !
	`kbhô
() );

981 
	`˛órS¸ìn
();

986 
	`¸óãS∑n
();

989 
vîsi⁄
 = 
	`gëVîsi⁄
();

990 if(
vîsi⁄
 == () 0){

991 
	`¥ötf
("FailedÅoÑead block version. Exiting...\n");

994 if(
vîsi⁄
 == 'b'){

995 
∑ge_size
 = 
REV1B_PAGE_SIZE
;

997 if(
vîsi⁄
 == 'c'){

998 
∑ge_size
 = 
REV1C_PAGE_SIZE
;

1002 
	`ª¥ogøm
();

1005 
	`shutdownSîül
();

1008 
	}
}

	@hw-api/audio.h

1 #i‚de‡
__AUDIO_H__


2 
	#__AUDIO_H__


	)

4 
	~<°döt.h
>

6 
	#SAMPLES
 64

	)

8 
chúp
(, );

9 
£tDac
(, );

11 
öôAudio
();

	@hw-api/hwAccelerometer.h

1 #i‚de‡
__HW_ACCELEROMETER_H__


2 
	#__HW_ACCELEROMETER_H__


	)

4 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


5 
	~"../sy°em/defs.h
"

8 
√wHWAc˚lD©a
();

9 
upd©eHWAc˚l
();

10 
öôHWAc˚l
();

13 
£tAc˚lRegi°î
(
byã
 
⁄e
, byã 
two
);

	@hw-api/hwBlockTick.h

1 #i‚de‡
__HW_BLOCK_TICK_H__


2 
	#__HW_BLOCK_TICK_H__


	)

8 
öôBlockTick
();

	@hw-api/hwBoot.h

1 #i‚de‡
__HW_BOOT_H__


2 
	#__HW_BOOT_H__


	)

4 
jumpToHWBoŸSe˘i⁄
();

	@hw-api/hwDataLink.h

1 #i‚de‡
_HW_DATALINK_H_


2 
	#_HW_DATALINK_H_


	)

4 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


5 
	~"../sy°em/defs.h
"

6 
	~"../sy°em/d©a_lök.h
"

7 
	~"../sy°em/mem‹y.h
"

11 #ifde‡
BBSIM


12 
	#SQ_LOCK
 &(
	`this
()->
£ndQueueMuãx
)

	)

15 
	#SQ_LOCK
 
ATOMIC_RESTORESTATE


	)

22 
byã
 
ªmoveFromSq
(
PRef
 
p
, byã 
ª•⁄£
);

25 
ÊushSídQueue
(
PRef
 
p
);

29 
¥o˚ssBuf„r
(
PRef
);

32 
£ndOnSîül
(
PRef
);

35 
Chunk
* 
√xtPackë
();

38 
öôHWD©aLök
();

	@hw-api/hwDebug.h

1 #i‚de‡
__HW_DEBUG_H__


2 
	#__HW_DEBUG_H__


	)

4 
	~<°dio.h
>

8 
öôHWDebug
();

10 
FILE
 
debug
;

12 
debugPutCh¨
(
c
, 
FILE
 * 
fb
);

13 
debugGëCh¨
(
FILE
 * 
fb
);

	@hw-api/hwLED.h

1 #i‚de‡
__HW_LED_H__


2 
	#__HW_LED_H__


	)

4 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


5 
	~"../sy°em/defs.h
"

6 
	~"../sy°em/Àd.h
"

9 
£tHWLED
(
byã
 
r
, byã 
g
, byã 
b
, 
I¡ísôy
 
i
);

10 
öôHWLED
();

	@hw-api/hwMemory.h

1 #i‚de‡
__HW_MEMORY_H__


2 
	#__HW_MEMORY_H__


	)

4 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


5 
	~"../sy°em/defs.h
"

11 
°‹e
(* 
de°
, * 
§c
, 
Àn
);

16 
ª°‹e
(* 
de°
, * 
§c
, 
Àn
);

19 
uöt16_t
 
gëGUID
();

	@hw-api/hwSerial.h

1 #i‚de‡
__HW_SERIAL_H__


2 
	#__HW_SERIAL_H__


	)

4 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


5 
	~"../sy°em/£rül.h
"

8 
öôHWP‹ts
();

9 
pPutCh¨
(
c
, 
PRef
 
p
);

10 
pGëCh¨
(
PRef
 
p
);

	@hw-api/hwTime.h

1 #i‚de‡
__HW_TIME_H__


2 
	#__HW_TIME_H__


	)

4 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


5 
	~"../sy°em/h¨dw¨ëime.h
"

8 
Time
 
gëHWTime
();

9 
öôHWTime
();

	@hw-block/audio.c

1 
	~"audio.h
"

2 
	~<avr/io.h
>

3 
	~<utû/dñay.h
>

4 
	~<avr/öãºu±.h
>

5 
	~"time.h
"

7 
uöt32_t
 
	g_audio_duøti⁄
;

9 
	gsöëabÀ
[256] = {

39 
	gwave
[
SAMPLES
];

41 
	$chúp
(
‰eq
, 
duøti⁄
)

43 
uöt16_t
 
cˇVÆ
;

44 
cˇVÆ
 = ((
uöt32_t
)16000000 / (uöt32_t)
‰eq
) - 1;

46 
TCE0
.
CCA
 = 
cˇVÆ
;

48 
_audio_duøti⁄
 = (
uöt32_t
)
‰eq
 * (uöt32_t)
duøti⁄
;

49 
TCE0
.
CTRLA
 = 
TC_CLKSEL_DIV1_gc
;

51 
PORTB
.
OUTSET
 = 
PIN5_bm
;

52 
	}
}

54 
	$£tDac
(
ch0
, 
ch1
)

56 
DACB
.
CH0DATA
 = 
ch0
 << 4;

57 
DACB
.
CH1DATA
 = 
ch1
 << 4;

58 
	}
}

60 
	$öôAudio
()

62 
i
;

64 
i
 = 0; i < (
SAMPLES
/2); i++)

66 
wave
[
i
] = (
söëabÀ
[((2*256)/
SAMPLES
)*i]) << 4;

67 if(
wave
[
i
] > 2048)

69 
wave
[
i
+(
SAMPLES
/2)] = 4096 - wave[i];

73 
wave
[
i
+(
SAMPLES
/2)] = 2048 + wave[i];

78 
PORTB
.
OUTCLR
 = 
PIN5_bm
;

79 
PORTB
.
DIRSET
 = 
PIN5_bm
;

86 
DACB
.
CTRLB
 = 
DAC_CHSEL_SINGLE_gc
 | 
DAC_CH0TRIG_bm
;

88 
DACB
.
CTRLC
 = 
DAC_REFSEL_INT1V_gc
;

91 
DACB
.
TIMCTRL
 = 
DAC_CONINTVAL_64CLK_gc
 | 
DAC_REFRESH_512CLK_gc
;

93 
DACB
.
EVCTRL
 = 
DAC_EVSEL_1_gc
;

96 
DACB
.
CTRLA
 = 
DAC_CH0EN_bm
 | 
DAC_ENABLE_bm
;

98 
DACB
.
CH0DATA
 = 0;

99 
DACB
.
CH1DATA
 = 0;

101 
DMA
.
CTRL
 = 
DMA_ENABLE_bm
 | 
DMA_PRIMODE_RR0123_gc
;

103 
DMA
.
CH0
.
ADDRCTRL
 = 
DMA_CH_SRCRELOAD_BLOCK_gc
 | 
DMA_CH_SRCDIR_INC_gc
 | 
DMA_CH_DESTRELOAD_BURST_gc
 | 
DMA_CH_DESTDIR_INC_gc
;

104 
DMA
.
CH0
.
TRIGSRC
 = 
DMA_CH_TRIGSRC_DACB_CH0_gc
;

105 
DMA
.
CH0
.
TRFCNT
 = 
SAMPLES
;

106 
DMA
.
CH0
.
REPCNT
 = 0;

108 
DMA
.
CH0
.
SRCADDR0
 = (((
uöt32_t
)(&(
wave
[0])))>>0*8) & 0xFF;

109 
DMA
.
CH0
.
SRCADDR1
 = (((
uöt32_t
)(&(
wave
[0])))>>1*8) & 0xFF;

110 
DMA
.
CH0
.
SRCADDR2
 = (((
uöt32_t
)(&(
wave
[0])))>>2*8) & 0xFF;

111 
DMA
.
CH0
.
DESTADDR0
 = 0x38;

112 
DMA
.
CH0
.
DESTADDR1
 = 0x03;

113 
DMA
.
CH0
.
DESTADDR2
 = 0x00;

115 
DMA
.
CH0
.
CTRLA
 = 
DMA_CH_ENABLE_bm
 | 
DMA_CH_REPEAT_bm
 | 
DMA_CH_BURSTLEN_2BYTE_gc
 | 
DMA_CH_SINGLE_bm
;

119 
PORTB
.
DIRSET
 = 
PIN3_bm
;

120 
PORTB
.
OUTCLR
 = 
PIN3_bm
;

136 
TCE0
.
CTRLA
 = 
TC_CLKSEL_OFF_gc
;

137 
TCE0
.
CTRLB
 = 
TC_WGMODE_FRQ_gc
;

138 
TCE0
.
INTCTRLA
 = 
TC_OVFINTLVL_HI_gc
;

139 
TCE0
.
CCA
 = 0x0000;

141 
EVSYS
.
CH1MUX
 = 
EVSYS_CHMUX_TCE0_OVF_gc
;

143 
PORTB
.
OUTSET
 |
PIN5_bm
;

163 
	}
}

166 
	$ISR
(
TCE0_OVF_ve˘
)

168 if(
_audio_duøti⁄
 == 0)

170 
TCE0
.
CTRLA
 = 
TC_CLKSEL_OFF_gc
;

171 
PORTB
.
OUTCLR
 = 
PIN5_bm
;

175 
_audio_duøti⁄
--;

177 
	}
}

	@hw-block/avr_compiler.h

45 #i‚de‡
COMPILER_AVR_H


46 
	#COMPILER_AVR_H


	)

48 #i‚de‡
F_CPU


50 
	#F_CPU
 2000000UL

	)

53 
	~<°döt.h
>

54 
	~<°dboﬁ.h
>

55 
	~<°dlib.h
>

58 
	#AVR_ENTER_CRITICAL_REGION
–Ë
uöt8_t
 vﬁ©ûê
ßved_§eg
 = 
SREG
; \

	)

59 
˛i
();

64 
	#AVR_LEAVE_CRITICAL_REGION
–Ë
SREG
 = 
ßved_§eg
;

	)

66 #i‡
deföed
–
__ICCAVR__
 )

68 
	~<öavr.h
>

69 
	~<iﬂvr.h
>

70 
	~<öåösics.h
>

71 
	~<pgm•a˚.h
>

73 #i‚de‡
__HAS_ELPM__


74 
	#_MEMATTR
 
__Êash


	)

76 
	#_MEMATTR
 
__ÁrÊash


	)

89 
	#dñay_us
–
us
 ) ( 
	`__dñay_cy˛es
––
F_CPU
 / 1000000UL ) * ( u†ËË)

	)

104 
	#PRAGMA
(
x
Ë
	`_Pøgma
–#x )

	)

105 
	#ISR
(
vec
Ë
	`PRAGMA
–
ve˘‹
=ve¯Ë
__öãºu±
 
h™dÀr_
##
	`vec
()

	)

106 
	#£i
–Ë(
	`__íabÀ_öãºu±
–))

	)

107 
	#˛i
–Ë(
	`__dißbÀ_öãºu±
–))

	)

110 
	#n›
–Ë(
	`__no_›î©i⁄
())

	)

113 
	#w©chdog_ª£t
–Ë(
	`__w©chdog_ª£t
–))

	)

116 
	#INLINE
 
	`PRAGMA
–
ölöe
=
f‹˚d
 ) 

	)

118 
	#FLASH_DECLARE
(
x
Ë
_MEMATTR
 
	)
x

119 
	#FLASH_STRING
(
x
Ë((
_MEMATTR
 c⁄° *)(x))

	)

120 
	#FLASH_STRING_T
 c⁄° 
_MEMATTR
 *

	)

121 
	#FLASH_BYTE_ARRAY_T
 
uöt8_t
 c⁄° 
_MEMATTR
 *

	)

122 
	#PGM_READ_BYTE
(
x
Ë*(x)

	)

123 
	#PGM_READ_WORD
(
x
Ë*(x)

	)

125 
	#SHORTENUM


	)

127 #ñi‡
deföed
–
__GNUC__
 )

129 
	~<avr/io.h
>

130 
	~<avr/öãºu±.h
>

131 
	~<avr/pgm•a˚.h
>

132 
	~<utû/dñay.h
>

135 
	#dñay_us
–
us
 ) (
	`_dñay_us
–u†))

	)

137 
	#INLINE
 
ölöe


	)

140 
	#n›
(Ëdÿ{ 
__asm__
 
	`__vﬁ©ûe__
 ("n›"); } 0)

	)

142 
	#MAIN_TASK_PROLOGUE
 

	)

145 
	#MAIN_TASK_EPILOGUE
(Ë -1;

	)

147 
	#SHORTENUM
 
	`__©åibuã__
 ((
∑cked
))

	)

150 #îr‹ 
Compûî
 
nŸ
 
suµ‹ãd
.

	@hw-block/eeprom_driver.c

59 
	~"ì¥om_drivî.h
"

72 
	$EEPROM_WrôeByã
–
uöt8_t
 
∑geAddr
, uöt8_à
byãAddr
, uöt8_à
vÆue
 )

77 
	`EEPROM_FlushBuf„r
();

78 
NVM
.
CMD
 = 
NVM_CMD_LOAD_EEPROM_BUFFER_gc
;

81 
uöt16_t
 
addªss
 = (uöt16_t)(
∑geAddr
*
EEPROM_PAGESIZE
)

82 |(
byãAddr
 & (
EEPROM_PAGESIZE
-1));

85 
NVM
.
ADDR0
 = 
addªss
 & 0xFF;

86 
NVM
.
ADDR1
 = (
addªss
 >> 8) & 0x1F;

87 
NVM
.
ADDR2
 = 0x00;

90 
NVM
.
DATA0
 = 
vÆue
;

95 
NVM
.
CMD
 = 
NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc
;

96 
	`NVM_EXEC
();

97 
	}
}

110 
uöt8_t
 
	$EEPROM_RódByã
–
uöt8_t
 
∑geAddr
, uöt8_à
byãAddr
 )

113 
	`EEPROM_WaôF‹NVM
();

116 
uöt16_t
 
addªss
 = (uöt16_t)(
∑geAddr
*
EEPROM_PAGESIZE
)

117 |(
byãAddr
 & (
EEPROM_PAGESIZE
-1));

120 
NVM
.
ADDR0
 = 
addªss
 & 0xFF;

121 
NVM
.
ADDR1
 = (
addªss
 >> 8) & 0x1F;

122 
NVM
.
ADDR2
 = 0x00;

125 
NVM
.
CMD
 = 
NVM_CMD_READ_EEPROM_gc
;

126 
	`NVM_EXEC
();

128  
NVM
.
DATA0
;

129 
	}
}

139 
	$EEPROM_WaôF‹NVM
( )

143 } (
NVM
.
STATUS
 & 
NVM_NVMBUSY_bm
) == NVM_NVMBUSY_bm);

144 
	}
}

155 
	$EEPROM_FlushBuf„r
( )

158 
	`EEPROM_WaôF‹NVM
();

161 i‡((
NVM
.
STATUS
 & 
NVM_EELOAD_bm
) != 0) {

162 
NVM
.
CMD
 = 
NVM_CMD_ERASE_EEPROM_BUFFER_gc
;

163 
	`NVM_EXEC
();

165 
	}
}

183 
	$EEPROM_LﬂdByã
–
uöt8_t
 
byãAddr
, uöt8_à
vÆue
 )

186 
	`EEPROM_WaôF‹NVM
();

187 
NVM
.
CMD
 = 
NVM_CMD_LOAD_EEPROM_BUFFER_gc
;

190 
NVM
.
ADDR0
 = 
byãAddr
 & 0xFF;

191 
NVM
.
ADDR1
 = 0x00;

192 
NVM
.
ADDR2
 = 0x00;

195 
NVM
.
DATA0
 = 
vÆue
;

196 
	}
}

213 
	$EEPROM_LﬂdPage
–c⁄° 
uöt8_t
 * 
vÆues
 )

216 
	`EEPROM_WaôF‹NVM
();

217 
NVM
.
CMD
 = 
NVM_CMD_LOAD_EEPROM_BUFFER_gc
;

222 
NVM
.
ADDR1
 = 0x00;

223 
NVM
.
ADDR2
 = 0x00;

226 
uöt8_t
 
i
 = 0; i < 
EEPROM_PAGESIZE
; ++i) {

227 
NVM
.
ADDR0
 = 
i
;

228 
NVM
.
DATA0
 = *
vÆues
;

229 ++
vÆues
;

231 
	}
}

242 
	$EEPROM_LﬂdP¨tülPage
(c⁄° 
uöt8_t
 * 
vÆues
, uöt8_à
off£t
, uöt8_à
Àngth
)

245 
	`EEPROM_WaôF‹NVM
();

246 
NVM
.
CMD
 = 
NVM_CMD_LOAD_EEPROM_BUFFER_gc
;

251 
NVM
.
ADDR1
 = 0x00;

252 
NVM
.
ADDR2
 = 0x00;

255 
uöt8_t
 
i
 = 
off£t
; 
Àngth
 !0 && i < 
EEPROM_PAGESIZE
; ++i,--length) {

256 
NVM
.
ADDR0
 = 
i
;

257 
NVM
.
DATA0
 = *
vÆues
;

258 ++
vÆues
;

260 
	}
}

274 
	$EEPROM_AtomicWrôePage
–
uöt8_t
 
∑geAddr
 )

277 
	`EEPROM_WaôF‹NVM
();

280 
uöt16_t
 
addªss
 = (uöt16_t)(
∑geAddr
*
EEPROM_PAGESIZE
);

283 
NVM
.
ADDR0
 = 
addªss
 & 0xFF;

284 
NVM
.
ADDR1
 = (
addªss
 >> 8) & 0x1F;

285 
NVM
.
ADDR2
 = 0x00;

288 
NVM
.
CMD
 = 
NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc
;

289 
	`NVM_EXEC
();

290 
	}
}

299 
	$EEPROM_Eø£Page
–
uöt8_t
 
∑geAddr
 )

302 
	`EEPROM_WaôF‹NVM
();

305 
uöt16_t
 
addªss
 = (uöt16_t)(
∑geAddr
*
EEPROM_PAGESIZE
);

308 
NVM
.
ADDR0
 = 
addªss
 & 0xFF;

309 
NVM
.
ADDR1
 = (
addªss
 >> 8) & 0x1F;

310 
NVM
.
ADDR2
 = 0x00;

313 
NVM
.
CMD
 = 
NVM_CMD_ERASE_EEPROM_PAGE_gc
;

314 
	`NVM_EXEC
();

315 
	}
}

328 
	$EEPROM_S∂ôWrôePage
–
uöt8_t
 
∑geAddr
 )

331 
	`EEPROM_WaôF‹NVM
();

334 
uöt16_t
 
addªss
 = (uöt16_t)(
∑geAddr
*
EEPROM_PAGESIZE
);

337 
NVM
.
ADDR0
 = 
addªss
 & 0xFF;

338 
NVM
.
ADDR1
 = (
addªss
 >> 8) & 0x1F;

339 
NVM
.
ADDR2
 = 0x00;

342 
NVM
.
CMD
 = 
NVM_CMD_WRITE_EEPROM_PAGE_gc
;

343 
	`NVM_EXEC
();

344 
	}
}

350 
	$EEPROM_Eø£AŒ
( )

353 
	`EEPROM_WaôF‹NVM
();

356 
NVM
.
CMD
 = 
NVM_CMD_ERASE_EEPROM_gc
;

357 
	`NVM_EXEC
();

358 
	}
}

	@hw-block/eeprom_driver.h

59 #i‚de‡
EEPROM_DRIVER_H


60 
	#EEPROM_DRIVER_H


	)

62 
	~"avr_compûî.h
"

65 
	#EEPROM_PAGESIZE
 32

	)

66 
	#EEPROM
(
_∑geAddr
, 
_byãAddr
Ë\

	)

67 ((
	guöt8_t
 *Ë
	gMAPPED_EEPROM_START
)[
_∑geAddr
*
EEPROM_PAGESIZE
 + 
_byãAddr
]

79 
	#EEPROM_E«bÀPowîRedu˘i⁄
(Ë–
NVM
.
CTRLB
 |
NVM_EPRM_bm
 )

	)

85 
	#EEPROM_DißbÀPowîRedu˘i⁄
(Ë–
NVM
.
CTRLB
 &~
NVM_EPRM_bm
 )

	)

96 
	#EEPROM_E«bÀM≠pög
(Ë–
NVM
.
CTRLB
 |
NVM_EEMAPEN_bm
 )

	)

103 
	#EEPROM_DißbÀM≠pög
(Ë–
NVM
.
CTRLB
 &~
NVM_EEMAPEN_bm
 )

	)

113 
	#NVM_EXEC
(Ë
	`asm
("pushÑ30" "\n\t" \

	)

130 
EEPROM_WrôeByã
–
uöt8_t
 
∑geAddr
, uöt8_à
byãAddr
, uöt8_à
vÆue
 );

131 
uöt8_t
 
EEPROM_RódByã
–uöt8_à
∑geAddr
, uöt8_à
byãAddr
 );

132 
EEPROM_WaôF‹NVM
( );

133 
EEPROM_FlushBuf„r
( );

134 
EEPROM_LﬂdByã
–
uöt8_t
 
byãAddr
, uöt8_à
vÆue
 );

135 
EEPROM_LﬂdPage
–c⁄° 
uöt8_t
 * 
vÆues
 );

136 
EEPROM_LﬂdP¨tülPage
(c⁄° 
uöt8_t
 * 
vÆues
, uöt8_à
off£t
, uöt8_à
Àngth
);

137 
EEPROM_AtomicWrôePage
–
uöt8_t
 
∑geAddr
 );

138 
EEPROM_Eø£Page
–
uöt8_t
 
∑geAddªss
 );

139 
EEPROM_S∂ôWrôePage
–
uöt8_t
 
∑geAddr
 );

140 
EEPROM_Eø£AŒ
( );

	@hw-block/ext_memory.c

1 
	~"ext_mem‹y.h
"

2 
	~<avr/io.h
>

4 
uöt8_t
 
	$•iTxRx
(
uöt8_t
 
öput
)

6 
SPIE
.
DATA
 = 
öput
;

8 !(
SPIE
.
STATUS
 & 
SPI_IF_bm
));

10  
SPIE
.
DATA
;

12 
	}
}

14 
	$£tSS
(
which
, 
Àvñ
)

16 if(
which
 =
SRAM
)

18 if(
Àvñ
)

20 
PORTF
.
OUTSET
 = 
PIN4_bm
;

24 
PORTF
.
OUTCLR
 = 
PIN4_bm
;

29 if(
Àvñ
)

31 
PORTE
.
OUTSET
 = 
PIN4_bm
;

35 
PORTE
.
OUTCLR
 = 
PIN4_bm
;

39 
	}
}

41 
	$ªadExtMem
(
which
, 
°¨t
, * 
buf
, 
Àngth
)

43 if(
which
 =
SRAM
)

45 
i
;

47 
	`£tSS
(
SRAM
, 0);

49 
	`•iTxRx
(
SRAM_READ
);

50 
	`•iTxRx
((
°¨t
 >> 8) & 0x00FF);

51 
	`•iTxRx
(
°¨t
 & 0x00FF);

53 
i
 = 0; i < 
Àngth
; ++i)

55 
buf
[
i
] = 
	`•iTxRx
(0);

58 
	`£tSS
(
SRAM
, 1);

64 
i
;

66 
	`£tSS
(
FLASH
, 0);

68 
	`•iTxRx
(
FLASH_BF1RD
);

69 
	`•iTxRx
(0x00);

70 
	`•iTxRx
((
°¨t
 & 0x0300) >> 8);

71 
	`•iTxRx
(
°¨t
 & 0x00FF);

72 
	`•iTxRx
(0x00);

74 
i
 = 0; i < 
Àngth
; ++i)

76 
buf
[
i
] = 
	`•iTxRx
(0);

79 
	`£tSS
(
FLASH
, 1);

83 
	}
}

85 
	$wrôeExtMem
(
which
, 
°¨t
, * 
buf
, 
Àngth
)

87 if(
which
 =
SRAM
)

89 
i
;

91 
	`£tSS
(
SRAM
, 0);

93 
	`•iTxRx
(
SRAM_WRITE
);

94 
	`•iTxRx
((
°¨t
 >> 8) & 0x00FF);

95 
	`•iTxRx
(
°¨t
 & 0x00FF);

97 
i
 = 0; i < 
Àngth
; ++i)

99 
	`•iTxRx
(
buf
[
i
]);

102 
	`£tSS
(
SRAM
, 1);

108 
i
;

110 
	`£tSS
(
FLASH
, 0);

112 
	`•iTxRx
(
FLASH_BF1WR
);

113 
	`•iTxRx
(0x00);

114 
	`•iTxRx
((
°¨t
 & 0x0300) >> 8);

115 
	`•iTxRx
(
°¨t
 & 0x00FF);

117 
i
 = 0; i < 
Àngth
; ++i)

119 
	`•iTxRx
(
buf
[
i
]);

122 
	`£tSS
(
FLASH
, 1);

128 
	}
}

132 
	$öôFœsh
()

135 
	}
}

137 
	$öôSRAM
()

139 
	`£tSS
(
SRAM
, 0);

141 
	`•iTxRx
(
SRAM_WRSR
);

142 
	`•iTxRx
(0x41);

144 
	`£tSS
(
SRAM
, 1);

147 
uöt8_t
 
vÆ
;

148 
	`£tSS
(
SRAM
, 0);

150 
	`•iTxRx
(
SRAM_RDSR
);

151 
vÆ
 = 
	`•iTxRx
(0x0);

153 
	`£tSS
(
SRAM
, 1);

155 
	`¥ötf
("SR is: %x\r\n",
vÆ
);

157 
	}
}

159 
	$öôExtMem
()

161 
PORTE
.
OUTSET
 = 
PIN4_bm
;

162 
PORTE
.
DIRSET
 = 
PIN4_bm
;

165 
PORTF
.
OUTSET
 = 
PIN4_bm
;

166 
PORTF
.
DIRSET
 = 
PIN4_bm
;

169 
PORTE
.
DIRSET
 = 
PIN5_bm
 | 
PIN7_bm
;

170 
PORTE
.
DIRCLR
 = 
PIN6_bm
;

172 
SPIE
.
CTRL
 = 
SPI_ENABLE_bm
 | 
SPI_MASTER_bm
;

174 
	`öôFœsh
();

175 
	`öôSRAM
();

177 
	}
}

	@hw-block/ext_memory.h

1 #i‚de‡
__EXT_MEMORY_H__


2 
	#__EXT_MEMORY_H__


	)

4 
	~<°döt.h
>

5 
	~<°dio.h
>

7 
	#SRAM
 1

	)

8 
	#FLASH
 0

	)

10 
	#SRAM_READ
 0x03

	)

11 
	#SRAM_WRITE
 0x02

	)

12 
	#SRAM_RDSR
 0x05

	)

13 
	#SRAM_WRSR
 0x01

	)

15 
	#FLASH_BF1WR
 0x84

	)

16 
	#FLASH_BF1RD
 0xD4

	)

18 
ªadExtMem
(
which
, 
°¨t
, * 
buf
, 
Àngth
);

19 
wrôeExtMem
(
which
, 
°¨t
, * 
buf
, 
Àngth
);

21 
öôFœsh
();

22 
öôSRAM
();

23 
öôExtMem
();

	@hw-block/hwAccelerometer.c

1 
	~<avr/io.h
>

2 
	~<avr/öãºu±.h
>

3 
	~"../hw-≠i/hwAc˚Àromëî.h
"

4 
	~"../sy°em/defs.h
"

5 
	~"../sy°em/ac˚Àromëî.h
"

6 
	~"../sy°em/h™dÀr.h
"

7 
	~"twi_ma°î_drivî.h
"

9 
	#ACCEL_I2C_ADDR
 0x4C

10 
	#CPU_SPEED
 32000000

	)

11 
	#BAUDRATE
 100000

	)

12 
	#TWI_BAUDSETTING
 
	`TWI_BAUD
(
CPU_SPEED
, 
BAUDRATE
)

	)

14 
TWI_Ma°î_t
 
	gtwiMa°î
;

15 
Ac˚lD©a
 
_acc
;

17 
	$√wHWAc˚lD©a
()

19  (
twiMa°î
.
ªsu…
 =
TWIM_RESULT_OK
 &&ÅwiMa°î.
°©us
 =
TWIM_STATUS_READY
);

20 
	}
}

23 
	$upd©eHWAc˚l
()

25 if(
twiMa°î
.
ªsu…
 =
TWIM_RESULT_OK
 &&ÅwiMa°î.
°©us
 =
TWIM_STATUS_READY
)

27 
byã
 
ﬁd°©us
 = 
_acc
.
°©us
 & 
ACC_O_MASK
;

30 
_acc
.
x
 = (
AngÀ
)(
twiMa°î
.
ªadD©a
[0] << 2) >> 2;

31 
_acc
.
y
 = (
AngÀ
)(
twiMa°î
.
ªadD©a
[1] << 2) >> 2;

32 
_acc
.
z
 = (
AngÀ
)(
twiMa°î
.
ªadD©a
[2] << 2) >> 2;

33 
_acc
.
°©us
 = 
twiMa°î
.
ªadD©a
[3];

35 
twiMa°î
.
ªsu…
 = 
TWIM_RESULT_UNKNOWN
;

38 if(!
	`åiggîH™dÀr
(
EVENT_ACCEL_CHANGE
))

40 if(
_acc
.
°©us
 & 
ACC_TAP
)

42 
	`åiggîH™dÀr
(
EVENT_ACCEL_TAP
);

44 if(
_acc
.
°©us
 & 
ACC_SHAKE
)

46 
	`åiggîH™dÀr
(
EVENT_ACCEL_SHAKE
);

48 if(
ﬁd°©us
 !(
_acc
.
°©us
 & 
ACC_O_MASK
))

50 
	`åiggîH™dÀr
(
EVENT_ACCEL_TAP
);

54 
	}
}

59 
	$öôHWAc˚l
()

62 
	`TWI_Ma°îInô
(&
twiMa°î
,

63 &
TWIE
,

64 
TWI_MASTER_INTLVL_LO_gc
,

65 
TWI_BAUDSETTING
);

68 
byã
 
buf
[2];

71 
buf
[0] = 0x07;

72 
buf
[1] = 0x18;

73 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

77 
buf
[0] = 0x05;

78 
buf
[1] = 0x00;

79 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

83 
buf
[0] = 0x06;

84 
buf
[1] = 0x07;

85 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

89 
buf
[0] = 0x08;

90 
buf
[1] = 0xE0;

91 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

95 
buf
[0] = 0x09;

96 
buf
[1] = 0x10;

97 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

101 
buf
[0] = 0x0A;

102 
buf
[1] = 0x10;

103 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

107 
buf
[0] = 0x07;

108 
buf
[1] = 0x19;

109 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

113 
PORTB
.
DIRCLR
 = 
PIN0_bm
;

114 
PORTB
.
PIN0CTRL
 = 
PORT_OPC_PULLUP_gc
 | 
PORT_ISC_FALLING_gc
;

115 
PORTB
.
INT0MASK
 = 
PIN0_bm
;

116 
PORTB
.
INTCTRL
 = 
PORT_INT0LVL_LO_gc
;

117 
	}
}

120 
	$ISR
(
PORTB_INT0_ve˘
)

123 if(
twiMa°î
.
°©us
 =
TWIM_STATUS_READY
)

125 
byã
 
buf
 = 0x00;

126 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, &
buf
, 1, 4);

129 
	}
}

132 
	$ISR
(
TWIE_TWIM_ve˘
)

135 
	`TWI_Ma°îI¡îru±H™dÀr
(&
twiMa°î
);

136 
	}
}

139 
	$£tAc˚lRegi°î
(
byã
 
⁄e
, byã 
two
)

141 
byã
 
buf
[2];

143 
buf
[0] = 
⁄e
;

144 
buf
[1] = 
two
;

146 
	`TWI_Ma°îWrôeRód
(&
twiMa°î
, 
ACCEL_I2C_ADDR
, 
buf
, 2, 0);

148 
	}
}

	@hw-block/hwBlockTick.c

1 
	~<avr/io.h
>

2 
	~<avr/öãºu±.h
>

3 
	~"../sy°em/defs.h
"

4 
	~"../sy°em/block.h
"

5 
	~<avr/wdt.h
>

6 
	~"../hw-≠i/hwBlockTick.h
"

8 
blockTickRu¬ög
;

10 
	$sˇryBlockTickHack
()

12 
TCF0
.
CTRLA
 = 
TC_CLKSEL_DIV1_gc
;

14 
TCF0
.
PER
 = 16000;

15 
TCF0
.
INTCTRLA
 = 
TC_OVFINTLVL_MED_gc
;

16 
	}
}

19 
	$öôBlockTick
()

22 
blockTickRu¬ög
=0;

24 
	`sˇryBlockTickHack
();

27 
PMIC
.
CTRL
 |
PMIC_HILVLEN_bm
 | 
PMIC_MEDLVLEN_bm
 | 
PMIC_LOLVLEN_bm
;

28 
	`£i
();

30 
	}
}

34 
	$ISR
(
TCF0_OVF_ve˘
)

36 i‡(!
blockTickRu¬ög
)

38 
	`wdt_ª£t
();

39 
	`blockTick
();

41 
	}
}

	@hw-block/hwBoot.c

1 
	~<avr/io.h
>

2 
	~"../hw-≠i/hwBoŸ.h
"

4 
	$jumpToHWBoŸSe˘i⁄
(){

5 
uöt8_t
 
ãmp
 = 
RST
.
CTRL
 | 
RST_SWRST_bm
;

6 
CCP
 = 
CCP_IOREG_gc
;

7 
RST
.
CTRL
 = 
ãmp
;

8 
	}
}

	@hw-block/hwDataLink.c

1 #i‚de‡
_HW_DATALINK_C_


2 
	#_HW_DATALINK_C_


	)

4 
	~"../hw-≠i/hwD©aLök.h
"

5 
	~"../hw-≠i/hwSîül.h
"

6 
	~"../sy°em/í£mbÀ.h
"

7 
	~"../sy°em/£rül.h
"

9 
	#CRC_POLY
 0xA6

	)

12 
byã
 
	gwasEsˇ≥St‹e
[
NUM_PORTS
];

14 
Re˚ivePackëQueue
 
globÆRq
;

15 
P‹t
 
p‹t
[
NUM_PORTS
];

18 
byã
 
	$¸cCÆc
(
byã
 
cuºCrc
, byã 
√wVÆ
)

20 
byã
 
¸c
 = 
cuºCrc
;

21 
i
;

23 
¸c
 ^
√wVÆ
;

24 
i
=0; i<8; i++)

26 i‡(0x80 & 
¸c
) {

27 
¸c
 = (¸¯<< 1Ë^ 
CRC_POLY
;

30 
¸c
 = crc << 1;

33  
¸c
;

34 
	}
}

40 
	$ackH™dÀr
(
PRef
 
p
)

42 
byã
 
cuºP¨ôy
 = 
	`£ndP¨ôy
(
p‹t
[
p
].
sq
);

45 if–!(
	`gŸOddAck
(
p‹t
[
p
].
rq
Ë^ 
	`gŸEvíAck
(port[p].rq)) )

47 
	`˛órRe˚ivedAcks
–
p‹t
[
p
].
rq
 );

50 
byã
 
ªcdP¨ôy
 = 
	`gŸOddAck
(
p‹t
[
p
].
rq
);

51 
	`˛órRe˚ivedAcks
–
p‹t
[
p
].
rq
 );

54 if(
cuºP¨ôy
 =
ªcdP¨ôy
)

57 
	`ªmoveFromSq
(
p
, 
MSG_RESP_ACK
);

60 
p‹t
[
p
].
sq
.
ªåy
 = 
NUM_RETRIES
;

61 
	`ÊùP¨ôy
(
p‹t
[
p
].
sq
);

62 
p‹t
[
p
].
sq
.
Êags
 |
CLEAR_TO_SEND
;

65 
	`dîegi°îTimeout
(&(
p‹t
[
p
].
sq
.
qtout
.
tout
));

68 
	}
}

71 
	$addToGlobÆRq
(
Chunk
* 
c
)

74 if–
c
 =
NULL
 )

80 
c
->
√xt
 = 
NULL
;

83 if–
globÆRq
.
hód
 =
NULL
 )

85 
globÆRq
.
hód
 = 
c
;

89 
globÆRq
.
èû
->
√xt
 = 
c
;

93 
globÆRq
.
èû
 = 
c
;

94 
globÆRq
.
Êags
 = 
PACKET_READY
;

95 
	}
}

98 
byã
 
	$isS≥cül
(
byã
 
vÆ
)

100 if–((
vÆ
 & 
ACK_MASK
Ë=
ACK
 ) || ((vÆ & ACK_MASKË=
NACK
 ) ||

101 ((
vÆ
 & 
FD_MASK
Ë=
FD
 ) || (vÆ =
ESCAPE
 ) )

107 
	}
}

110 
	$£ndToBuf„r
(
PRef
 
p
, 
Chunk
* 
c
, 
byã
 
∑rôy
)

112 
byã
 
checksum
 = 0;

113 
byã
 
vÆ
;

114 
byã
 
i
;

115 
byã
 
dñim
;

117 if(
c
 =
NULL
)

123 
dñim
 = (
FD
 | 
∑rôy
);

126 
i
=0; i<
POINTER_SIZE
; i++)

128 
vÆ
 = 
c
->
h™dÀr
[
i
];

129 
checksum
 = 
	`¸cCÆc
(checksum, 
vÆ
);

132 if–
	`isS≥cül
(
vÆ
) )

134 
	`push
(
ESCAPE
, &(
p‹t
[
p
].
tx
));

135 
	`push
(
vÆ
^
ESCAPE_CHAR
, &(
p‹t
[
p
].
tx
));

140 
	`push
(
vÆ
, &(
p‹t
[
p
].
tx
));

145 
i
=0; i<
DATA_SIZE
; i++)

147 
vÆ
 = 
c
->
d©a
[
i
];

148 
checksum
 = 
	`¸cCÆc
(checksum, 
vÆ
);

151 if–
	`isS≥cül
(
vÆ
) )

153 
	`push
(
ESCAPE
, &(
p‹t
[
p
].
tx
));

155 
	`push
(
vÆ
^
ESCAPE_CHAR
, &(
p‹t
[
p
].
tx
));

160 
	`push
(
vÆ
, &(
p‹t
[
p
].
tx
));

166 if–
	`isS≥cül
(
vÆ
) )

168 
	`push
(
ESCAPE
, &(
p‹t
[
p
].
tx
));

169 
	`push
(
checksum
^
ESCAPE_CHAR
, &(
p‹t
[
p
].
tx
));

174 
	`push
(
checksum
, &(
p‹t
[
p
].
tx
));

178 
	`pPutCh¨
(
dñim
, 
p‹t
[
p
].
≤um
);

179 
	}
}

184 
	$¥o˚ssBuf„r
(
PRef
 
p
)

186 
byã
 
cuºByã
;

187 
Chunk
* 
cuºChunk
 = 
NULL
;

188 
byã
 
wasEsˇ≥
 = 
wasEsˇ≥St‹e
[
p
];

192 if–
	`isEm±y
(&(
p‹t
[
p
].
rx
)) )

198 if–(
p‹t
[
p
].
rq
.
cuº
 !
NULL
Ë&& 
	`chunkFûlög
(port[p].rq.curr) )

200 
cuºChunk
 = 
p‹t
[
p
].
rq
.
cuº
;

204 
p‹t
[
p
].
rq
.
ödex
 = 0;

205 
p‹t
[
p
].
rq
.
checksum
 = 0;

206 
wasEsˇ≥
 = 0;

209  !
	`isEm±y
(&(
p‹t
[
p
].
rx
)) )

211 
cuºByã
 = (
byã
)
	`p›
(&(
p‹t
[
p
].
rx
));

214 if–(
cuºByã
 & 
ACK_MASK
Ë=
ACK
 )

217 
p‹t
[
p
].
rq
.
Êags
 |(1 << (
cuºByã
 & 0x01));

219 
	`ackH™dÀr
(
p
);

233 if–(
cuºByã
 & 
FD_MASK
Ë=
FD
 )

236 
byã
 
∑rôy
 = 
	`£tP¨ôyFromByã
(
cuºByã
);

239 
p‹t
[
p
].
rq
.
ödex
 = 0;

240 
p‹t
[
p
].
rq
.
checksum
 = 0;

241 
wasEsˇ≥
 = 0;

244 if(
p‹t
[
p
].
rq
.
cuº
 !
NULL
)

246 
cuºChunk
 = 
p‹t
[
p
].
rq
.
cuº
;

251 
cuºChunk
 = 
	`gëSy°emRXChunk
();

254 if–
cuºChunk
 =
NULL
 )

261 
p‹t
[
p
].
rq
.
cuº
 = 
cuºChunk
;

265 
cuºChunk
->
°©us
 = 
CHUNK_USED
 | 
CHUNK_FILLING
 | 
∑rôy
 | 
p‹t
[
p
].
≤um
;

271 if(
cuºChunk
 =
NULL
)

277 if–
cuºByã
 =
ESCAPE
 )

279 
wasEsˇ≥
 = 1;

285 if–
wasEsˇ≥
 )

287 
cuºByã
 ^
ESCAPE_CHAR
;

288 
wasEsˇ≥
 = 0;

292 if–
p‹t
[
p
].
rq
.
ödex
 >(
DATA_SIZE
 + 
POINTER_SIZE
) )

295 if–
cuºByã
 =
p‹t
[
p
].
rq
.
checksum
 )

297 
cuºChunk
->
°©us
 &~
CHUNK_FILLING
;

298 
p‹t
[
p
].
rq
.
Êags
 |
CHUNK_READY
;

301 
byã
 
∑rôy
 = 
	`chunkP¨ôy
(
cuºChunk
);

302 
byã
 
œ°
 = 
	`∑rôyLa°Chunk
(
p‹t
[
p
].
rq
);

305 if(
∑rôy
 !
œ°
) {

310 
	`addToGlobÆRq
(
cuºChunk
);

313 
	`ÊùP¨ôyLa°
(
p‹t
[
p
].
rq
);

318 
	`‰ìChunk
(
cuºChunk
);

322 
p‹t
[
p
].
rq
.
cuº
 = 
NULL
;

326 
p‹t
[
p
].
rq
.
ödex
 = 0;

327 
p‹t
[
p
].
rq
.
checksum
 = 0;

328 
wasEsˇ≥
 = 0;

329 
cuºChunk
 = 
NULL
;

336 if–
p‹t
[
p
].
rq
.
ödex
 < 
POINTER_SIZE
 )

338 
cuºChunk
->
h™dÀr
[
p‹t
[
p
].
rq
.
ödex
] = 
cuºByã
;

343 
cuºChunk
->
d©a
[
p‹t
[
p
].
rq
.
ödex
-
POINTER_SIZE
] = 
cuºByã
;

346 
p‹t
[
p
].
rq
.
checksum
 = 
	`¸cCÆc
’‹t[p].rq.checksum, 
cuºByã
);

347 
p‹t
[
p
].
rq
.
ödex
++;

351 
wasEsˇ≥St‹e
[
p
] = 
wasEsˇ≥
;

352 
	}
}

355 
Chunk
* 
	$√xtPackë
()

357 
Chunk
* 
c
 = 
NULL
;

360 if–
globÆRq
.
hód
 =
NULL
 )

362 
globÆRq
.
èû
 = 
NULL
;

363 
globÆRq
.
Êags
 &~
PACKET_READY
;

364  
NULL
;

368 
c
 = 
globÆRq
.
hód
;

370 
globÆRq
.
hód
 = 
c
->
√xt
;

371 if–
globÆRq
.
hód
 =
NULL
 )

373 
globÆRq
.
Êags
 &~
PACKET_READY
;

374 
globÆRq
.
èû
 = 
NULL
;

378 
c
->
√xt
 = 
NULL
;

379  
c
;

380 
	}
}

383 
	$£ndOnSîül
(
PRef
 
p
)

386 if–
	`shouldSídOddAck
(
p‹t
[
p
].
sq
) )

388 if–
	`isEm±y
(&(
p‹t
[
p
].
tx
)) ) {

389 
	`pPutCh¨
(
ACK
 | 
ODD
, 
p‹t
[
p
].
≤um
);

392 
	`push
(
ACK
 | 
ODD
, &(
p‹t
[
p
].
tx
));

395 if–
	`shouldSídEvíAck
(
p‹t
[
p
].
sq
) )

397 if–
	`isEm±y
(&(
p‹t
[
p
].
tx
)) ) {

398 
	`pPutCh¨
(
ACK
 | 
EVEN
, 
p‹t
[
p
].
≤um
);

401 
	`push
(
ACK
 | 
EVEN
, &(
p‹t
[
p
].
tx
));

404 
	`˛órSídAcks
(
p‹t
[
p
].
sq
);

407 if–
	`chunkRódy
(
p‹t
[
p
].
sq
) )

409 if–
	`˛órToSíd
(
p‹t
[
p
].
sq
) )

412 if–(
p‹t
[
p
].
sq
.
ªåy
 <0Ë|| (p‹t[p].sq.ªåy > 
NUM_RETRIES
))

415 
	`dîegi°îTimeout
(&(
p‹t
[
p
].
sq
.
qtout
.
tout
));

418 
	`ÊushSídQueue
(
p
);

421 
p‹t
[
p
].
sq
.
ªåy
 = 
NUM_RETRIES
;

422 
p‹t
[
p
].
sq
.
Êags
 |
CLEAR_TO_SEND
;

423 
	`ÊùP¨ôy
(
p‹t
[
p
].
sq
);

427 
	`ª°¨tSˇn
(
p
);

431 
p‹t
[
p
].
sq
.
ªåy
--;

433 
	`£ndToBuf„r
(
p
, 
p‹t
[p].
sq
.
hód
, 
	`£ndP¨ôy
(port[p].sq) );

434 
p‹t
[
p
].
sq
.
Êags
 &~
CLEAR_TO_SEND
;

437 
p‹t
[
p
].
sq
.
qtout
.
tout
.
ˇŒtime
 = 
	`gëTime
(Ë+ 
DEFAULT_TIMEOUT
;

438 
	`ªgi°îTimeout
(&(
p‹t
[
p
].
sq
.
qtout
.
tout
));

441 
	}
}

444 
	$öôHWD©aLök
(){

446 
	}
}

	@hw-block/hwDebug.c

1 
	~"../hw-≠i/hwDebug.h
"

2 
	~<avr/io.h
>

4 #ifde‡
DEBUG


6 #i‡
DEBUG
 == 5

8 
	#DEBUGPORT
 5

	)

9 
	#DEBUGUART
 
USARTD1


	)

11 #ñi‡
DEBUG
 == 1

13 
	#DEBUGPORT
 1

	)

14 
	#DEBUGUART
 
USARTC1


	)

16 #ñi‡
DEBUG
 == 4

18 
	#DEBUGPORT
 4

	)

19 
	#DEBUGUART
 
USARTE0


	)

21 #ñi‡
DEBUG
 == 2

23 
	#DEBUGPORT
 2

	)

24 
	#DEBUGUART
 
USARTF0


	)

26 #ñi‡
DEBUG
 == 3

28 
	#DEBUGPORT
 3

	)

29 
	#DEBUGUART
 
USARTC0


	)

31 #ñi‡
DEBUG
 == 0

33 
	#DEBUGPORT
 0

	)

34 
	#DEBUGUART
 
USARTD0


	)

37 #i‚de‡
DEBUGPORT


38 #îr‹ 
InvÆid
 
DEBUG
 
›ti⁄
 
cho£n
 - 
u£
 
a
 
Á˚
 .

43 
FILE
 
	gdebug
;

45 
	$öôDebugU¨t
(
USART_t
 * 
u¨t
)

47 
u¨t
->
CTRLA
 = 0;

48 
u¨t
->
CTRLB
 = 
USART_RXEN_bm
 | 
USART_TXEN_bm
;

49 
u¨t
->
CTRLC
 = 
USART_CHSIZE_8BIT_gc
;

50 
u¨t
->
BAUDCTRLA
 = 103;

51 
u¨t
->
BAUDCTRLB
 = 0;

52 
	}
}

55 
	$debugPutCh¨
(
c
, 
FILE
 * 
fb
)

57 #ifde‡
DEBUG


58 !(
DEBUGUART
.
STATUS
 & 
USART_DREIF_bm
));

59 
DEBUGUART
.
DATA
 = 
c
;

62 
	}
}

65 
	$debugGëCh¨
(
FILE
 * 
fb
)

67 #ifde‡
DEBUG


71 if((
DEBUGUART
.
STATUS
 & 
USART_RXCIF_bm
))

75  
DEBUGUART
.
DATA
;

84 
	}
}

87 
	$öôHWDebug
()

89 #ifde‡
DEBUG


90 
	`öôDebugU¨t
(&
DEBUGUART
);

92 
	`fdev_£tup_°ªam
(&
debug
, 
debugPutCh¨
, 
debugGëCh¨
, 
_FDEV_SETUP_RW
);

94 
°dout
 = &
debug
;

96 
	}
}

	@hw-block/hwLED.c

1 
	~<avr/io.h
>

3 
	~"../sy°em/defs.h
"

4 
	~"../sy°em/Àd.h
"

6 
	~"../hw-≠i/hwLED.h
"

8 
byã
 
cuºítRGB
[3];

10 
	$£tHWLED
(
byã
 
r
, byã 
g
, byã 
b
, 
I¡ísôy
 
i
)

12 
uöt16_t
 
º
, 
gg
, 
bb
;

18 
cuºítRGB
[0] = 
r
;

19 
cuºítRGB
[1] = 
g
;

20 
cuºítRGB
[2] = 
b
;

22 
º
 = (
uöt16_t
)
i
*(uöt16_t)
r
;

23 
gg
 = (
uöt16_t
)
i
*(uöt16_t)
g
;

24 
bb
 = (
uöt16_t
)
i
*(uöt16_t)
b
;

26 
º
 = 0xFFFF -Ñr;

27 
gg
 = 0xFFFF - gg;

28 
bb
 = 0xFFFF - bb;

30 
TCC0
.
CCABUF
 = 
º
;

31 
TCC0
.
CCBBUF
 = 
º
;

33 
TCD0
.
CCABUF
 = 
gg
;

34 
TCD0
.
CCBBUF
 = 
bb
;

36 
TCC1
.
CCABUF
 = 
gg
;

37 
TCC1
.
CCBBUF
 = 
bb
;

38 
	}
}

41 
	$öôHWLED
()

44 
TCC0
.
CTRLA
 |
TC_CLKSEL_DIV4_gc
;

45 
TCC0
.
CTRLB
 = 
TC0_CCAEN_bm
 | 
TC0_CCBEN_bm
 | 
TC_WGMODE_SS_gc
;

46 
TCC0
.
PERBUF
 = 0xFFFF;

47 
TCC0
.
CCABUF
 = 0;

48 
TCC0
.
CCBBUF
 = 0;

49 
PORTC
.
DIRSET
 = 
PIN0_bm
 | 
PIN1_bm
;

51 
TCC1
.
CTRLA
 = 
TC_CLKSEL_DIV4_gc
;

52 
TCC1
.
CTRLB
 = 
TC1_CCAEN_bm
 | 
TC1_CCBEN_bm
 | 
TC_WGMODE_SS_gc
;

53 
TCC1
.
PERBUF
 = 0xFFFF;

54 
TCC1
.
CCABUF
 = 0;

55 
TCC1
.
CCBBUF
 = 0;

56 
PORTC
.
DIRSET
 = 
PIN4_bm
 | 
PIN5_bm
;

58 
TCD0
.
CTRLA
 = 
TC_CLKSEL_DIV4_gc
;

59 
TCD0
.
CTRLB
 = 
TC0_CCAEN_bm
 | 
TC0_CCBEN_bm
 | 
TC_WGMODE_SS_gc
;

60 
TCD0
.
PERBUF
 = 0xFFFF;

61 
TCD0
.
CCABUF
 = 0;

62 
TCD0
.
CCBBUF
 = 0;

63 
PORTD
.
DIRSET
 = 
PIN0_bm
 | 
PIN1_bm
;

64 
	}
}

	@hw-block/hwMemory.c

1 
	~<°dio.h
>

2 
	~"../sy°em/h™dÀr.h
"

3 
	~"../hw-≠i/hwMem‹y.h
"

6 #i‚de‡
HOST


7 
	~"ì¥om_drivî.h
"

15 
	$°‹e
(* 
nv_addr
, * 
d©a
, 
Àn
)

17 
uöt8_t
 
∑πül_off£t
, 
∑πül_Àngth
;

19 
Àn
 != 0)

22 
∑πül_off£t
 = (
uöt16_t
)
nv_addr
 & (
EEPROM_PAGESIZE
 - 1);

24 
∑πül_Àngth
 = 
EEPROM_PAGESIZE
 - 
∑πül_off£t
;

26 if(
∑πül_Àngth
 > 
Àn
)

28 
∑πül_Àngth
 = 
Àn
;

31 
	`EEPROM_LﬂdP¨tülPage
(
d©a
, 
∑πül_off£t
, 
∑πül_Àngth
);

32 
	`EEPROM_AtomicWrôePage
((
uöt16_t
)
nv_addr
 / (
EEPROM_PAGESIZE
));

34 
Àn
 -
∑πül_Àngth
;

35 
nv_addr
 +
∑πül_Àngth
;

36 
d©a
 +
∑πül_Àngth
;

39 
	}
}

42 
	$ª°‹e
(* 
vaddr
, * 
vnv_addr
, 
Àn
)

44 
byã
 *
addr
=(byã *)
vaddr
;

45 
byã
 *
nv_addr
=(byã *Ë
vnv_addr
;

46 
Àn
 != 0)

48 *
addr
 = 
	`EEPROM_RódByã
(((
uöt16_t
)(
nv_addr
Ë/ (
EEPROM_PAGESIZE
)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));

49 
nv_addr
++;

50 
addr
++;

51 
Àn
--;

53 
	}
}

55 
	#ID_PAGE_ADDR
 0x00

	)

56 
	#ID_BYTE_ADDR
 0x00

	)

61 
uöt16_t
 
	$gëGUID
(){

64  (((
uöt16_t
)
	`EEPROM_RódByã
(
ID_PAGE_ADDR
, 
ID_BYTE_ADDR
))<<8) |

65 ((
uöt16_t
)
	`EEPROM_RódByã
(
ID_PAGE_ADDR
, 
ID_BYTE_ADDR
+1));

66 
	}
}

	@hw-block/hwSerial.c

1 
	~<avr/io.h
>

2 
	~<avr/öãºu±.h
>

3 
	~"../sy°em/cúc_buf„r.h
"

4 
	~"../hw-≠i/hwSîül.h
"

5 
	~"../sy°em/£rül.h
"

9 
	#HARDWARE_UART
 0

	)

10 
	#SOFTWARE_UART
 1

	)

14 
USART_t
* 
	mhu¨t
;

16 } 
	tU¨t
;

18 
	s_u¨t


20 
U¨t
 
	mu¨t
;

21 
byã
 
	m±y≥
;

22 } 
	tHWP‹t
;

24 
HWP‹t
 
	ghwP‹t
[
NUM_PORTS
];

25 
P‹t
 
p‹t
[
NUM_PORTS
];

27 
öôHWU¨t
(
USART_t
 * 
u¨t
);

30 
	$u_putch¨
(
c
, 
USART_t
 * 
u¨t
)

32 !(
u¨t
->
STATUS
 & 
USART_DREIF_bm
));

35 
u¨t
->
DATA
 = 
c
;

36 
	}
}

38 
	$u_gëch¨
(
USART_t
 * 
u¨t
)

43 if((
u¨t
->
STATUS
 & 
USART_RXCIF_bm
))

47  
u¨t
->
DATA
;

53 
	}
}

55 
	$pPutCh¨
(
c
, 
PRef
 
p
)

57 if(
p
 >0 &&Ö < 
NUM_PORTS
)

59 if(
hwP‹t
[
p
].
±y≥
 =
HARDWARE_UART
)

61 
	`u_putch¨
(
c
, 
hwP‹t
[
p
].
u¨t
.
hu¨t
);

68 
	}
}

70 
	$pGëCh¨
(
PRef
 
p
)

72 if(
p
 >0 &&Ö < 
NUM_PORTS
)

74 if(
hwP‹t
[
p
].
±y≥
 =
HARDWARE_UART
)

76  
	`u_gëch¨
(
hwP‹t
[
p
].
u¨t
.
hu¨t
);

85 
	}
}

87 
	$öôülizeHWP‹t
(
HWP‹t
 *
p
, 
USART_t
 *
hu¨t
)

89 if(
hu¨t
 !
NULL
)

91 (
p
->
u¨t
).
hu¨t
 = huart;

92 
p
->
±y≥
 = 
HARDWARE_UART
;

94 
	`öôHWU¨t
(
hu¨t
);

96 
	}
}

98 
	$öôHWP‹ts
()

101 
PORTD
.
DIRSET
 = 
PIN7_bm
;

102 
	`öôülizeHWP‹t
(&(
hwP‹t
[
UP
]), &
USARTD1
);

105 
PORTC
.
DIRSET
 = 
PIN7_bm
;

106 
	`öôülizeHWP‹t
(&(
hwP‹t
[
NORTH
]), &
USARTC1
);

109 
PORTE
.
DIRSET
 = 
PIN3_bm
;

110 
	`öôülizeHWP‹t
(&(
hwP‹t
[
SOUTH
]), &
USARTE0
);

113 
PORTF
.
DIRSET
 = 
PIN3_bm
;

114 
	`öôülizeHWP‹t
(&(
hwP‹t
[
EAST
]), &
USARTF0
);

117 
PORTC
.
DIRSET
 = 
PIN3_bm
;

118 
	`öôülizeHWP‹t
(&(
hwP‹t
[
WEST
]), &
USARTC0
);

120 
PORTD
.
DIRSET
 = 
PIN3_bm
;

121 
	`öôülizeHWP‹t
(&(
hwP‹t
[
DOWN
]), &
USARTD0
);

122 
	}
}

124 
	$öôHWU¨t
(
USART_t
 * 
hu¨t
)

126 
hu¨t
->
CTRLB
 = 
USART_RXEN_bm
 | 
USART_TXEN_bm
;

127 
hu¨t
->
CTRLC
 = 
USART_CHSIZE_8BIT_gc
;

129 
hu¨t
->
CTRLA
 = 
USART_RXCINTLVL_HI_gc
 | 
USART_TXCINTLVL_HI_gc
;

130 
hu¨t
->
BAUDCTRLA
 = 51;

131 
hu¨t
->
BAUDCTRLB
 = 0;

132 
	}
}

135 
	$ISR
(
USARTD1_RXC_ve˘
)

137 
uöt8_t
 
c
;

139 
c
 = 
USARTD1
.
DATA
;

141 
	`push
(
c
, &(
p‹t
[
UP
].
rx
));

142 
	}
}

144 
	$ISR
(
USARTD1_TXC_ve˘
)

146 
öt16_t
 
c
;

148 
c
 = 
	`p›
(&(
p‹t
[
UP
].
tx
));

150 if(
c
 != -1)

152 
USARTD1
.
DATA
 = 
c
;

158 
	}
}

160 
	$ISR
(
USARTC1_RXC_ve˘
)

162 
uöt8_t
 
c
;

164 
c
 = 
USARTC1
.
DATA
;

166 
	`push
(
c
, &(
p‹t
[
NORTH
].
rx
));

167 
	}
}

168 
	$ISR
(
USARTC1_TXC_ve˘
)

170 
öt16_t
 
c
;

172 
c
 = 
	`p›
(&(
p‹t
[
NORTH
].
tx
));

174 if(
c
 != -1)

176 
USARTC1
.
DATA
 = 
c
;

178 
	}
}

180 
	$ISR
(
USARTF0_RXC_ve˘
)

182 
uöt8_t
 
c
;

184 
c
 = 
USARTF0
.
DATA
;

186 
	`push
(
c
, &(
p‹t
[
EAST
].
rx
));

187 
	}
}

188 
	$ISR
(
USARTF0_TXC_ve˘
)

190 
öt16_t
 
c
;

192 
c
 = 
	`p›
(&(
p‹t
[
EAST
].
tx
));

194 if(
c
 != -1)

196 
USARTF0
.
DATA
 = 
c
;

198 
	}
}

200 
	$ISR
(
USARTE0_RXC_ve˘
)

202 
uöt8_t
 
c
;

204 
c
 = 
USARTE0
.
DATA
;

206 
	`push
(
c
, &(
p‹t
[
SOUTH
].
rx
));

207 
	}
}

208 
	$ISR
(
USARTE0_TXC_ve˘
)

210 
öt16_t
 
c
;

212 
c
 = 
	`p›
(&(
p‹t
[
SOUTH
].
tx
));

214 if(
c
 != -1)

216 
USARTE0
.
DATA
 = 
c
;

218 
	}
}

220 
	$ISR
(
USARTC0_RXC_ve˘
)

222 
uöt8_t
 
c
;

224 
c
 = 
USARTC0
.
DATA
;

226 
	`push
(
c
, &(
p‹t
[
WEST
].
rx
));

227 
	}
}

228 
	$ISR
(
USARTC0_TXC_ve˘
)

230 
öt16_t
 
c
;

232 
c
 = 
	`p›
(&(
p‹t
[
WEST
].
tx
));

234 if(
c
 != -1)

236 
USARTC0
.
DATA
 = 
c
;

238 
	}
}

240 
	$ISR
(
USARTD0_RXC_ve˘
)

242 
uöt8_t
 
c
;

244 
c
 = 
USARTD0
.
DATA
;

246 
	`push
(
c
, &(
p‹t
[
DOWN
].
rx
));

247 
	}
}

248 
	$ISR
(
USARTD0_TXC_ve˘
)

250 
öt16_t
 
c
;

252 
c
 = 
	`p›
(&(
p‹t
[
DOWN
].
tx
));

254 if(
c
 != -1)

256 
USARTD0
.
DATA
 = 
c
;

258 
	}
}

	@hw-block/hwTime.c

1 
	~<utû/©omic.h
>

2 
	~<avr/io.h
>

3 
	~<avr/öãºu±.h
>

4 
	~"../hw-≠i/hwTime.h
"

5 
	~"../sy°em/h¨dw¨ëime.h
"

7 
uöt16_t
 
	gtimeHi
;

9 
Time
 
	$gëHWTime
()

11 
Time
 
tmp
;

13 
	`ATOMIC_BLOCK
(
ATOMIC_FORCEON
)

15 
tmp
 = (((
Time
)
timeHi
Ë<< 16Ë| 
RTC
.
CNT
;

18  
tmp
;

19 
	}
}

21 
	$öôClock
()

23 
OSC
.
CTRL
 |
	`_BV
(
OSC_RC32MEN_bp
);

24 !(
OSC
.
STATUS
 & 
OSC_RC32MRDY_bm
));

26 
CCP
=0xD8;

27 
CLK
.
CTRL
 = 
CLK_SCLKSEL_RC32M_gc
;

28 
	}
}

30 
	$öôRTC
()

32 
RTC
.
CTRL
 = 
RTC_PRESCALER_DIV1_gc
;

33 
CLK
.
RTCCTRL
 = 
CLK_RTCSRC_ULP_gc
 | 
CLK_RTCEN_bm
;

35 
RTC
.
INTCTRL
 = 
RTC_OVFINTLVL_HI_gc
;

36 
	}
}

38 
	$öôHWTime
()

40 
	`öôClock
();

41 
	`öôRTC
();

42 
	}
}

44 
	$ISR
(
RTC_OVF_ve˘
)

46 
timeHi
++;

47 
	}
}

	@hw-block/soft_uart2.c

1 
	~"so·_u¨t2.h
"

3 
	~"../sy°em/h™dÀr.h
"

5 
so·_u¨t_t
 
	gso·_u¨t
[
NUM_SOFTWARE_UARTS
];

98 
	$timî_£t
–
uöt32_t
 
bps
, 
TC0_t
 * 
tx_timî
, 
TC1_t
 * 
rx_timî
)

100 
uöt16_t
 
≥r
;

102 
≥r
 = ((
uöt32_t
)
F_CPU
 / (
bps
));

104 
tx_timî
->
INTCTRLA
 = 
TC_OVFINTLVL_HI_gc
;

105 
tx_timî
->
PER
 = 
≥r
;

106 
tx_timî
->
CTRLA
 = 
TC_CLKSEL_DIV1_gc
;

110 
≥r
 = ((
uöt32_t
)
F_CPU
 / (
bps
*3));

113 
rx_timî
->
INTCTRLA
 = 
TC_OVFINTLVL_HI_gc
;

114 
rx_timî
->
PER
 = 
≥r
;

115 
rx_timî
->
CTRLA
 = 
TC_CLKSEL_DIV1_gc
;

116 
	}
}

118 
	$c⁄figuª_so·_u¨t
(
so·_u¨t_t
 * 
u¨t
, 
CúcBuf
 * 
˘x
, CúcBu‡* 
¸x
)

120 
u¨t
->
rx
 = 
¸x
;

121 
u¨t
->
tx
 = 
˘x
;

122 
u¨t
->
öã∫Æ_rx_buf„r
 = 0;

123 
u¨t
->
öã∫Æ_tx_buf„r
 = 0;

124 
	}
}

126 
	$öô_so·_u¨t
()

128 
PORTD
.
OUTSET
 = 
PIN5_bm
 | 
PIN6_bm
;

129 
PORTD
.
DIRSET
 = 
PIN5_bm
 | 
PIN6_bm
;

130 
PORTD
.
DIRCLR
 = 
PIN4_bm
 | 
PIN7_bm
;

132 
PORTD
.
PIN4CTRL
 |
PORT_OPC_PULLUP_gc
;

133 
PORTD
.
PIN7CTRL
 |
PORT_OPC_PULLUP_gc
;

135 
so·_u¨t
[1].
rx_°©e
 = 
SU_RX_IDLE
;

137 
	`timî_£t
–
BAUD_RATE
, &
TCE0
, &
TCD1
);

138 
	}
}

140 
	$su_gëch¨
(
so·_u¨t_t
 * 
u¨t
)

142 
ch
;

144 if(
	`isEm±y
((
u¨t
->
rx
)))

150 
ch
 = 
	`p›
((
u¨t
->
rx
));

151 –
ch
 );

153 
	}
}

155 
	$£t_tx_ch¨
(
ch
, 
so·_u¨t_t
 * 
u¨t
)

157 if(
ch
 != -1)

159 
u¨t
->
öã∫Æ_tx_buf„r
 = (
ch
 << 1) | 0x200;

161 
	}
}

163 
	$su_putch¨
–
ch
, 
so·_u¨t_t
 * 
u¨t
)

165  
u¨t
->
öã∫Æ_tx_buf„r
 != 0 );

167 
	`£t_tx_ch¨
(
ch
, 
u¨t
);

176 
	}
}

178 
	$kbhô
–
so·_u¨t_t
 * 
u¨t
 )

180 –!
	`isEm±y
(
u¨t
->
rx
));

181 
	}
}

184 
	$ISR
(
TCD1_OVF_ve˘
)

186 if(!
so·_u¨t
[0].
ßm∂e_time
)

188 if(
so·_u¨t
[0].
rx_°©e
 =
SU_RX_IDLE
)

190 if(!(
PORTD
.
IN
 & 
PIN4_bm
))

192 
so·_u¨t
[0].
rx_°©e
 = 
SU_RX_BYTE
;

193 
so·_u¨t
[0].
rx_mask
 = 0x01;

194 
so·_u¨t
[0].
ßm∂e_time
 = 3;

197 i‡(
so·_u¨t
[0].
rx_°©e
 =
SU_RX_BYTE
)

199 if(
PORTD
.
IN
 & 
PIN4_bm
)

201 
so·_u¨t
[0].
öã∫Æ_rx_buf„r
 |so·_u¨t[0].
rx_mask
;

204 
so·_u¨t
[0].
rx_mask
 <<= 1;

206 if(!
so·_u¨t
[0].
rx_mask
)

208 
so·_u¨t
[0].
rx_°©e
 = 
SU_RX_STOP
;

211 
so·_u¨t
[0].
ßm∂e_time
 = 2;

213 i‡(
so·_u¨t
[0].
rx_°©e
 =
SU_RX_STOP
)

215 if(
PORTD
.
IN
 & 
PIN4_bm
)

217 
	`push
(
so·_u¨t
[0].
öã∫Æ_rx_buf„r
, so·_u¨t[0].
rx
);

218 
so·_u¨t
[0].
öã∫Æ_rx_buf„r
 = 0;

221 
so·_u¨t
[0].
rx_°©e
 = 
SU_RX_IDLE
;

226 
so·_u¨t
[0].
ßm∂e_time
--;

229 if(!
so·_u¨t
[1].
ßm∂e_time
)

231 if(
so·_u¨t
[1].
rx_°©e
 =
SU_RX_IDLE
)

233 if(!(
PORTD
.
IN
 & 
PIN7_bm
))

235 
so·_u¨t
[1].
rx_°©e
 = 
SU_RX_BYTE
;

236 
so·_u¨t
[1].
rx_mask
 = 0x01;

237 
so·_u¨t
[1].
ßm∂e_time
 = 3;

240 i‡(
so·_u¨t
[1].
rx_°©e
 =
SU_RX_BYTE
)

242 if(
PORTD
.
IN
 & 
PIN7_bm
)

244 
so·_u¨t
[1].
öã∫Æ_rx_buf„r
 |so·_u¨t[1].
rx_mask
;

247 
so·_u¨t
[1].
rx_mask
 <<= 1;

249 if(!
so·_u¨t
[1].
rx_mask
)

251 
so·_u¨t
[1].
rx_°©e
 = 
SU_RX_STOP
;

254 
so·_u¨t
[1].
ßm∂e_time
 = 2;

256 i‡(
so·_u¨t
[1].
rx_°©e
 =
SU_RX_STOP
)

258 if(
PORTD
.
IN
 & 
PIN7_bm
)

260 
	`push
(
so·_u¨t
[1].
öã∫Æ_rx_buf„r
, so·_u¨t[1].
rx
);

261 
so·_u¨t
[1].
öã∫Æ_rx_buf„r
 = 0;

264 
so·_u¨t
[1].
rx_°©e
 = 
SU_RX_IDLE
;

269 
so·_u¨t
[1].
ßm∂e_time
--;

271 
	}
}

	@hw-block/soft_uart2.h

1 #i‚de‡
__SOFT_UART2_H__


2 
	#__SOFT_UART2_H__


	)

5 
	~<°dio.h
>

6 
	~<avr/io.h
>

7 
	~<avr/öãºu±.h
>

8 
	~<utû/dñay.h
>

9 
	~"../sy°em/cúc_buf„r.h
"

12 
	#BAUD_RATE
 38400

13 

	)

14 
	#NUM_SOFTWARE_UARTS
 2

	)

16 íum{
	mSU_RX_IDLE
, 
	mSU_RX_BYTE
, 
	mSU_RX_STOP
};

18 
	s_so·w¨e_u¨t


20 vﬁ©ûê
	möã∫Æ_rx_buf„r
;

21 vﬁ©ûê
uöt16_t
 
	möã∫Æ_tx_buf„r
;

23 
uöt8_t
 
	mrx_mask
;

24 
uöt8_t
 
	mrx_°©e
;

25 
uöt8_t
 
	mßm∂e_time
;

27 
CúcBuf
 * 
	mtx
;

28 
CúcBuf
 * 
	mrx
;

32 } 
	tso·_u¨t_t
;

34 
so·_u¨t_t
 
so·_u¨t
[
NUM_SOFTWARE_UARTS
];

36 
timî_£t
–
uöt32_t
 
bps
, 
TC0_t
 * 
tx_timî
, 
TC1_t
 * 
rx_timî
);

39 
c⁄figuª_so·_u¨t
(
so·_u¨t_t
 * 
u¨t
, 
CúcBuf
 * 
tx
, CúcBu‡* 
rx
);

40 
öô_so·_u¨t
();

42 
su_gëch¨
(
so·_u¨t_t
 *);

43 
su_putch¨
–, 
so·_u¨t_t
 *);

45 
kbhô
–
so·_u¨t_t
 *);

	@hw-block/system.c

1 
	~"sy°em/sy°em.h
"

3 
	#DEBUG
 3

	)

5 
	$maö
()

7  
	`blockProgøm
();

8 
	}
}

	@hw-block/twi_master_driver.c

69 
	~"twi_ma°î_drivî.h
"

83 
	$TWI_Ma°îInô
(
TWI_Ma°î_t
 *
twi
,

84 
TWI_t
 *
moduÀ
,

85 
TWI_MASTER_INTLVL_t
 
ötLevñ
,

86 
uöt8_t
 
baudR©eRegi°îSëtög
)

88 
twi
->
öãrÁ˚
 = 
moduÀ
;

89 
twi
->
öãrÁ˚
->
MASTER
.
CTRLA
 = 
ötLevñ
 |

90 
TWI_MASTER_RIEN_bm
 |

91 
TWI_MASTER_WIEN_bm
 |

92 
TWI_MASTER_ENABLE_bm
;

93 
twi
->
öãrÁ˚
->
MASTER
.
BAUD
 = 
baudR©eRegi°îSëtög
;

94 
twi
->
öãrÁ˚
->
MASTER
.
STATUS
 = 
TWI_MASTER_BUSSTATE_IDLE_gc
;

95 
	}
}

110 
TWI_MASTER_BUSSTATE_t
 
	$TWI_Ma°îSèã
(
TWI_Ma°î_t
 *
twi
)

112 
TWI_MASTER_BUSSTATE_t
 
twi_°©us
;

113 
twi_°©us
 = (
TWI_MASTER_BUSSTATE_t
Ë(
twi
->
öãrÁ˚
->
MASTER
.
STATUS
 &

114 
TWI_MASTER_BUSSTATE_gm
);

115  
twi_°©us
;

116 
	}
}

129 
boﬁ
 
	$TWI_Ma°îRódy
(
TWI_Ma°î_t
 *
twi
)

131 
boﬁ
 
twi_°©us
 = (
twi
->
°©us
 & 
TWIM_STATUS_READY
);

132  
twi_°©us
;

133 
	}
}

148 
boﬁ
 
	$TWI_Ma°îWrôe
(
TWI_Ma°î_t
 *
twi
,

149 
uöt8_t
 
addªss
,

150 
uöt8_t
 *
wrôeD©a
,

151 
uöt8_t
 
byãsToWrôe
)

153 
boﬁ
 
twi_°©us
 = 
	`TWI_Ma°îWrôeRód
(
twi
, 
addªss
, 
wrôeD©a
, 
byãsToWrôe
, 0);

154  
twi_°©us
;

155 
	}
}

169 
boﬁ
 
	$TWI_Ma°îRód
(
TWI_Ma°î_t
 *
twi
,

170 
uöt8_t
 
addªss
,

171 
uöt8_t
 
byãsToRód
)

173 
boﬁ
 
twi_°©us
 = 
	`TWI_Ma°îWrôeRód
(
twi
, 
addªss
, 0, 0, 
byãsToRód
);

174  
twi_°©us
;

175 
	}
}

193 
boﬁ
 
	$TWI_Ma°îWrôeRód
(
TWI_Ma°î_t
 *
twi
,

194 
uöt8_t
 
addªss
,

195 
uöt8_t
 *
wrôeD©a
,

196 
uöt8_t
 
byãsToWrôe
,

197 
uöt8_t
 
byãsToRód
)

200 i‡(
byãsToWrôe
 > 
TWIM_WRITE_BUFFER_SIZE
) {

201  
Ál£
;

203 i‡(
byãsToRód
 > 
TWIM_READ_BUFFER_SIZE
) {

204  
Ál£
;

208 i‡(
twi
->
°©us
 =
TWIM_STATUS_READY
) {

210 
twi
->
°©us
 = 
TWIM_STATUS_BUSY
;

211 
twi
->
ªsu…
 = 
TWIM_RESULT_UNKNOWN
;

213 
twi
->
addªss
 =áddress<<1;

216 
uöt8_t
 
buf„rIndex
=0; buf„rIndex < 
byãsToWrôe
; bufferIndex++) {

217 
twi
->
wrôeD©a
[
buf„rIndex
] = writeData[bufferIndex];

220 
twi
->
byãsToWrôe
 = bytesToWrite;

221 
twi
->
byãsToRód
 = bytesToRead;

222 
twi
->
byãsWrôãn
 = 0;

223 
twi
->
byãsRód
 = 0;

228 i‡(
twi
->
byãsToWrôe
 > 0) {

229 
uöt8_t
 
wrôeAddªss
 = 
twi
->
addªss
 & ~0x01;

230 
twi
->
öãrÁ˚
->
MASTER
.
ADDR
 = 
wrôeAddªss
;

236 i‡(
twi
->
byãsToRód
 > 0) {

237 
uöt8_t
 
ªadAddªss
 = 
twi
->
addªss
 | 0x01;

238 
twi
->
öãrÁ˚
->
MASTER
.
ADDR
 = 
ªadAddªss
;

240  
åue
;

242  
Ál£
;

244 
	}
}

253 
	$TWI_Ma°îI¡îru±H™dÀr
(
TWI_Ma°î_t
 *
twi
)

255 
uöt8_t
 
cuºítSètus
 = 
twi
->
öãrÁ˚
->
MASTER
.
STATUS
;

258 i‡((
cuºítSètus
 & 
TWI_MASTER_ARBLOST_bm
) ||

259 (
cuºítSètus
 & 
TWI_MASTER_BUSERR_bm
)) {

261 
	`TWI_Ma°îArbôøti⁄Lo°BusEº‹H™dÀr
(
twi
);

265 i‡(
cuºítSètus
 & 
TWI_MASTER_WIF_bm
) {

266 
	`TWI_Ma°îWrôeH™dÀr
(
twi
);

270 i‡(
cuºítSètus
 & 
TWI_MASTER_RIF_bm
) {

271 
	`TWI_Ma°îRódH™dÀr
(
twi
);

276 
	`TWI_Ma°îTønß˘i⁄Föished
(
twi
, 
TWIM_RESULT_FAIL
);

278 
	}
}

287 
	$TWI_Ma°îArbôøti⁄Lo°BusEº‹H™dÀr
(
TWI_Ma°î_t
 *
twi
)

289 
uöt8_t
 
cuºítSètus
 = 
twi
->
öãrÁ˚
->
MASTER
.
STATUS
;

292 i‡(
cuºítSètus
 & 
TWI_MASTER_BUSERR_bm
) {

293 
twi
->
ªsu…
 = 
TWIM_RESULT_BUS_ERROR
;

297 
twi
->
ªsu…
 = 
TWIM_RESULT_ARBITRATION_LOST
;

301 
twi
->
öãrÁ˚
->
MASTER
.
STATUS
 = 
cuºítSètus
 | 
TWI_MASTER_ARBLOST_bm
;

303 
twi
->
°©us
 = 
TWIM_STATUS_READY
;

304 
	}
}

313 
	$TWI_Ma°îWrôeH™dÀr
(
TWI_Ma°î_t
 *
twi
)

316 
uöt8_t
 
byãsToWrôe
 = 
twi
->bytesToWrite;

317 
uöt8_t
 
byãsToRód
 = 
twi
->bytesToRead;

320 i‡(
twi
->
öãrÁ˚
->
MASTER
.
STATUS
 & 
TWI_MASTER_RXACK_bm
) {

321 
twi
->
öãrÁ˚
->
MASTER
.
CTRLC
 = 
TWI_MASTER_CMD_STOP_gc
;

322 
twi
->
ªsu…
 = 
TWIM_RESULT_NACK_RECEIVED
;

323 
twi
->
°©us
 = 
TWIM_STATUS_READY
;

327 i‡(
twi
->
byãsWrôãn
 < 
byãsToWrôe
) {

328 
uöt8_t
 
d©a
 = 
twi
->
wrôeD©a
[twi->
byãsWrôãn
];

329 
twi
->
öãrÁ˚
->
MASTER
.
DATA
 = 
d©a
;

330 ++
twi
->
byãsWrôãn
;

336 i‡(
twi
->
byãsRód
 < 
byãsToRód
) {

337 
uöt8_t
 
ªadAddªss
 = 
twi
->
addªss
 | 0x01;

338 
twi
->
öãrÁ˚
->
MASTER
.
ADDR
 = 
ªadAddªss
;

343 
twi
->
öãrÁ˚
->
MASTER
.
CTRLC
 = 
TWI_MASTER_CMD_STOP_gc
;

344 
	`TWI_Ma°îTønß˘i⁄Föished
(
twi
, 
TWIM_RESULT_OK
);

346 
	}
}

356 
	$TWI_Ma°îRódH™dÀr
(
TWI_Ma°î_t
 *
twi
)

359 i‡(
twi
->
byãsRód
 < 
TWIM_READ_BUFFER_SIZE
) {

360 
uöt8_t
 
d©a
 = 
twi
->
öãrÁ˚
->
MASTER
.
DATA
;

361 
twi
->
ªadD©a
[twi->
byãsRód
] = 
d©a
;

362 
twi
->
byãsRód
++;

367 
twi
->
öãrÁ˚
->
MASTER
.
CTRLC
 = 
TWI_MASTER_CMD_STOP_gc
;

368 
	`TWI_Ma°îTønß˘i⁄Föished
(
twi
, 
TWIM_RESULT_BUFFER_OVERFLOW
);

372 
uöt8_t
 
byãsToRód
 = 
twi
->bytesToRead;

375 i‡(
twi
->
byãsRód
 < 
byãsToRód
) {

376 
twi
->
öãrÁ˚
->
MASTER
.
CTRLC
 = 
TWI_MASTER_CMD_RECVTRANS_gc
;

381 
twi
->
öãrÁ˚
->
MASTER
.
CTRLC
 = 
TWI_MASTER_ACKACT_bm
 |

382 
TWI_MASTER_CMD_STOP_gc
;

383 
	`TWI_Ma°îTønß˘i⁄Föished
(
twi
, 
TWIM_RESULT_OK
);

385 
	}
}

395 
	$TWI_Ma°îTønß˘i⁄Föished
(
TWI_Ma°î_t
 *
twi
, 
uöt8_t
 
ªsu…
)

397 
twi
->
ªsu…
 =Ñesult;

398 
twi
->
°©us
 = 
TWIM_STATUS_READY
;

399 
	}
}

	@hw-block/twi_master_driver.h

59 #i‚de‡
TWI_MASTER_DRIVER_H


60 
	#TWI_MASTER_DRIVER_H


	)

62 
	~"avr_compûî.h
"

65 
	#TWI_BAUD
(
F_SYS
, 
F_TWI
Ë((F_SYS / (2 * F_TWI)Ë- 5)

	)

70 
	#TWIM_STATUS_READY
 1

	)

71 
	#TWIM_STATUS_BUSY
 1

	)

75 
	eTWIM_RESULT_íum
 {

76 
	mTWIM_RESULT_UNKNOWN
 = (0x00<<0),

77 
	mTWIM_RESULT_OK
 = (0x01<<0),

78 
	mTWIM_RESULT_BUFFER_OVERFLOW
 = (0x02<<0),

79 
	mTWIM_RESULT_ARBITRATION_LOST
 = (0x03<<0),

80 
	mTWIM_RESULT_BUS_ERROR
 = (0x04<<0),

81 
	mTWIM_RESULT_NACK_RECEIVED
 = (0x05<<0),

82 
	mTWIM_RESULT_FAIL
 = (0x06<<0),

83 } 
	tTWIM_RESULT_t
;

86 
	#TWIM_WRITE_BUFFER_SIZE
 4

	)

87 
	#TWIM_READ_BUFFER_SIZE
 4

	)

95 
	sTWI_Ma°î
 {

96 
TWI_t
 *
	möãrÁ˚
;

97 
ªgi°î8_t
 
	maddªss
;

98 
ªgi°î8_t
 
	mwrôeD©a
[
TWIM_WRITE_BUFFER_SIZE
];

99 
ªgi°î8_t
 
	mªadD©a
[
TWIM_READ_BUFFER_SIZE
];

100 
ªgi°î8_t
 
	mbyãsToWrôe
;

101 
ªgi°î8_t
 
	mbyãsToRód
;

102 
ªgi°î8_t
 
	mbyãsWrôãn
;

103 
ªgi°î8_t
 
	mbyãsRód
;

104 
ªgi°î8_t
 
	m°©us
;

105 
ªgi°î8_t
 
	mªsu…
;

106 }
	tTWI_Ma°î_t
;

110 
TWI_Ma°îInô
(
TWI_Ma°î_t
 *
twi
,

111 
TWI_t
 *
moduÀ
,

112 
TWI_MASTER_INTLVL_t
 
ötLevñ
,

113 
uöt8_t
 
baudR©eRegi°îSëtög
);

114 
TWI_MASTER_BUSSTATE_t
 
TWI_Ma°îSèã
(
TWI_Ma°î_t
 *
twi
);

115 
boﬁ
 
TWI_Ma°îRódy
(
TWI_Ma°î_t
 *
twi
);

116 
boﬁ
 
TWI_Ma°îWrôe
(
TWI_Ma°î_t
 *
twi
,

117 
uöt8_t
 
addªss
,

118 
uöt8_t
 * 
wrôeD©a
,

119 
uöt8_t
 
byãsToWrôe
);

120 
boﬁ
 
TWI_Ma°îRód
(
TWI_Ma°î_t
 *
twi
,

121 
uöt8_t
 
addªss
,

122 
uöt8_t
 
byãsToRód
);

123 
boﬁ
 
TWI_Ma°îWrôeRód
(
TWI_Ma°î_t
 *
twi
,

124 
uöt8_t
 
addªss
,

125 
uöt8_t
 *
wrôeD©a
,

126 
uöt8_t
 
byãsToWrôe
,

127 
uöt8_t
 
byãsToRód
);

128 
TWI_Ma°îI¡îru±H™dÀr
(
TWI_Ma°î_t
 *
twi
);

129 
TWI_Ma°îArbôøti⁄Lo°BusEº‹H™dÀr
(
TWI_Ma°î_t
 *
twi
);

130 
TWI_Ma°îWrôeH™dÀr
(
TWI_Ma°î_t
 *
twi
);

131 
TWI_Ma°îRódH™dÀr
(
TWI_Ma°î_t
 *
twi
);

132 
TWI_Ma°îTønß˘i⁄Föished
(
TWI_Ma°î_t
 *
twi
, 
uöt8_t
 
ªsu…
);

	@hw-sim/audio.c

1 #i‚de‡
__AUDIO_C__


2 
	#__AUDIO_C__


	)

4 
	~"../hw-≠i/audio.h
"

8 
	$öôAudio
(){

10 
	}
}

12 
	$chúp
(
x
, 
y
){

14 
	}
}

16 
	$£tDac
(
x
, 
y
){

18 
	}
}

	@hw-sim/hwAccelerometer.c

1 #i‚de‡
__HW_ACCELEROMETER_C__


2 
	#__HW_ACCELEROMETER_C__


	)

5 
	~"../hw-≠i/hwAc˚Àromëî.h
"

6 
	~"../sy°em/ac˚Àromëî.h
"

7 
	~"../sy°em/h™dÀr.h
"

8 
	~<°rög.h
>

9 
	~"../sim/block.h
"

12 
	$√wHWAc˚lD©a
(){

15 
	}
}

17 
	$upd©eHWAc˚l
(){

18 if–
	`this
()->
èpBuf„r
>0 && !—his()->
_acc
.
°©us
 & 
ACC_TAP
) ){

19 if–
	`±hªad_muãx_åylock
(&(
	`this
()->
èpMuãx
))==0 ){

20 
	`this
()->
èpBuf„r
--;

21 
	`±hªad_muãx_u∆ock
(&(
	`this
()->
èpMuãx
));

22 
	`this
()->
_acc
.
°©us
|=
ACC_TAP
;

25 
	`this
()->
_acc
.
°©us
&(0xf‡^ 
ACC_TAP
);

28 
byã
 
ﬁd°©us
 = 
	`this
()->
_acc
.
°©us
 & 
ACC_O_MASK
;

31 if(!
	`åiggîH™dÀr
(
EVENT_ACCEL_CHANGE
))

33 if(
	`this
()->
_acc
.
°©us
 & 
ACC_TAP
)

35 
	`åiggîH™dÀr
(
EVENT_ACCEL_TAP
);

37 if(
	`this
()->
_acc
.
°©us
 & 
ACC_SHAKE
)

39 
	`åiggîH™dÀr
(
EVENT_ACCEL_SHAKE
);

41 if(
ﬁd°©us
 !(
	`this
()->
_acc
.
°©us
 & 
ACC_O_MASK
))

43 
	`åiggîH™dÀr
(
EVENT_ACCEL_TAP
);

48 
	}
}

50 
	$öôHWAc˚l
(){

51 
	`mem£t
(&(
	`this
()->
_acc
), 0, (this()->_acc));

52 
	}
}

55 
	$£tAc˚lRegi°î
(
byã
 
⁄e
, byã 
two
)

57 
	}
}

	@hw-sim/hwBlockTick.c

1 #i‚de‡
__HW_BLOCK_TICK_C__


2 
	#__HW_BLOCK_TICK_C__


	)

4 
	~"../hw-≠i/hwBlockTick.h
"

5 
	~"../sim/block.h
"

7 
	$öôBlockTick
(){

8 
	`this
()->
blockRódy
=1;

12 
	}
}

	@hw-sim/hwBoot.c

1 #i‚de‡
__HW_BOOT_C__


2 
	#__HW_BOOT_C__


	)

4 
	~"../hw-≠i/hwBoŸ.h
"

5 
	~"../sim/block.h
"

6 
	~"../sy°em/Àd.h
"

8 
	$jumpToHWBoŸSe˘i⁄
(){

9 
	`¥ötf
("block %†swôchedÅÿboŸlﬂdî\r\n", 
	`nodeIDasSåög
(
	`this
()->
id
, 0));

10 
	`£tCﬁ‹
(
PURPLE
);

11 
	}
}

	@hw-sim/hwDataLink.c

1 #i‚de‡
_HW_DATALINK_C_


2 
	#_HW_DATALINK_C_


	)

4 
	~"../hw-≠i/hwD©aLök.h
"

5 
	~"../sy°em/í£mbÀ.h
"

6 
	~"../sim/w‹ld.h
"

9 
	$¥o˚ssBuf„r
(
PRef
 
p
)

12 
	}
}

15 
	$outOfRërõs
(
PRef
 
p
)

18 
	`ÊushSídQueue
(
p
);

22 
	`ª°¨tSˇn
(
p
);

23 
	}
}

26 
	$£ndOnSîül
(
PRef
 
p
)

28 
Block
* 
b
 = 
	`this
();

31 
Chunk
* 
ªcd
;

34 
Chunk
* 
£nd
 = 
b
->
p‹t
[
p
].
sq
.
hód
;

36 if–
£nd
 =
NULL
 ) {

41 
byã
 
de°P‹t
 = 
p
;

43 
de°P‹t
)

45 
N‹th
:

46 
de°P‹t
 = 
South
;

48 
South
:

49 
de°P‹t
 = 
N‹th
;

51 
Ea°
:

52 
de°P‹t
 = 
We°
;

54 
We°
:

55 
de°P‹t
 = 
Ea°
;

57 
T›
:

58 
de°P‹t
 = 
Down
;

60 
Down
:

61 
de°P‹t
 = 
T›
;

65 
	`¥ötf
("didÇotÑewrite direction\n");

68 
	`outOfRërõs
(
p
);

73 if(
de°P‹t
 < 
NUM_PORTS
)

75 
Block
* 
de°
 = 
	`£eIfNeighb‹At
(
	`this
(), 
p
);

78 if(!
de°
) {

79 
	`outOfRërõs
(
p
);

84 if–!
de°
->
blockRódy
 ) {

85 
	`outOfRërõs
(
p
);

90 
ªcd
 = 
	`mÆloc
((*
£nd
));

92 if(
ªcd
 =
NULL
) {

93 
	`¥ötf
("out of memory!\n");

94 
	`outOfRërõs
(
p
);

98 
	`mem˝y
(
ªcd
, 
£nd
, (*send));

99 
ªcd
->
°©us
 = 
CHUNK_USED
 | 
CHUNK_FILLED
 | 
de°P‹t
;

100 
ªcd
->
√xt
 = 
NULL
;

103 
	`BB_LOCK
(&(
de°
->
√ighb‹Muãx
));

106 if–
de°
->
globÆRq
.
hód
 =
NULL
 )

108 
de°
->
globÆRq
.
hód
 = 
ªcd
;

113 
de°
->
globÆRq
.
èû
->
√xt
 = 
ªcd
;

116 
de°
->
globÆRq
.
èû
 = 
ªcd
;

117 
de°
->
globÆRq
.
Êags
 = 
PACKET_READY
;

119 
	`BB_UNLOCK
(&(
de°
->
√ighb‹Muãx
));

122 
	`ªmoveFromSq
(
p
, 
MSG_RESP_ACK
);

128 
	`outOfRërõs
(
p
);

131 
	}
}

134 
Chunk
* 
	$√xtPackë
()

136 
Block
* 
b
 = 
	`this
();

138 
	`BB_LOCK
(&(
b
->
√ighb‹Muãx
));

139 
Chunk
* 
c
 = 
b
->
globÆRq
.
hód
;

140 
	`BB_UNLOCK
(&(
b
->
√ighb‹Muãx
));

143 if–
c
 =
NULL
 )

145 
	`BB_LOCK
(&(
b
->
√ighb‹Muãx
));

146 
b
->
globÆRq
.
èû
 = 
NULL
;

147 
b
->
globÆRq
.
Êags
 &~
PACKET_READY
;

148 
	`BB_UNLOCK
(&(
b
->
√ighb‹Muãx
));

150  
NULL
;

154 
Chunk
* 
ªcd
 = 
	`gëSy°emRXChunk
();

157 if–
ªcd
 =
NULL
 ) {

158  
NULL
;

161 
	`BB_LOCK
(&(
b
->
√ighb‹Muãx
));

164 
b
->
globÆRq
.
hód
 = 
c
->
√xt
;

166 if–
b
->
globÆRq
.
hód
 =
NULL
 )

168 
b
->
globÆRq
.
Êags
 &~
PACKET_READY
;

169 
b
->
globÆRq
.
èû
 = 
NULL
;

173 
c
->
√xt
 = 
NULL
;

174 
	`BB_UNLOCK
(&(
b
->
√ighb‹Muãx
));

177 
	`mem˝y
(
ªcd
, 
c
, (*c));

180 
	`‰ì
(
c
);

181  
ªcd
;

182 
	}
}

185 
	$öôHWD©aLök
()

187 
	`±hªad_muãx_öô
(&(
	`this
()->
√ighb‹Muãx
), 
NULL
);

188 
	`±hªad_muãx_öô
(&(
	`this
()->
£ndQueueMuãx
), 
NULL
);

189 
	}
}

	@hw-sim/hwDebug.c

1 
	~"../hw-≠i/hwDebug.h
"

4 
	$öôHWDebug
(){

7 
	}
}

	@hw-sim/hwLED.c

1 #i‚de‡
__HW_LED_C__


2 
	#__HW_LED_C__


	)

4 
	~"../sim/block.h
"

5 
	~"../hw-≠i/hwLED.h
"

9 
	$£tHWLED
(
byã
 
r
, byã 
g
, byã 
b
, 
I¡ísôy
 
i
){

10 
	`this
()->
simLEDr
=
r
;

11 
	`this
()->
simLEDg
=
g
;

12 
	`this
()->
simLEDb
=
b
;

13 
	`this
()->
simLEDi
=
i
;

14 
	}
}

16 
	$öôHWLED
(){

17 
	`£tHWLED
(128,128,128,255);

18 
	}
}

	@hw-sim/hwMemory.c

1 #i‚de‡
__HW_MEMORY_C__


2 
	#__HW_MEMORY_C__


	)

4 
	~"../sy°em/defs.h
"

5 
	~"../sim/block.h
"

6 
	~"../hw-≠i/hwSîül.h
"

11 
	$°‹e
(* 
de°
, * 
§c
, 
Àn
){

13 
	}
}

18 
	$ª°‹e
(* 
de°
, * 
§c
, 
Àn
){

20 
	}
}

24 
uöt16_t
 
	$gëGUID
(){

25  
	`this
()->
id
;

26 
	}
}

	@hw-sim/hwSerial.c

1 #i‚de‡
_HW_SERIAL_C_


2 
	#_HW_SERIAL_C_


	)

4 
	~"../hw-≠i/hwSîül.h
"

5 
	~"../sy°em/cúc_buf„r.h
"

8 
	$öôHWP‹ts
(){

16 
	}
}

19 
	$pPutCh¨
(
c
, 
PRef
 
p
){

20 if– 
p
 < 
NUM_PORTS
){

25 
	}
}

26 
	$pGëCh¨
(
PRef
 
p
){

28 if– 
p
 < 
NUM_PORTS
){

39 
	}
}

	@hw-sim/hwTime.c

1 #i‚de‡
__HW_TIME_C__


2 
	#__HW_TIME_C__


	)

4 
	~"../hw-≠i/hwTime.h
"

5 
	~<sys/timeb.h
>

7 
Time
 
	$gëHWTime
(){

9 
timeb
 
t
;

10 
	`·ime
(&
t
);

13  (
Time
)(
t
.
mûlôm
+1000*—.
time
 % (1<<20)));

14 
	}
}

15 
	$öôHWTime
(){

17 
	}
}

	@ldpsyntax/ldp.h

1 #i‚de‡
_LDP_H_


2 
	#_LDP_H_


	)

4 íum { 
	mC⁄°
, 
	mFun˘i⁄
, 
	mNode
, 
	mFõld
, 
	mUnknown
 } 
	tIty≥
;

6 
	ssymbﬁ
 {

7 * 
	mãxt
;

8 
Ity≥
 
	mty≥
;

9 
	mw©îm¨k
;

10 
symbﬁ
* 
	m√xt
;

11 } *
	tSymbﬁ
;

13 
	shashèbÀ
 {

14 
	msize
;

15 
	míåõs
;

16 
	mw©îm¨k
;

17 
Symbﬁ
* 
	md©a
;

18 } *
	tTabÀ
;

20 
öôTabÀ
();

21 
Symbﬁ
 
ö£π
(
TabÀ
 
t
, * 
vÆue
);

22 
Symbﬁ
 
lookup
(
TabÀ
 
t
, * 
vÆue
);

23 
pushW©îm¨k
(
TabÀ
 
t
);

24 
p›W©îm¨k
(
TabÀ
 
t
);

25 
¥ötTabÀ
(
TabÀ
 
t
);

	@ldpsyntax/ldp.tab.c

46 
	#YYBISON
 1

	)

49 
	#YYBISON_VERSION
 "2.4.1"

	)

52 
	#YYSKELETON_NAME
 "yacc.c"

	)

55 
	#YYPURE
 0

	)

58 
	#YYPUSH
 0

	)

61 
	#YYPULL
 1

	)

64 
	#YYLSP_NEEDED
 0

	)

78 
	~<°dio.h
>

79 
	~<°d¨g.h
>

80 
	~"ldp.h
"

82 
FILE
 *
yyö
;

83 
löíum
;

84 * 
‚ame
;

85 
TabÀ
 
symbﬁs
;

86 * 
yyãxt
;

87 
	gîr‹
 = 0;

90 
	$yyîr‹
 (* 
s
)

92 
	`Ârötf
 (
°dîr
, "%s:%d:%s\n", 
‚ame
, 
löíum
, 
s
);

93 
îr‹
 = 1;

94 
	}
}

97 
	$myîr‹
 (* 
s
, ...)

99 
va_li°
 
≠
;

100 
	`va_°¨t
(
≠
, 
s
);

101 
	`Ârötf
(
°dîr
, "%s:%d:", 
‚ame
, 
löíum
);

102 
	`vÂrötf
 (
°dîr
, 
s
, 
≠
);

103 
îr‹
 = 1;

104 
	`va_íd
(
≠
);

105 
	}
}

108 
	$ôy≥2°r
(
Ity≥
 
ty≥
)

110 
ty≥
)

112 
C⁄°
:  "Constant";

113 
Fun˘i⁄
:  "Function";

114 
Node
:  "Node";

115 
Fõld
:  "Field";

116 
Unknown
:  "Unknown";

119 
	}
}

122 
	$checkID
(
Symbﬁ
 
s
, 
Ity≥
 
ty≥
)

124 i‡(
s
->
ty≥
 =
Unknown
) {

125 
s
->
ty≥
 =Åype;

126 
	`Ârötf
(
°dîr
, "%d: Unknow¿idítifõ∏'%s',ássumög iài†®%s\n", 
löíum
, 
s
->
ãxt
, 
	`ôy≥2°r
(
ty≥
));

127 
îr‹
 = 1;

129 i‡(
s
->
ty≥
 !=Åype) {

130 
	`Ârötf
(
°dîr
, "%d: Ex≥˘edá %†idítifõr, in°ód foundÅhê%†'%s'\n", 
löíum
, 
	`ôy≥2°r
(
ty≥
), ity≥2°r(
s
->ty≥), s->
ãxt
);

131 
îr‹
 = 1;

133 
	}
}

136 
	$de˛¨eID
(
Symbﬁ
 
s
, 
Ity≥
 
ty≥
)

139 i‡(
s
->
ty≥
 !
Unknown
) {

140 
	`myîr‹
("%†'%s'Ñede˛¨ed\n", 
	`ôy≥2°r
(
ty≥
), 
s
->
ãxt
);

142 
s
->
ty≥
 =Åype;

143 
	}
}

151 #i‚de‡
YYDEBUG


152 
	#YYDEBUG
 0

	)

156 #ifde‡
YYERROR_VERBOSE


157 #unde‡
YYERROR_VERBOSE


158 
	#YYERROR_VERBOSE
 1

	)

160 
	#YYERROR_VERBOSE
 1

	)

164 #i‚de‡
YYTOKEN_TABLE


165 
	#YYTOKEN_TABLE
 0

	)

170 #i‚de‡
YYTOKENTYPE


171 
	#YYTOKENTYPE


	)

174 
	eyytokíty≥
 {

175 
	mINTEGER
 = 258,

176 
	mFLOAT
 = 259,

177 
	mSTRING
 = 260,

178 
	mINCLUDE
 = 261,

179 
	mTRUE
 = 262,

180 
	mFALSE
 = 263,

181 
	mFORALL
 = 264,

182 
	mWHERE
 = 265,

183 
	mSCALAR
 = 266,

184 
	mIDENT
 = 267,

185 
	mBINOP
 = 268,

186 
	mMINUS
 = 269,

187 
	mLPAR
 = 270,

188 
	mRPAR
 = 271,

189 
	mCOMMA
 = 272,

190 
	mDOT
 = 273,

191 
	mSEMICOLON
 = 274,

192 
	mEQUAL
 = 275,

193 
	mDO
 = 276,

194 
	mCONST
 = 277

200 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


201 
	uYYSTYPE


207 
Symbﬁ
 
	msymbﬁ
;

213 } 
	tYYSTYPE
;

214 
	#YYSTYPE_IS_TRIVIAL
 1

	)

215 
	#yy°y≥
 
YYSTYPE


	)

216 
	#YYSTYPE_IS_DECLARED
 1

	)

230 #ifde‡
YYTYPE_UINT8


231 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

233 
	tyyty≥_uöt8
;

236 #ifde‡
YYTYPE_INT8


237 
YYTYPE_INT8
 
	tyyty≥_öt8
;

238 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

239 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

240 sig√d 
	tyyty≥_öt8
;

242 
	tyyty≥_öt8
;

245 #ifde‡
YYTYPE_UINT16


246 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

248 
	tyyty≥_uöt16
;

251 #ifde‡
YYTYPE_INT16


252 
YYTYPE_INT16
 
	tyyty≥_öt16
;

254 
	tyyty≥_öt16
;

257 #i‚de‡
YYSIZE_T


258 #ifde‡
__SIZE_TYPE__


259 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

260 #ñi‡
deföed
 
size_t


261 
	#YYSIZE_T
 
size_t


	)

262 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

263 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

264 
	~<°ddef.h
>

265 
	#YYSIZE_T
 
size_t


	)

267 
	#YYSIZE_T
 

	)

271 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

273 #i‚de‡
YY_


274 #i‡
YYENABLE_NLS


275 #i‡
ENABLE_NLS


276 
	~<liböé.h
>

277 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

280 #i‚de‡
YY_


281 
	#YY_
(
msgid
Ë
	)
msgid

286 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


287 
	#YYUSE
(
e
Ë((Ë”))

	)

289 
	#YYUSE
(
e
Ë

	)

293 #i‚de‡
löt


294 
	#YYID
(
n
Ë“)

	)

296 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

297 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

299 
	$YYID
 (
yyi
)

302 
	$YYID
 (
yyi
)

303 
yyi
;

306  
yyi
;

307 
	}
}

310 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


314 #ifde‡
YYSTACK_USE_ALLOCA


315 #i‡
YYSTACK_USE_ALLOCA


316 #ifde‡
__GNUC__


317 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

318 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


319 
	~<Æloˇ.h
>

320 #ñi‡
deföed
 
_AIX


321 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

322 #ñi‡
deföed
 
_MSC_VER


323 
	~<mÆloc.h
>

324 
	#Æloˇ
 
_Æloˇ


	)

326 
	#YYSTACK_ALLOC
 
Æloˇ


	)

327 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

328 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

329 
	~<°dlib.h
>

330 #i‚de‡
_STDLIB_H


331 
	#_STDLIB_H
 1

	)

338 #ifde‡
YYSTACK_ALLOC


340 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

341 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


346 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

349 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

350 
	#YYSTACK_FREE
 
YYFREE


	)

351 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


352 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

354 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
_STDLIB_H
 \

355 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

356 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

357 
	~<°dlib.h
>

358 #i‚de‡
_STDLIB_H


359 
	#_STDLIB_H
 1

	)

362 #i‚de‡
YYMALLOC


363 
	#YYMALLOC
 
mÆloc


	)

364 #i‡! 
deföed
 
mÆloc
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

365 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

366 *
mÆloc
 (
YYSIZE_T
);

369 #i‚de‡
YYFREE


370 
	#YYFREE
 
‰ì


	)

371 #i‡! 
deföed
 
‰ì
 && ! deföed 
_STDLIB_H
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

372 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

373 
‰ì
 (*);

380 #i‡(! 
deföed
 
yyovîÊow
 \

381 && (! 
deföed
 
	g__˝lu•lus
 \

382 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

385 
	uyyÆloc


387 
yyty≥_öt16
 
	myyss_Æloc
;

388 
YYSTYPE
 
	myyvs_Æloc
;

392 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

396 
	#YYSTACK_BYTES
(
N
) \

397 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

398 + 
YYSTACK_GAP_MAXIMUM
)

	)

402 #i‚de‡
YYCOPY


403 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

404 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

405 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

407 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

410 
YYSIZE_T
 
yyi
; \

411 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

412 (
To
)[
yyi
] = (
From
)[yyi]; \

414 
	`YYID
 (0))

	)

423 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

426 
YYSIZE_T
 
yy√wbyãs
; \

427 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

428 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

429 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

430 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

432 
	`YYID
 (0))

	)

437 
	#YYFINAL
 17

	)

439 
	#YYLAST
 88

	)

442 
	#YYNTOKENS
 23

	)

444 
	#YYNNTS
 19

	)

446 
	#YYNRULES
 44

	)

448 
	#YYNSTATES
 81

	)

451 
	#YYUNDEFTOK
 2

	)

452 
	#YYMAXUTOK
 277

	)

454 
	#YYTRANSLATE
(
YYX
) \

455 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

458 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

490 #i‡
YYDEBUG


493 c⁄° 
yyty≥_uöt8
 
	gyy¥hs
[] =

503 c⁄° 
yyty≥_öt8
 
	gyyrhs
[] =

523 c⁄° 
yyty≥_uöt8
 
	gyyæöe
[] =

533 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


536 c⁄° *c⁄° 
	gyyäame
[] =

548 #ifde‡
YYPRINT


551 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

560 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

570 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

582 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

596 c⁄° 
yyty≥_öt8
 
	gyydefgŸo
[] =

604 
	#YYPACT_NINF
 -54

	)

605 c⁄° 
yyty≥_öt8
 
	gyy∑˘
[] =

619 c⁄° 
yyty≥_öt8
 
	gyypgŸo
[] =

629 
	#YYTABLE_NINF
 -1

	)

630 c⁄° 
yyty≥_uöt8
 
	gyyèbÀ
[] =

643 c⁄° 
yyty≥_uöt8
 
	gyycheck
[] =

658 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

671 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

672 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

673 
	#YYEMPTY
 (-2)

	)

674 
	#YYEOF
 0

	)

676 
	#YYACCEPT
 
yyac˚±œb


	)

677 
	#YYABORT
 
yyab‹éab


	)

678 
	#YYERROR
 
yyîr‹œb


	)

685 
	#YYFAIL
 
yyîæab


	)

687 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

689 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

691 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

693 
yych¨
 = (
Tokí
); \

694 
yylvÆ
 = (
VÆue
); \

695 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
); \

696 
	`YYPOPSTACK
 (1); \

697 
yybackup
; \

701 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

702 
YYERROR
; \

704 
	`YYID
 (0))

	)

707 
	#YYTERROR
 1

	)

708 
	#YYERRCODE
 256

	)

715 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

716 #i‚de‡
YYLLOC_DEFAULT


717 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

719 i‡(
	`YYID
 (
N
)) \

721 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

722 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

723 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

724 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

728 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

729 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

730 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

731 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

733 
	`YYID
 (0))

	)

741 #i‚de‡
YY_LOCATION_PRINT


742 #i‡
YYLTYPE_IS_TRIVIAL


743 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
) \

744 
	`Ârötf
 (
Fûe
, "%d.%d-%d.%d", \

745 (
Loc
).
fú°_löe
, (Loc).
fú°_cﬁumn
, \

746 (
Loc
).
œ°_löe
, (Loc).
œ°_cﬁumn
)

	)

748 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

755 #ifde‡
YYLEX_PARAM


756 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

758 
	#YYLEX
 
	`yyÀx
 ()

	)

762 #i‡
YYDEBUG


764 #i‚de‡
YYFPRINTF


765 
	~<°dio.h
>

766 
	#YYFPRINTF
 
Ârötf


	)

769 
	#YYDPRINTF
(
Args
) \

771 i‡(
yydebug
) \

772 
YYFPRINTF
 
Args
; \

773 } 
	`YYID
 (0))

	)

775 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

777 i‡(
yydebug
) \

779 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

780 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

781 
Ty≥
, 
VÆue
); \

782 
	`YYFPRINTF
 (
°dîr
, "\n"); \

784 } 
	`YYID
 (0))

	)

792 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

793 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

795 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

798 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

799 
FILE
 *
yyouçut
;

800 
yyty≥
;

801 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

804 i‡(!
yyvÆuï
)

806 #ifde‡
YYPRINT


807 i‡(
yyty≥
 < 
YYNTOKENS
)

808 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

810 
	`YYUSE
 (
yyouçut
);

812 
yyty≥
)

817 
	}
}

824 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

825 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

827 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

830 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

831 
FILE
 *
yyouçut
;

832 
yyty≥
;

833 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

836 i‡(
yyty≥
 < 
YYNTOKENS
)

837 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

839 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

841 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

842 
	`YYFPRINTF
 (
yyouçut
, ")");

843 
	}
}

850 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

851 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

853 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

856 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

857 
yyty≥_öt16
 *
yybŸtom
;

858 
yyty≥_öt16
 *
yyt›
;

861 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

862 ; 
yybŸtom
 <
yyt›
; yybottom++)

864 
yybŸ
 = *
yybŸtom
;

865 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

867 
	`YYFPRINTF
 (
°dîr
, "\n");

868 
	}
}

870 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

872 i‡(
yydebug
) \

873 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

874 } 
	`YYID
 (0))

	)

881 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

882 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

884 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

887 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

888 
YYSTYPE
 *
yyv•
;

889 
yyruÀ
;

892 
yyƒhs
 = 
yyr2
[
yyruÀ
];

893 
yyi
;

894 
yy o
 = 
yyæöe
[
yyruÀ
];

895 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

896 
yyruÀ
 - 1, 
yy o
);

898 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

900 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

901 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

902 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

904 
	`YYFPRINTF
 (
°dîr
, "\n");

906 
	}
}

908 
	#YY_REDUCE_PRINT
(
RuÀ
) \

910 i‡(
yydebug
) \

911 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

912 } 
	`YYID
 (0))

	)

916 
	gyydebug
;

918 
	#YYDPRINTF
(
Args
)

	)

919 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

920 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

921 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

926 #i‚def 
YYINITDEPTH


927 
	#YYINITDEPTH
 200

	)

937 #i‚de‡
YYMAXDEPTH


938 
	#YYMAXDEPTH
 10000

	)

943 #i‡
YYERROR_VERBOSE


945 #i‚de‡
yy°æí


946 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


947 
	#yy°æí
 
°æí


	)

950 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

951 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

952 
YYSIZE_T


953 
	$yy°æí
 (c⁄° *
yy°r
)

955 
YYSIZE_T


956 
	$yy°æí
 (
yy°r
)

957 c⁄° *
yy°r
;

960 
YYSIZE_T
 
yyÀn
;

961 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

963  
yyÀn
;

964 
	}
}

968 #i‚de‡
yy°p˝y


969 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


970 
	#yy°p˝y
 
°p˝y


	)

974 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

975 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

977 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

980 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

981 *
yyde°
;

982 c⁄° *
yy§c
;

985 *
yyd
 = 
yyde°
;

986 c⁄° *
yys
 = 
yy§c
;

988 (*
yyd
++ = *
yys
++) != '\0')

991  
yyd
 - 1;

992 
	}
}

996 #i‚de‡
yyäamîr


1004 
YYSIZE_T


1005 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1007 i‡(*
yy°r
 == '"')

1009 
YYSIZE_T
 
yyn
 = 0;

1010 c⁄° *
yyp
 = 
yy°r
;

1013 *++
yyp
)

1017 
do_nŸ_°rù_quŸes
;

1020 i‡(*++
yyp
 != '\\')

1021 
do_nŸ_°rù_quŸes
;

1024 i‡(
yyªs
)

1025 
yyªs
[
yyn
] = *
yyp
;

1026 
yyn
++;

1030 i‡(
yyªs
)

1031 
yyªs
[
yyn
] = '\0';

1032  
yyn
;

1034 
do_nŸ_°rù_quŸes
: ;

1037 i‡(! 
yyªs
)

1038  
	`yy°æí
 (
yy°r
);

1040  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1041 
	}
}

1051 
YYSIZE_T


1052 
	$yysy¡ax_îr‹
 (*
yyªsu…
, 
yy°©e
, 
yych¨
)

1054 
yyn
 = 
yy∑˘
[
yy°©e
];

1056 i‡(! (
YYPACT_NINF
 < 
yyn
 && yy¿<
YYLAST
))

1060 
yyty≥
 = 
	`YYTRANSLATE
 (
yych¨
);

1061 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yyty≥
]);

1062 
YYSIZE_T
 
yysize
 = 
yysize0
;

1063 
YYSIZE_T
 
yysize1
;

1064 
yysize_ovîÊow
 = 0;

1065 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1066 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1067 
yyx
;

1072 
	`YY_
("syntaxÉrror, unexpected %s");

1073 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s");

1074 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s");

1075 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s");

1076 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s");

1078 *
yyfmt
;

1079 c⁄° *
yyf
;

1080 c⁄° 
yyu√x≥˘ed
[] = "syntaxÉrror, unexpected %s";

1081 c⁄° 
yyex≥˘ög
[] = ",Éxpecting %s";

1082 c⁄° 
yy‹
[] = " or %s";

1083 
yyf‹m©
[ 
yyu√x≥˘ed


1084 +  
yyex≥˘ög
 - 1

1085 + ((
YYERROR_VERBOSE_ARGS_MAXIMUM
 - 2)

1086 * ( 
yy‹
 - 1))];

1087 c⁄° *
yy¥efix
 = 
yyex≥˘ög
;

1091 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1094 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1095 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1096 
yycou¡
 = 1;

1098 
yy¨g
[0] = 
yyäame
[
yyty≥
];

1099 
yyfmt
 = 
	`yy°p˝y
 (
yyf‹m©
, 
yyu√x≥˘ed
);

1101 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1102 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR
)

1104 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1106 
yycou¡
 = 1;

1107 
yysize
 = 
yysize0
;

1108 
yyf‹m©
[ 
yyu√x≥˘ed
 - 1] = '\0';

1111 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1112 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1113 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1114 
yysize
 = 
yysize1
;

1115 
yyfmt
 = 
	`yy°p˝y
 (yyfmt, 
yy¥efix
);

1116 
yy¥efix
 = 
yy‹
;

1119 
yyf
 = 
	`YY_
(
yyf‹m©
);

1120 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf
);

1121 
yysize_ovîÊow
 |(
yysize1
 < 
yysize
);

1122 
yysize
 = 
yysize1
;

1124 i‡(
yysize_ovîÊow
)

1125  
YYSIZE_MAXIMUM
;

1127 i‡(
yyªsu…
)

1132 *
yyp
 = 
yyªsu…
;

1133 
yyi
 = 0;

1134 (*
yyp
 = *
yyf
) != '\0')

1136 i‡(*
yyp
 ='%' && 
yyf
[1] ='s' && 
yyi
 < 
yycou¡
)

1138 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1139 
yyf
 += 2;

1143 
yyp
++;

1144 
yyf
++;

1148  
yysize
;

1150 
	}
}

1159 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1160 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1162 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1165 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1166 c⁄° *
yymsg
;

1167 
yyty≥
;

1168 
YYSTYPE
 *
yyvÆuï
;

1171 
	`YYUSE
 (
yyvÆuï
);

1173 i‡(!
yymsg
)

1174 
yymsg
 = "Deleting";

1175 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1177 
yyty≥
)

1183 
	}
}

1186 #ifde‡
YYPARSE_PARAM


1187 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1188 
yy∑r£
 (*
YYPARSE_PARAM
);

1190 
yy∑r£
 ();

1193 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1194 
yy∑r£
 ();

1196 
yy∑r£
 ();

1202 
	gyych¨
;

1205 
YYSTYPE
 
	gyylvÆ
;

1208 
	gyy√ºs
;

1216 #ifde‡
YYPARSE_PARAM


1217 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1218 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1220 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1223 
	$yy∑r£
 (
YYPARSE_PARAM
)

1224 *
YYPARSE_PARAM
;

1227 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1228 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1230 
	$yy∑r£
 ()

1233 
	$yy∑r£
 ()

1240 
yy°©e
;

1242 
yyîr°©us
;

1252 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1253 
yyty≥_öt16
 *
yyss
;

1254 
yyty≥_öt16
 *
yys•
;

1257 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1258 
YYSTYPE
 *
yyvs
;

1259 
YYSTYPE
 *
yyv•
;

1261 
YYSIZE_T
 
yy°acksize
;

1263 
yyn
;

1264 
yyªsu…
;

1266 
yytokí
;

1269 
YYSTYPE
 
yyvÆ
;

1271 #i‡
YYERROR_VERBOSE


1273 
yymsgbuf
[128];

1274 *
yymsg
 = 
yymsgbuf
;

1275 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1278 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1282 
yyÀn
 = 0;

1284 
yytokí
 = 0;

1285 
yyss
 = 
yysß
;

1286 
yyvs
 = 
yyvß
;

1287 
yy°acksize
 = 
YYINITDEPTH
;

1289 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1291 
yy°©e
 = 0;

1292 
yyîr°©us
 = 0;

1293 
yy√ºs
 = 0;

1294 
yych¨
 = 
YYEMPTY
;

1300 
yys•
 = 
yyss
;

1301 
yyv•
 = 
yyvs
;

1303 
yy£t°©e
;

1308 
yy√w°©e
:

1311 
yys•
++;

1313 
yy£t°©e
:

1314 *
yys•
 = 
yy°©e
;

1316 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1319 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1321 #ifde‡
yyovîÊow


1326 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1327 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1333 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1334 &
yyss1
, 
yysize
 *  (*
yys•
),

1335 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1336 &
yy°acksize
);

1338 
yyss
 = 
yyss1
;

1339 
yyvs
 = 
yyvs1
;

1342 #i‚de‡
YYSTACK_RELOCATE


1343 
yyexhau°edœb
;

1346 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1347 
yyexhau°edœb
;

1348 
yy°acksize
 *= 2;

1349 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1350 
yy°acksize
 = 
YYMAXDEPTH
;

1353 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1354 
yyÆloc
 *
yy±r
 =

1355 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1356 i‡(! 
yy±r
)

1357 
yyexhau°edœb
;

1358 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1359 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1360 #unde‡
YYSTACK_RELOCATE


1361 i‡(
yyss1
 !
yysß
)

1362 
	`YYSTACK_FREE
 (
yyss1
);

1367 
yys•
 = 
yyss
 + 
yysize
 - 1;

1368 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1370 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1371 (Ë
yy°acksize
));

1373 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1374 
YYABORT
;

1377 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1379 i‡(
yy°©e
 =
YYFINAL
)

1380 
YYACCEPT
;

1382 
yybackup
;

1387 
yybackup
:

1393 
yyn
 = 
yy∑˘
[
yy°©e
];

1394 i‡(
yyn
 =
YYPACT_NINF
)

1395 
yydeÁu…
;

1400 i‡(
yych¨
 =
YYEMPTY
)

1402 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1403 
yych¨
 = 
YYLEX
;

1406 i‡(
yych¨
 <
YYEOF
)

1408 
yych¨
 = 
yytokí
 = 
YYEOF
;

1409 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1413 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1414 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1419 
yyn
 +
yytokí
;

1420 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1421 
yydeÁu…
;

1422 
yyn
 = 
yyèbÀ
[yyn];

1423 i‡(
yyn
 <= 0)

1425 i‡(
yyn
 =0 || yy¿=
YYTABLE_NINF
)

1426 
yyîæab
;

1427 
yyn
 = -yyn;

1428 
yyªdu˚
;

1433 i‡(
yyîr°©us
)

1434 
yyîr°©us
--;

1437 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1440 
yych¨
 = 
YYEMPTY
;

1442 
yy°©e
 = 
yyn
;

1443 *++
yyv•
 = 
yylvÆ
;

1445 
yy√w°©e
;

1451 
yydeÁu…
:

1452 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1453 i‡(
yyn
 == 0)

1454 
yyîæab
;

1455 
yyªdu˚
;

1461 
yyªdu˚
:

1463 
yyÀn
 = 
yyr2
[
yyn
];

1473 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1476 
	`YY_REDUCE_PRINT
 (
yyn
);

1477 
yyn
)

1512 
	`myîr‹
("ShouldÇot have gotten here: internalÉrror");

1521 
	`de˛¨eID
((
yyv•
[(2Ë- (2)].
symbﬁ
), 
Fõld
);

1530 
	`de˛¨eID
((
yyv•
[(2Ë- (4)].
symbﬁ
), 
Fõld
);

1539 
	`de˛¨eID
((
yyv•
[(2Ë- (4)].
symbﬁ
), 
Fõld
);

1540 
	`checkID
((
yyv•
[(4Ë- (4)].
symbﬁ
), 
C⁄°
);

1549 
	`de˛¨eID
((
yyv•
[(2Ë- (5)].
symbﬁ
), 
Fun˘i⁄
);

1558 
	`de˛¨eID
((
yyv•
[(2Ë- (4)].
symbﬁ
), 
Fun˘i⁄
);

1567 
	`de˛¨eID
((
yyv•
[(2Ë- (4)].
symbﬁ
), 
C⁄°
);

1576 
	`p›W©îm¨k
(
symbﬁs
);

1585 
	`pushW©îm¨k
(
symbﬁs
);

1594 
	`de˛¨eID
((
yyv•
[(3Ë- (3)].
symbﬁ
), 
Node
);

1603 
	`de˛¨eID
((
yyv•
[(1Ë- (1)].
symbﬁ
), 
Node
);

1612 
	`checkID
((
yyv•
[(1Ë- (3)].
symbﬁ
), 
Node
);

1613 
	`checkID
((
yyv•
[(3Ë- (3)].
symbﬁ
), 
Fõld
);

1622 
Symbﬁ
 
s
 = (
yyv•
[(1Ë- (1)].
symbﬁ
);

1623 
	`checkID
(
s
, 
C⁄°
);

1632 
	`checkID
((
yyv•
[(1Ë- (5)].
symbﬁ
), 
Node
);

1633 
	`checkID
((
yyv•
[(3Ë- (5)].
symbﬁ
), 
Fõld
);

1642 
	`checkID
((
yyv•
[(1Ë- (6)].
symbﬁ
), 
Node
);

1643 
	`checkID
((
yyv•
[(3Ë- (6)].
symbﬁ
), 
Fun˘i⁄
);

1652 
	`checkID
((
yyv•
[(1Ë- (5)].
symbﬁ
), 
Node
);

1653 
	`checkID
((
yyv•
[(3Ë- (5)].
symbﬁ
), 
Fun˘i⁄
);

1661 { (
yyvÆ
.
symbﬁ
Ë
	`ö£π
(
symbﬁs
, 
yyãxt
); ;}

1670 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

1672 
	`YYPOPSTACK
 (
yyÀn
);

1673 
yyÀn
 = 0;

1674 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1676 *++
yyv•
 = 
yyvÆ
;

1682 
yyn
 = 
yyr1
[yyn];

1684 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

1685 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

1686 
yy°©e
 = 
yyèbÀ
[yystate];

1688 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

1690 
yy√w°©e
;

1696 
yyîæab
:

1698 i‡(!
yyîr°©us
)

1700 ++
yy√ºs
;

1701 #i‡! 
YYERROR_VERBOSE


1702 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1705 
YYSIZE_T
 
yysize
 = 
	`yysy¡ax_îr‹
 (0, 
yy°©e
, 
yych¨
);

1706 i‡(
yymsg_Æloc
 < 
yysize
 && yymsg_Ælo¯< 
YYSTACK_ALLOC_MAXIMUM
)

1708 
YYSIZE_T
 
yyÆloc
 = 2 * 
yysize
;

1709 i‡(! (
yysize
 <
yyÆloc
 && yyÆlo¯<
YYSTACK_ALLOC_MAXIMUM
))

1710 
yyÆloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1711 i‡(
yymsg
 !
yymsgbuf
)

1712 
	`YYSTACK_FREE
 (
yymsg
);

1713 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yyÆloc
);

1714 i‡(
yymsg
)

1715 
yymsg_Æloc
 = 
yyÆloc
;

1718 
yymsg
 = 
yymsgbuf
;

1719 
yymsg_Æloc
 =  
yymsgbuf
;

1723 i‡(0 < 
yysize
 && yysizê<
yymsg_Æloc
)

1725 (Ë
	`yysy¡ax_îr‹
 (
yymsg
, 
yy°©e
, 
yych¨
);

1726 
	`yyîr‹
 (
yymsg
);

1730 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

1731 i‡(
yysize
 != 0)

1732 
yyexhau°edœb
;

1740 i‡(
yyîr°©us
 == 3)

1745 i‡(
yych¨
 <
YYEOF
)

1748 i‡(
yych¨
 =
YYEOF
)

1749 
YYABORT
;

1753 
	`yyde°ru˘
 ("Error: discarding",

1754 
yytokí
, &
yylvÆ
);

1755 
yych¨
 = 
YYEMPTY
;

1761 
yyîæab1
;

1767 
yyîr‹œb
:

1773 
yyîr‹œb
;

1777 
	`YYPOPSTACK
 (
yyÀn
);

1778 
yyÀn
 = 0;

1779 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1780 
yy°©e
 = *
yys•
;

1781 
yyîæab1
;

1787 
yyîæab1
:

1788 
yyîr°©us
 = 3;

1792 
yyn
 = 
yy∑˘
[
yy°©e
];

1793 i‡(
yyn
 !
YYPACT_NINF
)

1795 
yyn
 +
YYTERROR
;

1796 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

1798 
yyn
 = 
yyèbÀ
[yyn];

1799 i‡(0 < 
yyn
)

1805 i‡(
yys•
 =
yyss
)

1806 
YYABORT
;

1809 
	`yyde°ru˘
 ("Error:Öopping",

1810 
yy°os
[
yy°©e
], 
yyv•
);

1811 
	`YYPOPSTACK
 (1);

1812 
yy°©e
 = *
yys•
;

1813 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1816 *++
yyv•
 = 
yylvÆ
;

1820 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

1822 
yy°©e
 = 
yyn
;

1823 
yy√w°©e
;

1829 
yyac˚±œb
:

1830 
yyªsu…
 = 0;

1831 
yyªtu∫
;

1836 
yyab‹éab
:

1837 
yyªsu…
 = 1;

1838 
yyªtu∫
;

1840 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


1844 
yyexhau°edœb
:

1845 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

1846 
yyªsu…
 = 2;

1850 
yyªtu∫
:

1851 i‡(
yych¨
 !
YYEMPTY
)

1852 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

1853 
yytokí
, &
yylvÆ
);

1856 
	`YYPOPSTACK
 (
yyÀn
);

1857 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

1858 
yys•
 !
yyss
)

1860 
	`yyde°ru˘
 ("Cleanup:Öopping",

1861 
yy°os
[*
yys•
], 
yyv•
);

1862 
	`YYPOPSTACK
 (1);

1864 #i‚de‡
yyovîÊow


1865 i‡(
yyss
 !
yysß
)

1866 
	`YYSTACK_FREE
 (
yyss
);

1868 #i‡
YYERROR_VERBOSE


1869 i‡(
yymsg
 !
yymsgbuf
)

1870 
	`YYSTACK_FREE
 (
yymsg
);

1873  
	`YYID
 (
yyªsu…
);

1874 
	}
}

1883 
	$maö
–
¨gc
, 
¨gv
 )

1884 
¨gc
;

1885 **
¨gv
;

1887 
	`öôTabÀ
();

1888 
löíum
=1;

1889 ++
¨gv
, --
¨gc
;

1890 i‡–
¨gc
 > 0 ) {

1891 
‚ame
 = 
	`°rdup
(
¨gv
[0]);

1892 
yyö
 = 
	`f›í
–
‚ame
, "r" );

1894 
‚ame
 = "*stdin*";

1895 
yyö
 = 
°dö
;

1898 
x
 = 
	`yy∑r£
 ();

1900 i‡(
îr‹
) {

1901 
	`Ârötf
(
°dîr
, "YourÖrogram had syntaxÉrrors\n");

1903 
	`Ârötf
(
°dîr
, "YourÖrogramÖassedÅhe syntax check\n");

1906  
x
;

1907 
	}
}

	@ldpsyntax/ldp.tab.h

37 #i‚de‡
YYTOKENTYPE


38 
	#YYTOKENTYPE


	)

41 
	eyytokíty≥
 {

42 
	mINTEGER
 = 258,

43 
	mFLOAT
 = 259,

44 
	mSTRING
 = 260,

45 
	mINCLUDE
 = 261,

46 
	mTRUE
 = 262,

47 
	mFALSE
 = 263,

48 
	mFORALL
 = 264,

49 
	mWHERE
 = 265,

50 
	mSCALAR
 = 266,

51 
	mIDENT
 = 267,

52 
	mBINOP
 = 268,

53 
	mMINUS
 = 269,

54 
	mLPAR
 = 270,

55 
	mRPAR
 = 271,

56 
	mCOMMA
 = 272,

57 
	mDOT
 = 273,

58 
	mSEMICOLON
 = 274,

59 
	mEQUAL
 = 275,

60 
	mDO
 = 276,

61 
	mCONST
 = 277

67 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


68 
	uYYSTYPE


74 
Symbﬁ
 
	msymbﬁ
;

80 } 
	tYYSTYPE
;

81 
	#YYSTYPE_IS_TRIVIAL
 1

	)

82 
	#yy°y≥
 
YYSTYPE


	)

83 
	#YYSTYPE_IS_DECLARED
 1

	)

86 
YYSTYPE
 
yylvÆ
;

	@ldpsyntax/ldp.y

7 
	~<°dio.h
>

8 
	~<°d¨g.h
>

9 
	~"ldp.h
"

11 
FILE
 *
yyö
;

12 
löíum
;

13 * 
‚ame
;

14 
TabÀ
 
symbﬁs
;

15 * 
yyãxt
;

16 
	gîr‹
 = 0;

19 
	$yyîr‹
 (* 
s
)

21 
	`Ârötf
 (
°dîr
, "%s:%d:%s\n", 
‚ame
, 
löíum
, 
s
);

22 
îr‹
 = 1;

23 
	}
}

26 
	$myîr‹
 (* 
s
, ...)

28 
va_li°
 
≠
;

29 
	`va_°¨t
(
≠
, 
s
);

30 
	`Ârötf
(
°dîr
, "%s:%d:", 
‚ame
, 
löíum
);

31 
	`vÂrötf
 (
°dîr
, 
s
, 
≠
);

32 
îr‹
 = 1;

33 
	`va_íd
(
≠
);

34 
	}
}

37 
	$ôy≥2°r
(
Ity≥
 
ty≥
)

39 
ty≥
)

41 
C⁄°
:  "Constant";

42 
Fun˘i⁄
:  "Function";

43 
Node
:  "Node";

44 
Fõld
:  "Field";

45 
Unknown
:  "Unknown";

48 
	}
}

51 
	$checkID
(
Symbﬁ
 
s
, 
Ity≥
 
ty≥
)

53 i‡(
s
->
ty≥
 =
Unknown
) {

54 
s
->
ty≥
 =Åype;

55 
	`Ârötf
(
°dîr
, "%d: Unknow¿idítifõ∏'%s',ássumög iài†®%s\n", 
löíum
, 
s
->
ãxt
, 
	`ôy≥2°r
(
ty≥
));

56 
îr‹
 = 1;

58 i‡(
s
->
ty≥
 !=Åype) {

59 
	`Ârötf
(
°dîr
, "%d: Ex≥˘edá %†idítifõr, in°ód foundÅhê%†'%s'\n", 
löíum
, 
	`ôy≥2°r
(
ty≥
), ity≥2°r(
s
->ty≥), s->
ãxt
);

60 
îr‹
 = 1;

62 
	}
}

65 
	$de˛¨eID
(
Symbﬁ
 
s
, 
Ity≥
 
ty≥
)

68 i‡(
s
->
ty≥
 !
Unknown
) {

69 
	`myîr‹
("%†'%s'Ñede˛¨ed\n", 
	`ôy≥2°r
(
ty≥
), 
s
->
ãxt
);

71 
s
->
ty≥
 =Åype;

72 
	}
}

76 %
îr‹
-
vîbo£


77 %
ex≥˘
 6

79 %
tokí
 
INTEGER


80 %
tokí
 
FLOAT


81 %
tokí
 
STRING


82 %
tokí
 
INCLUDE


83 %
tokí
 
TRUE


84 %
tokí
 
FALSE


85 %
tokí
 
FORALL


86 %
tokí
 
WHERE


87 %
tokí
 
SCALAR


88 %
tokí
 
IDENT


89 %
tokí
 
BINOP


90 %
tokí
 
MINUS


91 %
tokí
 
LPAR


92 %
tokí
 
RPAR


93 %
tokí
 
COMMA


94 %
tokí
 
DOT


95 %
tokí
 
SEMICOLON


96 %
tokí
 
EQUAL


97 %
tokí
 
DO


98 %
tokí
 
CONST


101 
Symbﬁ
 
symbﬁ
;

104 %
ty≥
 <
symbﬁ
> 
idítifõr


107 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

108 
¥ogøm
 : 
°mt_li°


111 
°mt_li°
 : stmt_li° 
°mt


112 | 
°mt


115 
°mt
 : 
s_ö˛ude
 
SEMICOLON
 { }

116 | 
s_de˛
 
SEMICOLON
 { }

117 | 
s_f‹Æl
 
SEMICOLON
 { }

118 | 
s_c⁄°
 
SEMICOLON
 { }

121 
s_ö˛ude
 : 
INCLUDE
 
STRING


123 
	`myîr‹
("ShouldÇot have gotten here: internalÉrror");

127 
s_de˛
 : 
SCALAR
 
idítifõr


129 
	`de˛¨eID
(
$2
, 
Fõld
);

131 | 
SCALAR
 
idítifõr
 
EQUAL
 
c⁄°™t


133 
	`de˛¨eID
(
$2
, 
Fõld
);

135 | 
SCALAR
 
idítifõr
 
EQUAL
 identifier

137 
	`de˛¨eID
(
$2
, 
Fõld
);

138 
	`checkID
(
$4
, 
C⁄°
);

140 | 
SCALAR
 
idítifõr
 
LPAR
 
f‹mÆs
 
RPAR


142 
	`de˛¨eID
(
$2
, 
Fun˘i⁄
);

144 | 
SCALAR
 
idítifõr
 
LPAR
 
RPAR


146 
	`de˛¨eID
(
$2
, 
Fun˘i⁄
);

150 
s_c⁄°
 : 
CONST
 
idítifõr
 
EQUAL
 
c⁄°™t


152 
	`de˛¨eID
(
$2
, 
C⁄°
);

156 
c⁄°™t
 : 
INTEGER


157 | 
FLOAT


158 | 
STRING


159 | 
TRUE


160 | 
FALSE


163 
s_f‹Æl
 : 
f‹Æl
 
blocks
 
WHERE
 
¥ediˇã
 
DO
 
a˘i⁄s


165 
	`p›W©îm¨k
(
symbﬁs
);

169 
f‹Æl
: 
FORALL


171 
	`pushW©îm¨k
(
symbﬁs
);

175 
blocks
 : 
LPAR
 
idít_li°
 
RPAR


178 
idít_li°
 : idít_li° 
COMMA
 
idítifõr


180 
	`de˛¨eID
(
$3
, 
Node
);

182 | 
idítifõr


184 
	`de˛¨eID
(
$1
, 
Node
);

188 
¥ediˇã
 : 
LPAR
Öªdiˇã 
RPAR


189 | 
c⁄°™t


190 | 
¥ediˇã
 
BINOP
Öredicate

191 | 
idítifõr
 
DOT
 identifier

193 
	`checkID
(
$1
, 
Node
);

194 
	`checkID
(
$3
, 
Fõld
);

196 | 
¥ediˇã
 
MINUS
Öredicate

197 | 
MINUS
 
¥ediˇã


198 | 
fˇŒ


199 | 
idítifõr


201 
Symbﬁ
 
s
 = 
$1
;

202 
	`checkID
(
s
, 
C⁄°
);

206 
¨gs
 :árg†
COMMA
 
¥ediˇã


207 | 
¥ediˇã


210 
f‹mÆs
 : f‹mÆ†
COMMA
 
IDENT


211 | 
IDENT


215 
a˘i⁄s
 :á˘i⁄†
COMMA
 
a˘i⁄


216 | 
a˘i⁄


219 
a˘i⁄
 : 
idítifõr
 
DOT
 idítifõ∏
EQUAL
 
¥ediˇã


221 
	`checkID
(
$1
, 
Node
);

222 
	`checkID
(
$3
, 
Fõld
);

224 | 
fˇŒ


227 
fˇŒ
 : 
idítifõr
 
DOT
 idítifõ∏
LPAR
 
¨gs
 
RPAR


229 
	`checkID
(
$1
, 
Node
);

230 
	`checkID
(
$3
, 
Fun˘i⁄
);

232 | 
idítifõr
 
DOT
 idítifõ∏
LPAR
 
RPAR


234 
	`checkID
(
$1
, 
Node
);

235 
	`checkID
(
$3
, 
Fun˘i⁄
);

239 
idítifõr
 : 
IDENT
 { 
$$
 = 
	`ö£π
(
symbﬁs
, 
yyãxt
); }

241 
	}
%%

244 
	$maö
–
¨gc
, 
¨gv
 )

245 
¨gc
;

246 **
¨gv
;

248 
	`öôTabÀ
();

249 
löíum
=1;

250 ++
¨gv
, --
¨gc
;

251 i‡–
¨gc
 > 0 ) {

252 
‚ame
 = 
	`°rdup
(
¨gv
[0]);

253 
yyö
 = 
	`f›í
–
‚ame
, "r" );

255 
‚ame
 = "*stdin*";

256 
yyö
 = 
°dö
;

259 
x
 = 
	`yy∑r£
 ();

261 i‡(
îr‹
) {

262 
	`Ârötf
(
°dîr
, "YourÖrogram had syntaxÉrrors\n");

264 
	`Ârötf
(
°dîr
, "YourÖrogramÖassedÅhe syntax check\n");

267  
x
;

268 
	}
}

	@ldpsyntax/scanner.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 5

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

91 #ifde‡
__˝lu•lus


94 
	#YY_USE_CONST


	)

99 #i‡
deföed
 (
__STDC__
)

101 
	#YY_USE_CONST


	)

106 #ifde‡
YY_USE_CONST


107 
	#yyc⁄°
 c⁄°

	)

109 
	#yyc⁄°


	)

113 
	#YY_NULL
 0

	)

120 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

126 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

132 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

133 
	#YYSTATE
 
YY_START


	)

136 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

139 
	#YY_NEW_FILE
 
	`yyª°¨t
(
yyö
 )

	)

141 
	#YY_END_OF_BUFFER_CHAR
 0

	)

144 #i‚de‡
YY_BUF_SIZE


145 #ifde‡
__ü64__


150 
	#YY_BUF_SIZE
 32768

	)

152 
	#YY_BUF_SIZE
 16384

	)

158 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

160 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


161 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

162 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

165 
yyÀng
;

167 
FILE
 *
yyö
, *
yyout
;

169 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

170 
	#EOB_ACT_END_OF_FILE
 1

	)

171 
	#EOB_ACT_LAST_MATCH
 2

	)

180 
	#YY_LESS_LINENO
(
n
) \

182 
yyl
;\

183  
yyl
 = 
n
; yy»< 
yyÀng
; ++yyl )\

184 i‡–
yyãxt
[
yyl
] == '\n' )\

185 --
yylöío
;\

186 }0)

	)

189 
	#yyÀss
(
n
) \

193 
yyÀss_ma¸o_¨g
 = (
n
); \

194 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

195 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

196 
YY_RESTORE_YY_MORE_OFFSET
 \

197 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

198 
YY_DO_BEFORE_ACTION
; \

200  0 )

	)

202 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

204 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


205 
	#YY_TYPEDEF_YY_SIZE_T


	)

206 
size_t
 
	tyy_size_t
;

209 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


210 
	#YY_STRUCT_YY_BUFFER_STATE


	)

211 
	syy_buf„r_°©e


213 
FILE
 *
	myy_öput_fûe
;

215 *
	myy_ch_buf
;

216 *
	myy_buf_pos
;

221 
yy_size_t
 
	myy_buf_size
;

226 
	myy_n_ch¨s
;

232 
	myy_is_our_buf„r
;

239 
	myy_is_öãø˘ive
;

245 
	myy_©_bﬁ
;

247 
	myy_bs_löío
;

248 
	myy_bs_cﬁumn
;

253 
	myy_fûl_buf„r
;

255 
	myy_buf„r_°©us
;

257 
	#YY_BUFFER_NEW
 0

	)

258 
	#YY_BUFFER_NORMAL
 1

	)

269 
	#YY_BUFFER_EOF_PENDING
 2

	)

275 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

276 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

277 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

285 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

286 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

287 : 
NULL
)

	)

292 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

295 
	gyy_hﬁd_ch¨
;

296 
	gyy_n_ch¨s
;

297 
	gyyÀng
;

300 *
	gyy_c_buf_p
 = (*) 0;

301 
	gyy_öô
 = 0;

302 
	gyy_°¨t
 = 0;

307 
	gyy_did_buf„r_swôch_⁄_eof
;

309 
yyª°¨t
 (
FILE
 *
öput_fûe
 );

310 
yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

311 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

312 
yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

313 
yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

314 
yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

315 
yyp›_buf„r_°©e
 ();

317 
yyísuª_buf„r_°ack
 ();

318 
yy_lﬂd_buf„r_°©e
 ();

319 
yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

321 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

323 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

324 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

325 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

327 *
yyÆloc
 (
yy_size_t
 );

328 *
yyªÆloc
 (*,
yy_size_t
 );

329 
yy‰ì
 (* );

331 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

333 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

335 i‡–! 
YY_CURRENT_BUFFER
 ){ \

336 
	`yyísuª_buf„r_°ack
 (); \

337 
YY_CURRENT_BUFFER_LVALUE
 = \

338 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

340 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

341 }

	)

343 
	#yy_£t_bﬁ
(
©_bﬁ
) \

345 i‡–! 
YY_CURRENT_BUFFER
 ){\

346 
	`yyísuª_buf„r_°ack
 (); \

347 
YY_CURRENT_BUFFER_LVALUE
 = \

348 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

350 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

351 }

	)

353 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

357 
	tYY_CHAR
;

359 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

361 
	tyy_°©e_ty≥
;

363 
yylöío
;

365 
	gyylöío
 = 1;

367 *
yyãxt
;

368 
	#yyãxt_±r
 
yyãxt


	)

370 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

371 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

372 
yy_gë_√xt_buf„r
 ();

373 
yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] );

378 
	#YY_DO_BEFORE_ACTION
 \

379 (
yyãxt_±r
Ë
yy_bp
; \

380 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

381 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

382 *
yy_˝
 = '\0'; \

383 (
yy_c_buf_p
Ë
yy_˝
;

	)

385 
	#YY_NUM_RULES
 40

	)

386 
	#YY_END_OF_BUFFER
 41

	)

389 
	syy_å™s_öfo


391 
Êex_öt32_t
 
	myy_vîify
;

392 
Êex_öt32_t
 
	myy_nxt
;

394 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ac˚±
[99] =

409 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

441 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[40] =

449 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[105] =

465 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[105] =

481 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[170] =

503 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[170] =

526 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ruÀ_ˇn_m©ch_eﬁ
[41] =

532 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

533 *
	gyy_œ°_ac˚±ög_˝os
;

535 
yy_Êex_debug
;

536 
	gyy_Êex_debug
 = 0;

541 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

542 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

543 
	#YY_MORE_ADJ
 0

	)

544 
	#YY_RESTORE_YY_MORE_OFFSET


	)

545 *
	gyyãxt
;

552 
	~<°dio.h
>

553 
	~"ldp.h
"

554 
	~"ldp.èb.h
"

555 
	glöíum
;

556 * 
	g‚ame
;

559 
	#MAX_INCLUDE_DEPTH
 10

	)

560 
YY_BUFFER_STATE
 
	gö˛ude_°ack
[
MAX_INCLUDE_DEPTH
];

561 
	gö˛ude_°ack_±r
 = 0;

562 °ru˘ { * 
	m‚ame
; 
	mlöíum
; } 
	gfûeöfo
[
MAX_INCLUDE_DEPTH
];

566 
	#INITIAL
 0

	)

567 
	#ö˛
 1

	)

568 
	#ö˛«me
 2

	)

569 
	#ö˛d⁄e
 3

	)

571 #i‚de‡
YY_NO_UNISTD_H


576 
	~<uni°d.h
>

579 #i‚de‡
YY_EXTRA_TYPE


580 
	#YY_EXTRA_TYPE
 *

	)

583 
yy_öô_globÆs
 ();

588 
yyÀx_de°roy
 ();

590 
yygë_debug
 ();

592 
yy£t_debug
 (
debug_Êag
 );

594 
YY_EXTRA_TYPE
 
yygë_exåa
 ();

596 
yy£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

598 
FILE
 *
yygë_ö
 ();

600 
yy£t_ö
 (
FILE
 * 
ö_°r
 );

602 
FILE
 *
yygë_out
 ();

604 
yy£t_out
 (
FILE
 * 
out_°r
 );

606 
yygë_Àng
 ();

608 *
yygë_ãxt
 ();

610 
yygë_löío
 ();

612 
yy£t_löío
 (
löe_numbî
 );

614 
YYSTYPE
 * 
yygë_lvÆ
 ();

616 
yy£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 );

622 #i‚de‡
YY_SKIP_YYWRAP


623 #ifde‡
__˝lu•lus


624 "C" 
yywøp
 ();

626 
yywøp
 ();

630 
yyu≈ut
 (
c
,*
buf_±r
 );

632 #i‚de‡
yyãxt_±r


633 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

636 #ifde‡
YY_NEED_STRLEN


637 
yy_Êex_°æí
 (
yyc⁄°
 * );

640 #i‚de‡
YY_NO_INPUT


642 #ifde‡
__˝lu•lus


643 
yyöput
 ();

645 
öput
 ();

651 #i‚de‡
YY_READ_BUF_SIZE


652 #ifde‡
__ü64__


654 
	#YY_READ_BUF_SIZE
 16384

	)

656 
	#YY_READ_BUF_SIZE
 8192

	)

661 #i‚de‡
ECHO


665 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

671 #i‚de‡
YY_INPUT


672 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

673 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

675 
c
 = '*'; \

676 
size_t
 
n
; \

677  
n
 = 0;Ç < 
max_size
 && \

678 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

679 
buf
[
n
] = (Ë
c
; \

680 i‡–
c
 == '\n' ) \

681 
buf
[
n
++] = (Ë
c
; \

682 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

683 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

684 
ªsu…
 = 
n
; \

688 
î∫o
=0; \

689  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

691 if–
î∫o
 !
EINTR
) \

693 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

696 
î∫o
=0; \

697 
	`˛óªº
(
yyö
); \

701 

	)

708 #i‚de‡
yyãrmö©e


709 
	#yyãrmö©e
(Ë 
YY_NULL


	)

713 #i‚de‡
YY_START_STACK_INCR


714 
	#YY_START_STACK_INCR
 25

	)

718 #i‚de‡
YY_FATAL_ERROR


719 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

727 #i‚de‡
YY_DECL


728 
	#YY_DECL_IS_OURS
 1

	)

730 
yyÀx
 \

731 (
YYSTYPE
 * 
yylvÆ_∑øm
 );

733 
	#YY_DECL
 
yyÀx
 \

734 (
YYSTYPE
 * 
yylvÆ_∑øm
 )

	)

740 #i‚de‡
YY_USER_ACTION


741 
	#YY_USER_ACTION


	)

745 #i‚de‡
YY_BREAK


746 
	#YY_BREAK
 ;

	)

749 
	#YY_RULE_SETUP
 \

750 
YY_USER_ACTION


	)

754 
	gYY_DECL


756 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

757 *
	gyy_˝
, *
	gyy_bp
;

758 
	gyy_a˘
;

760 
YYSTYPE
 * 
	gyylvÆ
;

767 
	gyylvÆ
 = 
yylvÆ_∑øm
;

769 i‡–!(
	gyy_öô
) )

771 (
	gyy_öô
) = 1;

773 #ifde‡
YY_USER_INIT


774 
	gYY_USER_INIT
;

777 i‡–! (
	gyy_°¨t
) )

778 (
	gyy_°¨t
) = 1;

780 i‡–! 
	gyyö
 )

781 
	gyyö
 = 
°dö
;

783 i‡–! 
	gyyout
 )

784 
	gyyout
 = 
°dout
;

786 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

787 
yyísuª_buf„r_°ack
 ();

788 
	gYY_CURRENT_BUFFER_LVALUE
 =

789 
yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

792 
yy_lﬂd_buf„r_°©e
( );

797 
	gyy_˝
 = (
yy_c_buf_p
);

800 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

805 
	gyy_bp
 = 
yy_˝
;

807 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

808 
	gyy_m©ch
:

811 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

812 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

814 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

815 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

817  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

819 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

820 i‡–
	gyy_cuºít_°©e
 >= 99 )

821 
yy_c
 = 
yy_mëa
[() yy_c];

823 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

824 ++
	gyy_˝
;

826  
	gyy_ba£
[
yy_cuºít_°©e
] != 130 );

828 
	gyy_föd_a˘i⁄
:

829 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

830 i‡–
	gyy_a˘
 == 0 )

832 
yy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

833 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

834 
	gyy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

837 
	gYY_DO_BEFORE_ACTION
;

839 i‡–
	gyy_a˘
 !
YY_END_OF_BUFFER
 && 
yy_ruÀ_ˇn_m©ch_eﬁ
[
yy_a˘
] )

841 
yyl
;

842  
	gyyl
 = 0; yy»< 
	gyyÀng
; ++yyl )

843 i‡–
	gyyãxt
[
yyl
] == '\n' )

845 
yylöío
++;

849 
	gdo_a˘i⁄
:

851  
yy_a˘
 )

855 *
yy_˝
 = (
yy_hﬁd_ch¨
);

856 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

857 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

858 
	gyy_föd_a˘i⁄
;

861 
YY_RULE_SETUP


863  
INTEGER
;

864 
YY_BREAK


866 
YY_RULE_SETUP


868  
INTEGER
;

869 
YY_BREAK


871 
YY_RULE_SETUP


873  
FLOAT
;

874 
YY_BREAK


876 
YY_RULE_SETUP


878  
FLOAT
;

879 
YY_BREAK


882 
YY_RULE_SETUP


884  
STRING
;

885 
YY_BREAK


887 
YY_RULE_SETUP


889  
CONST
;

890 
YY_BREAK


892 
YY_RULE_SETUP


894  
DO
;

895 
YY_BREAK


897 
YY_RULE_SETUP


899 
BEGIN
(
ö˛
);

900 
YY_BREAK


902 
YY_RULE_SETUP


904  
TRUE
;

905 
YY_BREAK


907 
YY_RULE_SETUP


909  
FALSE
;

910 
YY_BREAK


912 
YY_RULE_SETUP


914  
FORALL
;

915 
YY_BREAK


917 
YY_RULE_SETUP


919  
WHERE
;

920 
YY_BREAK


922 
YY_RULE_SETUP


924  
SCALAR
;

925 
YY_BREAK


927 
YY_RULE_SETUP


929  
IDENT
;

930 
YY_BREAK


932 
YY_RULE_SETUP


934  
BINOP
;

935 
YY_BREAK


937 
YY_RULE_SETUP


939  
MINUS
;

940 
YY_BREAK


942 
YY_RULE_SETUP


944  
BINOP
;

945 
YY_BREAK


947 
YY_RULE_SETUP


949  
BINOP
;

950 
YY_BREAK


952 
YY_RULE_SETUP


954  
BINOP
;

955 
YY_BREAK


957 
YY_RULE_SETUP


959  
BINOP
;

960 
YY_BREAK


962 
YY_RULE_SETUP


964  
BINOP
;

965 
YY_BREAK


967 
YY_RULE_SETUP


969  
BINOP
;

970 
YY_BREAK


972 
YY_RULE_SETUP


974  
BINOP
;

975 
YY_BREAK


977 
YY_RULE_SETUP


979  
BINOP
;

980 
YY_BREAK


982 
YY_RULE_SETUP


984  
BINOP
;

985 
YY_BREAK


987 
YY_RULE_SETUP


989  
EQUAL
;

990 
YY_BREAK


992 
YY_RULE_SETUP


994  
LPAR
;

995 
YY_BREAK


997 
YY_RULE_SETUP


999  
RPAR
;

1000 
YY_BREAK


1002 
YY_RULE_SETUP


1004  
COMMA
;

1005 
YY_BREAK


1007 
YY_RULE_SETUP


1009  
BINOP
;

1010 
YY_BREAK


1012 
YY_RULE_SETUP


1014  
DOT
;

1015 
YY_BREAK


1017 
YY_RULE_SETUP


1019  
SEMICOLON
;

1020 
YY_BREAK


1023 
YY_RULE_SETUP


1025 
löíum
++;

1026 
YY_BREAK


1028 
YY_RULE_SETUP


1031 
YY_BREAK


1034 
YY_RULE_SETUP


1036 
löíum
++;

1037 
YY_BREAK


1039 
YY_RULE_SETUP


1041 
BEGIN
(
ö˛«me
);

1042 
YY_BREAK


1045 
YY_RULE_SETUP


1049 i‡–
ö˛ude_°ack_±r
 >
MAX_INCLUDE_DEPTH
 ) {

1050 
myîr‹
("In˛ude†√°edÅoÿdì∂y whí in˛udög '%s'\n", 
yyãxt
);

1053 
	gö˛ude_°ack
[
ö˛ude_°ack_±r
] = 
YY_CURRENT_BUFFER
;

1054 
	gfûeöfo
[
ö˛ude_°ack_±r
].
	glöíum
 = 
löíum
;

1055 
	gfûeöfo
[
ö˛ude_°ack_±r
].
	g‚ame
 = 
‚ame
;

1056 
	gö˛ude_°ack_±r
++;

1058 
	gyyö
 = 
f›í
–
yyãxt
, "r" );

1059 i‡–! 
	gyyö
 )

1060 
myîr‹
("C™nŸ o≥¿ö˛udêfûê'%s'\n", 
yyãxt
);

1062 
	g‚ame
 = 
°rdup
(
yyãxt
);

1063 
	glöíum
 = 1;

1065 
yy_swôch_to_buf„r
(
yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ));

1067 
BEGIN
(
INITIAL
);

1069 
YY_BREAK


1070 
YY_STATE_EOF
(
INITIAL
):

1071 
YY_STATE_EOF
(
ö˛
):

1072 
YY_STATE_EOF
(
ö˛«me
):

1073 
YY_STATE_EOF
(
ö˛d⁄e
):

1076 i‡–--
ö˛ude_°ack_±r
 < 0 ) {

1077 
yyãrmö©e
();

1079 
yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1080 
yy_swôch_to_buf„r
(
ö˛ude_°ack
[
ö˛ude_°ack_±r
] );

1081 
	g‚ame
 = 
fûeöfo
[
ö˛ude_°ack_±r
].
‚ame
;

1082 
	glöíum
 = 
fûeöfo
[
ö˛ude_°ack_±r
].
löíum
;

1084 
BEGIN
(
ö˛d⁄e
);

1086 
YY_BREAK


1088 
YY_RULE_SETUP


1090 
BEGIN
(
INITIAL
);

1091 
YY_BREAK


1093 
YY_RULE_SETUP


1095 
¥ötf
–"Uƒecognized ch¨a˘î: [%s]\n", 
yyãxt
 );

1096 
YY_BREAK


1098 
YY_RULE_SETUP


1100 
ECHO
;

1101 
	gYY_BREAK


1104 
	gYY_END_OF_BUFFER
:

1107 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

1110 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1111 
YY_RESTORE_YY_MORE_OFFSET


1113 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

1124 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1125 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

1126 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

1136 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1138 
yy_°©e_ty≥
 
yy_√xt_°©e
;

1140 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1142 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1153 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

1155 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1157 i‡–
	gyy_√xt_°©e
 )

1160 
	gyy_˝
 = ++(
yy_c_buf_p
);

1161 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

1162 
	gyy_m©ch
;

1167 
	gyy_˝
 = (
yy_c_buf_p
);

1168 
	gyy_föd_a˘i⁄
;

1172  
yy_gë_√xt_buf„r
( ) )

1174 
	gEOB_ACT_END_OF_FILE
:

1176 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

1178 i‡–
yywøp
( ) )

1189 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1191 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

1192 
	gdo_a˘i⁄
;

1197 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

1198 
	gYY_NEW_FILE
;

1203 
	gEOB_ACT_CONTINUE_SCAN
:

1204 (
yy_c_buf_p
) =

1205 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

1207 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1209 
	gyy_˝
 = (
yy_c_buf_p
);

1210 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1211 
	gyy_m©ch
;

1213 
	gEOB_ACT_LAST_MATCH
:

1214 (
yy_c_buf_p
) =

1215 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

1217 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

1219 
	gyy_˝
 = (
yy_c_buf_p
);

1220 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

1221 
	gyy_föd_a˘i⁄
;

1227 
YY_FATAL_ERROR
(

1240 
	$yy_gë_√xt_buf„r
 ()

1242 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

1243 *
sour˚
 = (
yyãxt_±r
);

1244 
numbî_to_move
, 
i
;

1245 
ªt_vÆ
;

1247 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

1248 
	`YY_FATAL_ERROR
(

1251 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

1253 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

1258  
EOB_ACT_END_OF_FILE
;

1266  
EOB_ACT_LAST_MATCH
;

1273 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

1275  
i
 = 0; i < 
numbî_to_move
; ++i )

1276 *(
de°
++Ë*(
sour˚
++);

1278 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

1282 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

1286 
num_to_ªad
 =

1287 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

1289  
num_to_ªad
 <= 0 )

1293 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

1295 
yy_c_buf_p_off£t
 =

1296 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

1298 i‡–
b
->
yy_is_our_buf„r
 )

1300 
√w_size
 = 
b
->
yy_buf_size
 * 2;

1302 i‡–
√w_size
 <= 0 )

1303 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

1305 
b
->
yy_buf_size
 *= 2;

1307 
b
->
yy_ch_buf
 = (*)

1309 
	`yyªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

1313 
b
->
yy_ch_buf
 = 0;

1315 i‡–! 
b
->
yy_ch_buf
 )

1316 
	`YY_FATAL_ERROR
(

1319 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

1321 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

1322 
numbî_to_move
 - 1;

1326 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

1327 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

1330 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

1331 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

1333 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1336 i‡–(
yy_n_ch¨s
) == 0 )

1338 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

1340 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

1341 
	`yyª°¨t
(
yyö
 );

1346 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

1347 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

1348 
YY_BUFFER_EOF_PENDING
;

1353 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

1355 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

1357 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

1358 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

1359 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1360 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

1363 (
yy_n_ch¨s
Ë+
numbî_to_move
;

1364 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

1365 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

1367 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

1369  
ªt_vÆ
;

1370 
	}
}

1374 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

1376 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

1377 *
yy_˝
;

1379 
yy_cuºít_°©e
 = (
yy_°¨t
);

1381  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

1383 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

1384 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1386 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1387 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1389  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1391 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1392 i‡–
yy_cuºít_°©e
 >= 99 )

1393 
yy_c
 = 
yy_mëa
[() yy_c];

1395 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1398  
yy_cuºít_°©e
;

1399 
	}
}

1406 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

1408 
yy_is_jam
;

1409 *
yy_˝
 = (
yy_c_buf_p
);

1411 
YY_CHAR
 
yy_c
 = 1;

1412 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

1414 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1415 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1417  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

1419 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1420 i‡–
yy_cuºít_°©e
 >= 99 )

1421 
yy_c
 = 
yy_mëa
[() yy_c];

1423 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

1424 
yy_is_jam
 = (
yy_cuºít_°©e
 == 98);

1426  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

1427 
	}
}

1429 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

1431 *
yy_˝
;

1433 
yy_˝
 = (
yy_c_buf_p
);

1436 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1438 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1441 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

1442 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

1443 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

1444 *
sour˚
 =

1445 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

1447  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

1448 *--
de°
 = *--
sour˚
;

1450 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

1451 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

1452 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

1453 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

1455 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

1456 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

1459 *--
yy_˝
 = (Ë
c
;

1461 i‡–
c
 == '\n' ){

1462 --
yylöío
;

1465 (
yyãxt_±r
Ë
yy_bp
;

1466 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

1467 (
yy_c_buf_p
Ë
yy_˝
;

1468 
	}
}

1470 #i‚de‡
YY_NO_INPUT


1471 #ifde‡
__˝lu•lus


1472 
	$yyöput
 ()

1474 
	$öput
 ()

1478 
c
;

1480 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1482 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

1488 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

1490 *(
yy_c_buf_p
) = '\0';

1494 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

1495 ++(
yy_c_buf_p
);

1497  
	`yy_gë_√xt_buf„r
( ) )

1499 
EOB_ACT_LAST_MATCH
:

1511 
	`yyª°¨t
(
yyö
 );

1515 
EOB_ACT_END_OF_FILE
:

1517 i‡–
	`yywøp
( ) )

1518  
EOF
;

1520 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

1521 
YY_NEW_FILE
;

1522 #ifde‡
__˝lu•lus


1523  
	`yyöput
();

1525  
	`öput
();

1529 
EOB_ACT_CONTINUE_SCAN
:

1530 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

1536 
c
 = *(*Ë(
yy_c_buf_p
);

1537 *(
yy_c_buf_p
) = '\0';

1538 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

1540 i‡–
c
 == '\n' )

1542 
yylöío
++;

1545  
c
;

1546 
	}
}

1554 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

1557 i‡–! 
YY_CURRENT_BUFFER
 ){

1558 
	`yyísuª_buf„r_°ack
 ();

1559 
YY_CURRENT_BUFFER_LVALUE
 =

1560 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

1563 
	`yy_öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

1564 
	`yy_lﬂd_buf„r_°©e
( );

1565 
	}
}

1571 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1579 
	`yyísuª_buf„r_°ack
 ();

1580 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

1583 i‡–
YY_CURRENT_BUFFER
 )

1586 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1587 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1588 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1591 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1592 
	`yy_lﬂd_buf„r_°©e
( );

1599 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1600 
	}
}

1602 
	$yy_lﬂd_buf„r_°©e
 ()

1604 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

1605 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

1606 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

1607 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

1608 
	}
}

1616 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

1618 
YY_BUFFER_STATE
 
b
;

1620 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

1621 i‡–! 
b
 )

1622 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1624 
b
->
yy_buf_size
 = 
size
;

1629 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
(b->
yy_buf_size
 + 2 );

1630 i‡–! 
b
->
yy_ch_buf
 )

1631 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

1633 
b
->
yy_is_our_buf„r
 = 1;

1635 
	`yy_öô_buf„r
(
b
,
fûe
 );

1637  
b
;

1638 
	}
}

1644 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1647 i‡–! 
b
 )

1650 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1651 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

1653 i‡–
b
->
yy_is_our_buf„r
 )

1654 
	`yy‰ì
((*Ë
b
->
yy_ch_buf
 );

1656 
	`yy‰ì
((*Ë
b
 );

1657 
	}
}

1659 #i‚de‡
__˝lu•lus


1660 
ißây
 ();

1667 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

1670 
€ºno
 = 
î∫o
;

1672 
	`yy_Êush_buf„r
(
b
 );

1674 
b
->
yy_öput_fûe
 = 
fûe
;

1675 
b
->
yy_fûl_buf„r
 = 1;

1681 i‡(
b
 !
YY_CURRENT_BUFFER
){

1682 
b
->
yy_bs_löío
 = 1;

1683 
b
->
yy_bs_cﬁumn
 = 0;

1686 
b
->
yy_is_öãø˘ive
 = 
fûe
 ? (
	`ißây
–
	`fûío
(file) ) > 0) : 0;

1688 
î∫o
 = 
€ºno
;

1689 
	}
}

1695 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

1697 i‡–! 
b
 )

1700 
b
->
yy_n_ch¨s
 = 0;

1706 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

1707 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

1709 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

1711 
b
->
yy_©_bﬁ
 = 1;

1712 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1714 i‡–
b
 =
YY_CURRENT_BUFFER
 )

1715 
	`yy_lﬂd_buf„r_°©e
( );

1716 
	}
}

1724 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

1726 i‡(
√w_buf„r
 =
NULL
)

1729 
	`yyísuª_buf„r_°ack
();

1732 i‡–
YY_CURRENT_BUFFER
 )

1735 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

1736 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

1737 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

1741 i‡(
YY_CURRENT_BUFFER
)

1742 (
yy_buf„r_°ack_t›
)++;

1743 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

1746 
	`yy_lﬂd_buf„r_°©e
( );

1747 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1748 
	}
}

1754 
	$yyp›_buf„r_°©e
 ()

1756 i‡(!
YY_CURRENT_BUFFER
)

1759 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

1760 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

1761 i‡((
yy_buf„r_°ack_t›
) > 0)

1762 --(
yy_buf„r_°ack_t›
);

1764 i‡(
YY_CURRENT_BUFFER
) {

1765 
	`yy_lﬂd_buf„r_°©e
( );

1766 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

1768 
	}
}

1773 
	$yyísuª_buf„r_°ack
 ()

1775 
num_to_Æloc
;

1777 i‡(!(
yy_buf„r_°ack
)) {

1783 
num_to_Æloc
 = 1;

1784 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


1785 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1787 i‡–! (
yy_buf„r_°ack
) )

1788 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1790 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

1792 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1793 (
yy_buf„r_°ack_t›
) = 0;

1797 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

1800 
grow_size
 = 8 ;

1802 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

1803 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


1804 ((
yy_buf„r_°ack
),

1805 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

1807 i‡–! (
yy_buf„r_°ack
) )

1808 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

1811 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

1812 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

1814 
	}
}

1822 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

1824 
YY_BUFFER_STATE
 
b
;

1826 i‡–
size
 < 2 ||

1827 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

1828 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

1832 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

1833 i‡–! 
b
 )

1834 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

1836 
b
->
yy_buf_size
 = 
size
 - 2;

1837 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

1838 
b
->
yy_is_our_buf„r
 = 0;

1839 
b
->
yy_öput_fûe
 = 0;

1840 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

1841 
b
->
yy_is_öãø˘ive
 = 0;

1842 
b
->
yy_©_bﬁ
 = 1;

1843 
b
->
yy_fûl_buf„r
 = 0;

1844 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

1846 
	`yy_swôch_to_buf„r
(
b
 );

1848  
b
;

1849 
	}
}

1859 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

1862  
	`yy_sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

1863 
	}
}

1872 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

1874 
YY_BUFFER_STATE
 
b
;

1875 *
buf
;

1876 
yy_size_t
 
n
;

1877 
i
;

1880 
n
 = 
_yybyãs_Àn
 + 2;

1881 
buf
 = (*Ë
	`yyÆloc
(
n
 );

1882 i‡–! 
buf
 )

1883 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

1885  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

1886 
buf
[
i
] = 
yybyãs
[i];

1888 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

1890 
b
 = 
	`yy_sˇn_buf„r
(
buf
,
n
 );

1891 i‡–! 
b
 )

1892 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

1897 
b
->
yy_is_our_buf„r
 = 1;

1899  
b
;

1900 
	}
}

1902 #i‚de‡
YY_EXIT_FAILURE


1903 
	#YY_EXIT_FAILURE
 2

	)

1906 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

1908 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

1909 
	`exô
–
YY_EXIT_FAILURE
 );

1910 
	}
}

1914 #unde‡
yyÀss


1915 
	#yyÀss
(
n
) \

1919 
yyÀss_ma¸o_¨g
 = (
n
); \

1920 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

1921 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

1922 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

1923 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

1924 *(
yy_c_buf_p
) = '\0'; \

1925 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

1927  0 )

	)

1934 
	$yygë_löío
 ()

1937  
yylöío
;

1938 
	}
}

1943 
FILE
 *
	$yygë_ö
 ()

1945  
yyö
;

1946 
	}
}

1951 
FILE
 *
	$yygë_out
 ()

1953  
yyout
;

1954 
	}
}

1959 
	$yygë_Àng
 ()

1961  
yyÀng
;

1962 
	}
}

1968 *
	$yygë_ãxt
 ()

1970  
yyãxt
;

1971 
	}
}

1977 
	$yy£t_löío
 (
löe_numbî
 )

1980 
yylöío
 = 
löe_numbî
;

1981 
	}
}

1989 
	$yy£t_ö
 (
FILE
 * 
ö_°r
 )

1991 
yyö
 = 
ö_°r
 ;

1992 
	}
}

1994 
	$yy£t_out
 (
FILE
 * 
out_°r
 )

1996 
yyout
 = 
out_°r
 ;

1997 
	}
}

1999 
	$yygë_debug
 ()

2001  
yy_Êex_debug
;

2002 
	}
}

2004 
	$yy£t_debug
 (
bdebug
 )

2006 
yy_Êex_debug
 = 
bdebug
 ;

2007 
	}
}

2009 
	$yy_öô_globÆs
 ()

2016 
yylöío
 = 1;

2018 (
yy_buf„r_°ack
) = 0;

2019 (
yy_buf„r_°ack_t›
) = 0;

2020 (
yy_buf„r_°ack_max
) = 0;

2021 (
yy_c_buf_p
) = (*) 0;

2022 (
yy_öô
) = 0;

2023 (
yy_°¨t
) = 0;

2026 #ifde‡
YY_STDINIT


2027 
yyö
 = 
°dö
;

2028 
yyout
 = 
°dout
;

2030 
yyö
 = (
FILE
 *) 0;

2031 
yyout
 = (
FILE
 *) 0;

2038 
	}
}

2041 
	$yyÀx_de°roy
 ()

2045 
YY_CURRENT_BUFFER
){

2046 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

2047 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2048 
	`yyp›_buf„r_°©e
();

2052 
	`yy‰ì
((
yy_buf„r_°ack
) );

2053 (
yy_buf„r_°ack
Ë
NULL
;

2057 
	`yy_öô_globÆs
( );

2060 
	}
}

2066 #i‚de‡
yyãxt_±r


2067 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

2069 
i
;

2070  
i
 = 0; i < 
n
; ++i )

2071 
s1
[
i
] = 
s2
[i];

2072 
	}
}

2075 #ifde‡
YY_NEED_STRLEN


2076 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

2078 
n
;

2079  
n
 = 0; 
s
[n]; ++n )

2082  
n
;

2083 
	}
}

2086 *
	$yyÆloc
 (
yy_size_t
 
size
 )

2088  (*Ë
	`mÆloc
–
size
 );

2089 
	}
}

2091 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

2100  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

2101 
	}
}

2103 
	$yy‰ì
 (* 
±r
 )

2105 
	`‰ì
–(*Ë
±r
 );

2106 
	}
}

2108 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@ldpsyntax/scanner.h

1 #i‚de‡
yyHEADER_H


2 
	#yyHEADER_H
 1

	)

3 
	#yyIN_HEADER
 1

	)

9 
	#YY_INT_ALIGNED
 

	)

13 
	#FLEX_SCANNER


	)

14 
	#YY_FLEX_MAJOR_VERSION
 2

	)

15 
	#YY_FLEX_MINOR_VERSION
 5

	)

16 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

17 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

18 
	#FLEX_BETA


	)

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

27 
	~<°dlib.h
>

33 #i‚de‡
FLEXINT_H


34 
	#FLEXINT_H


	)

38 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

43 #i‚de‡
__STDC_LIMIT_MACROS


44 
	#__STDC_LIMIT_MACROS
 1

	)

47 
	~<öây≥s.h
>

48 
öt8_t
 
	tÊex_öt8_t
;

49 
uöt8_t
 
	tÊex_uöt8_t
;

50 
öt16_t
 
	tÊex_öt16_t
;

51 
uöt16_t
 
	tÊex_uöt16_t
;

52 
öt32_t
 
	tÊex_öt32_t
;

53 
uöt32_t
 
	tÊex_uöt32_t
;

55 sig√d 
	tÊex_öt8_t
;

56 
	tÊex_öt16_t
;

57 
	tÊex_öt32_t
;

58 
	tÊex_uöt8_t
;

59 
	tÊex_uöt16_t
;

60 
	tÊex_uöt32_t
;

63 #i‚de‡
INT8_MIN


64 
	#INT8_MIN
 (-128)

	)

66 #i‚de‡
INT16_MIN


67 
	#INT16_MIN
 (-32767-1)

	)

69 #i‚de‡
INT32_MIN


70 
	#INT32_MIN
 (-2147483647-1)

	)

72 #i‚de‡
INT8_MAX


73 
	#INT8_MAX
 (127)

	)

75 #i‚de‡
INT16_MAX


76 
	#INT16_MAX
 (32767)

	)

78 #i‚de‡
INT32_MAX


79 
	#INT32_MAX
 (2147483647)

	)

81 #i‚de‡
UINT8_MAX


82 
	#UINT8_MAX
 (255U)

	)

84 #i‚de‡
UINT16_MAX


85 
	#UINT16_MAX
 (65535U)

	)

87 #i‚de‡
UINT32_MAX


88 
	#UINT32_MAX
 (4294967295U)

	)

95 #ifde‡
__˝lu•lus


98 
	#YY_USE_CONST


	)

103 #i‡
deföed
 (
__STDC__
)

105 
	#YY_USE_CONST


	)

110 #ifde‡
YY_USE_CONST


111 
	#yyc⁄°
 c⁄°

	)

113 
	#yyc⁄°


	)

117 #i‚de‡
YY_BUF_SIZE


118 #ifde‡
__ü64__


123 
	#YY_BUF_SIZE
 32768

	)

125 
	#YY_BUF_SIZE
 16384

	)

129 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


130 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

131 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

134 
yyÀng
;

136 
FILE
 *
yyö
, *
yyout
;

138 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


139 
	#YY_TYPEDEF_YY_SIZE_T


	)

140 
size_t
 
	tyy_size_t
;

143 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


144 
	#YY_STRUCT_YY_BUFFER_STATE


	)

145 
	syy_buf„r_°©e


147 
FILE
 *
	myy_öput_fûe
;

149 *
	myy_ch_buf
;

150 *
	myy_buf_pos
;

155 
yy_size_t
 
	myy_buf_size
;

160 
	myy_n_ch¨s
;

166 
	myy_is_our_buf„r
;

173 
	myy_is_öãø˘ive
;

179 
	myy_©_bﬁ
;

181 
	myy_bs_löío
;

182 
	myy_bs_cﬁumn
;

187 
	myy_fûl_buf„r
;

189 
	myy_buf„r_°©us
;

194 
yyª°¨t
 (
FILE
 *
öput_fûe
 );

195 
yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

196 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

197 
yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

198 
yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

199 
yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

200 
yyp›_buf„r_°©e
 ();

202 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

203 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

204 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

206 *
yyÆloc
 (
yy_size_t
 );

207 *
yyªÆloc
 (*,
yy_size_t
 );

208 
yy‰ì
 (* );

212 
yylöío
;

214 *
yyãxt
;

215 
	#yyãxt_±r
 
yyãxt


	)

217 #ifde‡
YY_HEADER_EXPORT_START_CONDITIONS


218 
	#INITIAL
 0

	)

219 
	#ö˛
 1

	)

220 
	#ö˛«me
 2

	)

221 
	#ö˛d⁄e
 3

	)

225 #i‚de‡
YY_NO_UNISTD_H


230 
	~<uni°d.h
>

233 #i‚de‡
YY_EXTRA_TYPE


234 
	#YY_EXTRA_TYPE
 *

	)

240 
yyÀx_de°roy
 ();

242 
yygë_debug
 ();

244 
yy£t_debug
 (
debug_Êag
 );

246 
YY_EXTRA_TYPE
 
yygë_exåa
 ();

248 
yy£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

250 
FILE
 *
yygë_ö
 ();

252 
yy£t_ö
 (
FILE
 * 
ö_°r
 );

254 
FILE
 *
yygë_out
 ();

256 
yy£t_out
 (
FILE
 * 
out_°r
 );

258 
yygë_Àng
 ();

260 *
yygë_ãxt
 ();

262 
yygë_löío
 ();

264 
yy£t_löío
 (
löe_numbî
 );

266 
YYSTYPE
 * 
yygë_lvÆ
 ();

268 
yy£t_lvÆ
 (
YYSTYPE
 * 
yylvÆ_∑øm
 );

274 #i‚de‡
YY_SKIP_YYWRAP


275 #ifde‡
__˝lu•lus


276 "C" 
yywøp
 ();

278 
yywøp
 ();

282 #i‚de‡
yyãxt_±r


283 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

286 #ifde‡
YY_NEED_STRLEN


287 
yy_Êex_°æí
 (
yyc⁄°
 * );

290 #i‚de‡
YY_NO_INPUT


295 #i‚de‡
YY_READ_BUF_SIZE


296 #ifde‡
__ü64__


298 
	#YY_READ_BUF_SIZE
 16384

	)

300 
	#YY_READ_BUF_SIZE
 8192

	)

305 #i‚de‡
YY_START_STACK_INCR


306 
	#YY_START_STACK_INCR
 25

	)

312 #i‚de‡
YY_DECL


313 
	#YY_DECL_IS_OURS
 1

	)

315 
yyÀx
 \

316 (
YYSTYPE
 * 
yylvÆ_∑øm
 );

318 
	#YY_DECL
 
yyÀx
 \

319 (
YYSTYPE
 * 
yylvÆ_∑øm
 )

	)

324 #unde‡
YY_NEW_FILE


325 #unde‡
YY_FLUSH_BUFFER


326 #unde‡
yy_£t_bﬁ


327 #unde‡
yy_√w_buf„r


328 #unde‡
yy_£t_öãø˘ive


329 #unde‡
YY_DO_BEFORE_ACTION


331 #ifde‡
YY_DECL_IS_OURS


332 #unde‡
YY_DECL_IS_OURS


333 #unde‡
YY_DECL


340 #unde‡
yyIN_HEADER


	@ldpsyntax/table.c

1 
	~<°dio.h
>

2 
	~"ldp.h
"

4 
TabÀ
 
	gsymbﬁs
;

7 
	$hash
(* 
x
, 
mod
)

9 
v
 = *++
x
;

10 *
x
 != 0) {

11 
v
 **
x
;

12 
x
++;

14  
v
 % 
mod
;

15 
	}
}

17 
	$öôTabÀ
()

19 
symbﬁs
 = 
	`ˇŒoc
(1, (
hashèbÀ
));

20 
symbﬁs
->
size
 = 1023;

21 
symbﬁs
->
íåõs
 = 0;

22 
symbﬁs
->
w©îm¨k
 = 0;

23 
symbﬁs
->
d©a
 = 
	`ˇŒoc
(symbﬁs->
size
, (
Symbﬁ
));

24 
	}
}

26 
Symbﬁ


27 
	$lookup
(
TabÀ
 
t
, * 
vÆ
)

29 
h
 = 
	`hash
(
vÆ
, 
t
->
size
);

30 
Symbﬁ
 
li°
 = 
t
->
d©a
[
h
];

31 (
li°
 !0Ë&& (
	`°rcmp
÷i°->
ãxt
, 
vÆ
Ë!0)Ëli° =Üi°->
√xt
;

32  
li°
;

33 
	}
}

35 
Symbﬁ


36 
	$ö£π
(
TabÀ
 
t
, * 
vÆ
)

38 
Symbﬁ
 
li°
 = 
	`lookup
(
t
, 
vÆ
);

39 i‡(
li°
 == 0) {

40 
Symbﬁ
 
s
 = 
	`ˇŒoc
(1, (
symbﬁ
));

41 
s
->
ãxt
 = 
	`°rdup
(
vÆ
);

42 
s
->
ty≥
 = 
Unknown
;

43 
s
->
w©îm¨k
 = 
t
->watermark;

44 
h
 = 
	`hash
(
vÆ
, 
t
->
size
);

45 
s
->
√xt
 = 
t
->
d©a
[
h
];

46 
t
->
d©a
[
h
] = 
s
;

47 
t
->
íåõs
++;

48 
li°
 = 
s
;

50  
li°
;

51 
	}
}

54 
	$pushW©îm¨k
(
TabÀ
 
t
)

56 
t
->
w©îm¨k
++;

57 
	}
}

60 
	$p›W©îm¨k
(
TabÀ
 
t
)

62 
w
 = 
t
->
w©îm¨k
--;

63 
i
;

64 
i
=0; i<
t
->
size
; i++) {

65 
Symbﬁ
 
s
 = 
t
->
d©a
[
i
];

66 (
s
 !0Ë&& (s->
w©îm¨k
 =
w
)) {

67 
Symbﬁ
 
d
 = 
s
;

68 
s
 = s->
√xt
;

69 
	`‰ì
(
d
->
ãxt
);

70 
	`‰ì
(
d
);

71 
t
->
d©a
[
i
] = 
s
;

72 
t
->
íåõs
--;

75 
	}
}

78 
	$¥ötTabÀ
(
TabÀ
 
t
)

80 
	`Ârötf
(
°dîr
, "TabÀ wôh %dÉ¡rõ†o‡%d sizê© w©îm¨k %d\n", 
t
->
íåõs
,Å->
size
,Å->
w©îm¨k
);

81 
i
;

82 
i
=0; i<
t
->
size
; i++) {

83 
Symbﬁ
 
s
 = 
t
->
d©a
[
i
];

84 
s
 != 0) {

85 
	`Ârötf
(
°dîr
, "%30s\t%s\t%d\n", 
s
->
ãxt
, 
	`ôy≥2°r
(s->
ty≥
), s->
w©îm¨k
);

86 
s
 = s->
√xt
;

89 
	}
}

	@meldinterp-runtime.witoutinstru/api.h

2 #i‚de‡
API_H


3 
	#API_H


	)

5 
	~<°döt.h
>

7 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


8 
	~"modñ.h
"

11 
Regi°î
 
	tmñd_vÆue
;

13 
	#NODE_FORMAT
 "%lu"

	)

15 
	#MELD_INT
(
x
Ë(*(
mñd_öt
 *)(x))

	)

16 
	#MELD_FLOAT
(
x
Ë(*(
mñd_Êﬂt
 *)(x))

	)

17 
	#MELD_NODE
(
x
Ë(*(
Node
 **)(x))

	)

18 
	#MELD_NODE_ID
(
x
Ë(*(
NodeID
 *)(x))

	)

19 
	#MELD_SET
(
x
Ë(*(
Së
 **)(x))

	)

20 
	#MELD_LIST
(
x
Ë(*(
Li°
 **)(x))

	)

21 
	#MELD_PTR
(
x
Ë(*(**)(x))

	)

23 
	#MELD_CONVERT_INT
(
x
Ë(*(
Regi°î
 *)(
mñd_öt
 *)&(x))

	)

24 
	#MELD_CONVERT_FLOAT
(
x
Ë(*(
Regi°î
 *)(
mñd_Êﬂt
 *)&(x))

	)

25 
	#MELD_CONVERT_LIST
(
x
Ë((
Regi°î
)(x))

	)

27 
	#MELD_CONVERT_REG_TO_PTR
(
x
Ë((*)()(
Regi°î
)(x))

	)

28 
	#MELD_CONVERT_PTR_TO_REG
(
x
Ë((
Regi°î
)()(*)(x))

	)

	@meldinterp-runtime.witoutinstru/core.c

2 
	~"≠i.h
"

3 
	~"c‹e.h
"

4 
	~"modñ.h
"

6 
	~"£t_ru¡ime.h
"

7 
	~"li°_ru¡ime.h
"

8 
	~<°dlib.h
>

9 
	~<m©h.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~"../sy°em/myas£π.h
"

13 
	~<°dio.h
>

19 **
	gdñès
 = 
NULL
;

20 *
	gdñè_sizes
 = 
NULL
;

21 *
	g¨gumíts
 = 
NULL
;

22 
tu∂e_ty≥
 
	gTYPE_EDGE
 = -1;

23 
tu∂e_ty≥
 
	gTYPE_INIT
 = -1;

24 
tu∂e_ty≥
 
	gTYPE_COLOCATED
 = -1;

25 
tu∂e_ty≥
 
	gTYPE_PROVED
 = -1;

26 
tu∂e_ty≥
 
	gTYPE_TERMINATE
 = -1;

28 
≥rsi°ít_£t
 *
≥rsi°ít
;

30 
boﬁ


31 
	$queue_is_em±y
(
tu∂e_queue
 *
queue
)

33  
queue
->
hód
 =
NULL
;

34 
	}
}

37 
	$queue_push_tu∂e
(
tu∂e_queue
 *
queue
, 
tu∂e_íåy
 *
íåy
)

39 if(
queue
->
hód
 =
NULL
)

40 
queue
->
hód
 = queue->
èû
 = 
íåy
;

42 
queue
->
èû
->
√xt
 = 
íåy
;

43 
queue
->
èû
 = 
íåy
;

45 
	}
}

47 
tu∂e_t


48 
	$queue_p›_tu∂e
(
tu∂e_queue
 *
queue
)

50 
tu∂e_íåy
 *
íåy
 = 
NULL
;

52 i‡(
queue
->
hód
) {

53 
íåy
 = 
queue
->
hód
;

54 
queue
->
hód
 = queue->hód->
√xt
;

56 i‡(
queue
->
hód
 =
NULL
)

57 
queue
->
èû
 = 
NULL
;

60  
íåy
;

61 
	}
}

63 
tu∂e_t


64 
	$queue_dequeue_pos
(
tu∂e_queue
 *
queue
, 
tu∂e_íåy
 **
pos
)

66 
tu∂e_íåy
 *
íåy
 = *
pos
;

67 
tu∂e_íåy
 *
√xt
 = (*
pos
)->next;

69 i‡(
íåy
 =
queue
->
èû
) {

70 if(
íåy
 =
queue
->
hód
)

71 
queue
->
èû
 = 
NULL
;

73 
queue
->
èû
 = (
tu∂e_íåy
 *)
pos
;

76 *
pos
 = 
√xt
;

78 
tu∂e_t
 
tu∂e
 = 
íåy
->tuple;

79 
	`‰ì
(
íåy
);

81  
tu∂e
;

82 
	}
}

84 
tu∂e_íåy
*

85 
	$queue_íqueue
(
tu∂e_queue
 *
queue
, 
tu∂e_t
 
tu∂e
, 
ªc‹d_ty≥
 
isNew
)

87 
tu∂e_íåy
 *
íåy
 = 
	`mÆloc
((tuple_entry));

89 
íåy
->
tu∂e
 =Åuple;

90 
íåy
->
ªc‹ds
 = 
isNew
;

91 
íåy
->
√xt
 = 
NULL
;

93 
	`queue_push_tu∂e
(
queue
, 
íåy
);

95  
íåy
;

96 
	}
}

98 
tu∂e_t


99 
	$queue_dequeue
(
tu∂e_queue
 *
queue
, *
isNew
)

101 
tu∂e_íåy
 *
íåy
 = 
	`queue_p›_tu∂e
(
queue
);

103 
tu∂e_t
 
tu∂e
 = 
íåy
->tuple;

105 if(
isNew
)

106 *
isNew
 = 
íåy
->
ªc‹ds
.
cou¡
;

108 
	`‰ì
(
íåy
);

110  
tu∂e
;

111 
	}
}

113 
tu∂e_≥¡ry
*

114 
	$p_dequeue
(
tu∂e_pqueue
 *
q
)

116 
tu∂e_≥¡ry
 *
ªt
 = 
q
->
queue
;

118 if(
q
->
queue
 !
NULL
)

119 
q
->
queue
 = q->queue->
√xt
;

121  
ªt
;

122 
	}
}

125 
	$p_íqueue
(
tu∂e_pqueue
 *
queue
, 
mñd_öt
 
¥i‹ôy
, 
tu∂e_t
 
tu∂e
,

126 *
π
, 
ªc‹d_ty≥
 
isNew
)

128 
tu∂e_≥¡ry
 *
íåy
 = 
	`mÆloc
((tuple_pentry));

130 
íåy
->
tu∂e
 =Åuple;

131 
íåy
->
ªc‹ds
 = 
isNew
;

132 
íåy
->
¥i‹ôy
 =Öriority;

133 
íåy
->
π
 =Ñt;

135 
tu∂e_≥¡ry
 **
•Ÿ
;

136 
•Ÿ
 = &(
queue
->queue);

137 *
•Ÿ
 !
NULL
 &&

138 (*
•Ÿ
)->
¥i‹ôy
 <Öriority;

139 
•Ÿ
 = &((*•Ÿ)->
√xt
));

141 
íåy
->
√xt
 = *
•Ÿ
;

142 *
•Ÿ
 = 
íåy
;

143 
	}
}

146 
	$öô_dñès
()

148 
i
;

150 
dñès
 = (**)
	`mÆloc
((*)*
NUM_TYPES
);

151 
dñè_sizes
 = (*)
	`mÆloc
(()*
NUM_TYPES
);

153 
i
 = 0; i < 
NUM_TYPES
; ++i) {

154 
dñè_sizes
[
i
] = 
	`TYPE_NODELTAS
(i);

155 
dñès
[
i
] = (*)
	`TYPE_DELTAS
(i);

157 
	}
}

159 
	gty≥
;

161 
	$öô_fõlds
()

163 
size_t
 
tŸÆ
 = 2*
NUM_TYPES
;

164 
i
, 
j
;

166 
i
 = 0; i < 
NUM_TYPES
; ++i)

167 
tŸÆ
 +
	`TYPE_NOARGS
(
i
) * 2;

169 
¨gumíts
 = 
	`mÆloc
(
tŸÆ
);

170 *
°¨t
 = 
¨gumíts
 + 2*
NUM_TYPES
;

171 
off£t
, 
size
;

173 
i
 = 0; i < 
NUM_TYPES
; ++i) {

174 
¨gumíts
[
i
*2] = 
°¨t
 -árguments;

175 
off£t
 = 0;

177 
j
 = 0; j < 
	`TYPE_NOARGS
(
i
); ++j) {

178 
ty≥
 = 
	`TYPE_ARG_TYPE
(
i
, 
j
);

179 
ty≥
) {

181 ()
FIELD_INT
:

182 ()
FIELD_TYPE
:

183 
size
 = (
mñd_öt
);

186 ()
FIELD_FLOAT
:

187 
size
 = (
mñd_Êﬂt
);

190 ()
FIELD_ADDR
:

191 
size
 = (
NodeID
);

194 ()
FIELD_LIST_INT
:

195 ()
FIELD_LIST_FLOAT
:

196 ()
FIELD_LIST_ADDR
:

197 ()
FIELD_SET_INT
:

198 ()
FIELD_SET_FLOAT
:

199 
size
 = (*);

203 
	`as£π
(0);

204 
size
 = 0;

208 
°¨t
[0] = 
size
;

209 
°¨t
[1] = 
off£t
;

211 
off£t
 +
size
;

212 
°¨t
 += 2;

215 
¨gumíts
[
i
*2+1] = 
off£t
 + 
TYPE_FIELD_SIZE
;

217 
	}
}

219 
	$öô_c⁄°s
()

221 
tu∂e_ty≥
 
i
;

222 
i
 = 0; i < 
NUM_TYPES
; i++) {

223 i‡(
	`°rcmp
(
	`TYPE_NAME
(
i
), "_init") == 0)

224 
TYPE_INIT
 = 
i
;

225 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "edge") == 0)

226 
TYPE_EDGE
 = 
i
;

227 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "colocated") == 0)

228 
TYPE_COLOCATED
 = 
i
;

229 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "proved") == 0)

230 
TYPE_PROVED
 = 
i
;

231 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "terminate") == 0)

232 
TYPE_TERMINATE
 = 
i
;

234 
	}
}

236 
ölöe


237 *
	$adv™˚
(*
pc
)

239 i‡(
	`SEND
(
pc
)) {

240 
cou¡
 = 3;

242 i‡(
	`VAL_IS_FLOAT
(
	`SEND_ARG1
(
pc
)))

243 
cou¡
 +(
mñd_Êﬂt
);

244 i‡(
	`VAL_IS_INT
(
	`SEND_ARG1
(
pc
)))

245 
cou¡
 +(
mñd_öt
);

246 i‡(
	`VAL_IS_FIELD
(
	`SEND_ARG1
(
pc
)))

247 
cou¡
 += 2;

248 i‡(
	`VAL_IS_REVERSE
(
	`SEND_ARG1
(
pc
)))

249 
cou¡
 += 2;

251 
	`as£π
(0);

252 
	`exô
(1);

255  
pc
+
cou¡
;

257 if(
	`OP
(
pc
)) {

258 
cou¡
 = 3;

261 i‡(
	`VAL_IS_FLOAT
(
	`OP_ARG1
(
pc
)))

262 
cou¡
 +(
mñd_Êﬂt
);

263 i‡(
	`VAL_IS_INT
(
	`OP_ARG1
(
pc
)))

264 
cou¡
 +(
mñd_öt
);

265 i‡(
	`VAL_IS_FIELD
(
	`OP_ARG1
(
pc
)))

266 
cou¡
 += 2;

267 i‡(
	`VAL_IS_REVERSE
(
	`OP_ARG1
(
pc
)))

268 
cou¡
 += 2;

269 i‡(
	`VAL_IS_REG
(
	`OP_ARG1
(
pc
)))

272 
	`as£π
(0);

273 
	`exô
(1);

277 i‡(
	`VAL_IS_FLOAT
(
	`OP_ARG2
(
pc
)))

278 
cou¡
 +(
mñd_Êﬂt
);

279 i‡(
	`VAL_IS_INT
(
	`OP_ARG2
(
pc
)))

280 
cou¡
 +(
mñd_öt
);

281 i‡(
	`VAL_IS_FIELD
(
	`OP_ARG2
(
pc
)))

282 
cou¡
 += 2;

283 i‡(
	`VAL_IS_REVERSE
(
	`OP_ARG2
(
pc
)))

284 
cou¡
 += 2;

285 i‡(
	`VAL_IS_REG
(
	`OP_ARG2
(
pc
)))

288 
	`¥ötf
("gŸ vÆuê%c\n", 
	`OP_ARG2
(
pc
));

289 
	`as£π
(0);

290 
	`exô
(1);

293  
pc
+
cou¡
;

295 if(
	`MOVE
(
pc
)) {

296 
cou¡
 = 2;

299 i‡(
	`VAL_IS_FLOAT
(
	`MOVE_SRC
(
pc
)))

300 
cou¡
 +(
mñd_Êﬂt
);

301 i‡(
	`VAL_IS_INT
(
	`MOVE_SRC
(
pc
)))

302 
cou¡
 +(
mñd_öt
);

303 i‡(
	`VAL_IS_FIELD
(
	`MOVE_SRC
(
pc
)))

304 
cou¡
 += 2;

305 i‡(
	`VAL_IS_REVERSE
(
	`MOVE_SRC
(
pc
)))

306 
cou¡
 += 2;

307 i‡(
	`VAL_IS_TUPLE
(
	`MOVE_SRC
(
pc
)))

309 if(
	`VAL_IS_REG
(
	`MOVE_SRC
(
pc
)))

311 if(
	`VAL_IS_HOST
(
	`MOVE_SRC
(
pc
)))

314 
	`as£π
(0);

315 
	`exô
(1);

319 i‡(
	`VAL_IS_FLOAT
(
	`MOVE_DST
(
pc
)))

320 
cou¡
 +(
mñd_Êﬂt
);

321 i‡(
	`VAL_IS_INT
(
	`MOVE_DST
(
pc
)))

322 
cou¡
 +(
mñd_öt
);

323 i‡(
	`VAL_IS_FIELD
(
	`MOVE_DST
(
pc
)))

324 
cou¡
 += 2;

325 i‡(
	`VAL_IS_REVERSE
(
	`MOVE_DST
(
pc
)))

326 
cou¡
 += 2;

327 i‡(
	`VAL_IS_REG
(
	`MOVE_DST
(
pc
)))

330 
	`as£π
(0);

331 
	`exô
(1);

334  
pc
+
cou¡
;

336 if(
	`ITER
(
pc
)) {

338 
pc
 +
ITER_BASE
;

340 if(
	`ITER_MATCH_NONE
(
pc
))

341 
pc
 += 2;

343 *
ﬁd
;

345 
ﬁd
 = 
pc
;

347 i‡(
	`VAL_IS_FLOAT
(
	`ITER_MATCH_VAL
(
pc
)))

348 
pc
 +(
mñd_Êﬂt
);

349 i‡(
	`VAL_IS_INT
(
	`ITER_MATCH_VAL
(
pc
)))

350 
pc
 +(
mñd_öt
);

351 i‡(
	`VAL_IS_FIELD
(
	`ITER_MATCH_VAL
(
pc
)))

352 
pc
 += 2;

353 i‡(
	`VAL_IS_REVERSE
(
	`ITER_MATCH_VAL
(
pc
)))

354 
pc
 += 2;

356 
	`as£π
(0);

357 
	`exô
(1);

360 
pc
 += 2;

362 if(
	`ITER_MATCH_END
(
ﬁd
))

367  
pc
;

368 } i‡(
	`ALLOC
(
pc
)) {

369 
cou¡
 = 2;

371 i‡(
	`VAL_IS_INT
(
	`ALLOC_DST
(
pc
)))

372 
cou¡
 +(
mñd_öt
);

373 i‡(
	`VAL_IS_FLOAT
(
	`ALLOC_DST
(
pc
)))

374 
cou¡
 +(
mñd_Êﬂt
);

375 i‡(
	`VAL_IS_FIELD
(
	`ALLOC_DST
(
pc
)))

376 
cou¡
 += 2;

377 i‡(
	`VAL_IS_REG
(
	`ALLOC_DST
(
pc
)))

379 i‡(
	`VAL_IS_REVERSE
(
	`ALLOC_DST
(
pc
))) {

380 
cou¡
 += 2;

381 
	`as£π
(0);

382 
	`exô
(1);

384 
	`as£π
(0);

385 
	`exô
(1);

388  
pc
+
cou¡
;

390 i‡(
	`CALL
(
pc
)) {

391 
numArgs
 = 
	`CALL_ARGS
(
pc
);

392 
i
;

394 
i
 = 0, 
pc
+=2; i < 
numArgs
; i++,Öc++) {

395 i‡(
	`VAL_IS_FLOAT
(
	`CALL_VAL
(
pc
)))

396 
pc
 +(
mñd_Êﬂt
);

397 i‡(
	`VAL_IS_INT
(
	`CALL_VAL
(
pc
)))

398 
pc
 +(
mñd_öt
);

399 i‡(
	`VAL_IS_FIELD
(
	`CALL_VAL
(
pc
)))

400 
pc
 += 2;

401 i‡(
	`VAL_IS_REVERSE
(
	`CALL_VAL
(
pc
))) {

402 
pc
 += 2;

403 
	`as£π
(0);

404 
	`exô
(1);

407  
pc
;

409 i‡(
	`IF
(
pc
)) {

410  
pc
+
IF_BASE
;

413  
pc
+1;

415 
	}
}

417 
ölöe


418 *
	$evÆ_d°
(c⁄° 
vÆue
,

419 c⁄° **
pc
, 
Regi°î
 *
ªg
, 
size_t
 *
size
)

421 i‡(
	`VAL_IS_REG
(
vÆue
)) {

422 *
size
 = (
Regi°î
);

423  &(
ªg
)[
	`VAL_REG
(
vÆue
)];

424 } i‡(
	`VAL_IS_FIELD
(
vÆue
)) {

425 
ªg_ödex
 = 
	`VAL_FIELD_REG
(*
pc
);

426 
fõld_num
 = 
	`VAL_FIELD_NUM
(*
pc
);

427 
tu∂e_t
 
tu∂e
 = (tu∂e_t)
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ödex
]);

428 
tu∂e_ty≥
 
ty≥
 = 
	`TUPLE_TYPE
(
tu∂e
);

430 *
size
 = 
	`TYPE_ARG_SIZE
(
ty≥
, 
fõld_num
);

432 (*
pc
) += 2;

434  
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
);

435 } i‡(
	`VAL_IS_INT
(
vÆue
)) {

436 
	`as£π
(0);

437 } i‡(
	`VAL_IS_FLOAT
(
vÆue
)) {

438 
	`as£π
(0);

439 } if(
	`VAL_IS_TUPLE
(
vÆue
)) {

440 
	`as£π
(0);

441 } if(
	`VAL_IS_HOST
(
vÆue
)) {

442 
	`as£π
(0);

444 
	`as£π
(0 );

447 
	`as£π
(0);

448  
NULL
;

449 
	}
}

451 
ölöe


452 * 
	$evÆ
(c⁄° 
vÆue
, 
tu∂e_t
 
tu∂e
,

453 c⁄° **
pc
, 
Regi°î
 *
ªg
)

455 i‡(
	`VAL_IS_HOST
(
vÆue
)) {

456  (*)
EVAL_HOST
;

457 } i‡(
	`VAL_IS_REG
(
vÆue
)) {

458  (*)&(
ªg
[
	`VAL_REG
(
vÆue
)]);

459 } i‡(
	`VAL_IS_TUPLE
(
vÆue
)) {

460  (*)
tu∂e
;

461 } i‡(
	`VAL_IS_FIELD
(
vÆue
)) {

462 c⁄° 
ªg_ödex
 = 
	`VAL_FIELD_REG
(*
pc
);

463 c⁄° 
fõld_num
 = 
	`VAL_FIELD_NUM
(*
pc
);

464 
tu∂e_t
 
tu∂e
 = (tu∂e_t)
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ödex
]);

465 (*
pc
) += 2;

467 #ifde‡
DEBUG_INSTRS


468 
	`¥ötf
 ("tuple = ");

469 
	`tu∂e_¥öt
(
tu∂e
, 
°dout
);

470 
	`¥ötf
 ("\n");

471 
	`¥ötf
 ("tu∂e[%d] = %lx\n", 
fõld_num
, 
	`MELD_INT
(
	`GET_TUPLE_FIELD
(
tu∂e
, field_num)));

474  
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
);

475 } i‡(
	`VAL_IS_INT
(
vÆue
)) {

476 *
ªt
 = (*)(*
pc
);

477 *
pc
 = *p¯+ (
mñd_öt
);

478  
ªt
;

479 } i‡(
	`VAL_IS_FLOAT
(
vÆue
)) {

480 *
ªt
 = (*)(*
pc
);

482 *
pc
 = *p¯+ (
mñd_Êﬂt
);

484  
ªt
;

485 } i‡(
	`VAL_IS_REVERSE
(
vÆue
)) {

486 c⁄° 
ªg_ödex
 = 
	`VAL_FIELD_REG
(*
pc
);

487 c⁄° 
fõld_num
 = 
	`VAL_FIELD_NUM
(*
pc
);

488 
tu∂e_t
 
tu∂e
 = (tu∂e_t)
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ödex
]);

490 (*
pc
) += 2;

492 #ifde‡
PARALLEL_MACHINE


493 
Li°
 *
rouã
 = 
	`MELD_LIST
(
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
));

494 
Li°
 *
˛⁄e
 = 
	`li°_c›y
(
rouã
);

496 
	`li°_ªvî£_fú°
(
˛⁄e
);

498 
	`thªad_£lf
()->
ªvî£_li°
 = 
˛⁄e
;

500  (*)&
	`thªad_£lf
()->
ªvî£_li°
;

502  
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
);

505 
	`as£π
(0 );

508 
	`as£π
(0);

509  
NULL
;

510 
	}
}

512 
ölöe


513 
boﬁ
 
	$aggªg©e_accumuœã
(
agg_ty≥
, *
acc
, *
obj
, 
cou¡
)

515 
agg_ty≥
) {

516 
AGG_SET_UNION_INT
: {

517 
Së
 *
£t
 = 
	`MELD_SET
(
acc
);

518 
	`£t_öt_ö£π
(
£t
, 
	`MELD_INT
(
obj
));

519 
	`£t_¥öt
(
£t
);

520  
Ál£
;

522 
AGG_SET_UNION_FLOAT
: {

523 
Së
 *
£t
 = 
	`MELD_SET
(
acc
);

524 
	`£t_Êﬂt_ö£π
(
£t
, 
	`MELD_FLOAT
(
obj
));

525 
	`£t_¥öt
(
£t
);

526  
Ál£
;

529 
AGG_FIRST
:

530  
Ál£
;

532 
AGG_MAX_INT
:

533 i‡(
	`MELD_INT
(
obj
Ë> MELD_INT(
acc
)) {

534 
	`MELD_INT
(
acc
ËMELD_INT(
obj
);

535  
åue
;

537  
Ál£
;

539 
AGG_MIN_INT
:

540 i‡(
	`MELD_INT
(
obj
Ë< MELD_INT(
acc
)) {

541 
	`MELD_INT
(
acc
ËMELD_INT(
obj
);

542  
åue
;

544  
Ál£
;

546 
AGG_SUM_INT
:

547 
	`MELD_INT
(
acc
Ë+MELD_INT(
obj
Ë* 
cou¡
;

548  
Ál£
;

550 
AGG_MAX_FLOAT
:

551 if(
	`MELD_FLOAT
(
obj
Ë> MELD_FLOAT(
acc
)) {

552 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
obj
);

553  
åue
;

555  
Ál£
;

557 
AGG_MIN_FLOAT
:

558 if(
	`MELD_FLOAT
(
obj
Ë< MELD_FLOAT(
acc
)) {

559 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
obj
);

560  
åue
;

562  
Ál£
;

564 
AGG_SUM_FLOAT
:

565 
	`MELD_FLOAT
(
acc
Ë+MELD_FLOAT(
obj
Ë* (
mñd_Êﬂt
)
cou¡
;

566  
Ál£
;

568 
AGG_SUM_LIST_INT
: {

569 
Li°
 *
ªsu…_li°
 = 
	`MELD_LIST
(
acc
);

570 
Li°
 *
Ÿhî_li°
 = 
	`MELD_LIST
(
obj
);

572 if(
	`li°_tŸÆ
(
ªsu…_li°
Ë!li°_tŸÆ(
Ÿhî_li°
)) {

573 
	`Ârötf
(
°dîr
, "lists differ in size foráccumulator AGG_SUM_LIST_INT:"

574 " %d v†%d\n", 
	`li°_tŸÆ
(
ªsu…_li°
),Üi°_tŸÆ(
Ÿhî_li°
));

575 
	`exô
(1);

578 
li°_ôî©‹
 
ô_ªsu…
 = 
	`li°_gë_ôî©‹
(
ªsu…_li°
);

579 
li°_ôî©‹
 
ô_Ÿhî
 = 
	`li°_gë_ôî©‹
(
Ÿhî_li°
);

581 
	`li°_ôî©‹_has_√xt
(
ô_ªsu…
)) {

582 
	`li°_ôî©‹_öt
(
ô_ªsu…
Ë+li°_ôî©‹_öt(
ô_Ÿhî
Ë* (
mñd_öt
)
cou¡
;

584 
ô_Ÿhî
 = 
	`li°_ôî©‹_√xt
(it_other);

585 
ô_ªsu…
 = 
	`li°_ôî©‹_√xt
(it_result);

588  
Ál£
;

591 
AGG_SUM_LIST_FLOAT
: {

592 
Li°
 *
ªsu…_li°
 = 
	`MELD_LIST
(
acc
);

593 
Li°
 *
Ÿhî_li°
 = 
	`MELD_LIST
(
obj
);

595 if(
	`li°_tŸÆ
(
ªsu…_li°
Ë!li°_tŸÆ(
Ÿhî_li°
)) {

596 
	`Ârötf
(
°dîr
, "lists differ in size foráccumulator AGG_SUM_LIST_FLOAT: "

597 "%d v†%d\n", 
	`li°_tŸÆ
(
ªsu…_li°
),Üi°_tŸÆ(
Ÿhî_li°
));

598 
	`exô
(1);

601 
li°_ôî©‹
 
ô_ªsu…
 = 
	`li°_gë_ôî©‹
(
ªsu…_li°
);

602 
li°_ôî©‹
 
ô_Ÿhî
 = 
	`li°_gë_ôî©‹
(
Ÿhî_li°
);

604 
	`li°_ôî©‹_has_√xt
(
ô_ªsu…
)) {

605 
	`li°_ôî©‹_Êﬂt
(
ô_ªsu…
Ë+li°_ôî©‹_Êﬂt(
ô_Ÿhî
Ë* (
mñd_Êﬂt
)
cou¡
;

607 
ô_ªsu…
 = 
	`li°_ôî©‹_√xt
(it_result);

608 
ô_Ÿhî
 = 
	`li°_ôî©‹_√xt
(it_other);

611  
Ál£
;

615 
	`as£π
(0);

617 
	}
}

619 
ölöe
 
boﬁ


620 
	$aggªg©e_ch™ged
(
agg_ty≥
, *
v1
, *
v2
)

622 
agg_ty≥
) {

623 
AGG_FIRST
:

624  
Ál£
;

626 
AGG_MIN_INT
:

627 
AGG_MAX_INT
:

628 
AGG_SUM_INT
:

629  
	`MELD_INT
(
v1
Ë!MELD_INT(
v2
);

631 
AGG_MIN_FLOAT
:

632 
AGG_MAX_FLOAT
:

633 
AGG_SUM_FLOAT
:

634  
	`MELD_FLOAT
(
v1
Ë!MELD_FLOAT(
v2
);

636 
AGG_SET_UNION_INT
:

637 
AGG_SET_UNION_FLOAT
: {

638 
Së
 *
£tOld
 = 
	`MELD_SET
(
v1
);

639 
Së
 *
£tNew
 = 
	`MELD_SET
(
v2
);

641 if(!
	`£t_equÆ
(
£tOld
, 
£tNew
))

642  
åue
;

645 
	`£t_dñëe
(
£tNew
);

646  
Ál£
;

650 
AGG_SUM_LIST_INT
:

651 
AGG_SUM_LIST_FLOAT
: {

652 
Li°
 *
li°Old
 = 
	`MELD_LIST
(
v1
);

653 
Li°
 *
li°New
 = 
	`MELD_LIST
(
v2
);

655 if(!
	`li°_equÆ
(
li°Old
, 
li°New
))

656  
åue
;

659 
	`li°_dñëe
(
li°New
);

660  
Ál£
;

665 
	`as£π
(0);

666  
åue
;

669 
	`as£π
(0);

671 
	}
}

673 
ölöe
 

674 
	$aggªg©e_£ed
(
agg_ty≥
, *
acc
, *
°¨t
, 
cou¡
, 
size_t
 
size
)

676 
agg_ty≥
) {

677 
AGG_FIRST
:

678 
	`mem˝y
(
acc
, 
°¨t
, 
size
);

680 
AGG_MIN_INT
:

681 
AGG_MAX_INT
:

682 
	`MELD_INT
(
acc
ËMELD_INT(
°¨t
);

684 
AGG_SUM_INT
:

685 
	`MELD_INT
(
acc
ËMELD_INT(
°¨t
Ë* 
cou¡
;

687 
AGG_MIN_FLOAT
:

688 
AGG_MAX_FLOAT
:

689 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
°¨t
);

691 
AGG_SUM_FLOAT
:

692 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
°¨t
Ë* 
cou¡
;

694 
AGG_SET_UNION_INT
: {

695 
Së
 *
£t
 = 
	`£t_öt_¸óã
();

696 
	`£t_öt_ö£π
(
£t
, 
	`MELD_INT
(
°¨t
));

697 
	`£t_¥öt
(
£t
);

698 
	`MELD_SET
(
acc
Ë
£t
;

701 
AGG_SET_UNION_FLOAT
: {

702 
Së
 *
£t
 = 
	`£t_Êﬂt_¸óã
();

703 
	`£t_Êﬂt_ö£π
(
£t
, 
	`MELD_FLOAT
(
°¨t
));

704 
	`£t_¥öt
(
£t
);

705 
	`MELD_SET
(
acc
Ë
£t
;

708 
AGG_SUM_LIST_INT
: {

709 
Li°
 *
ªsu…_li°
 = 
	`li°_öt_¸óã
();

710 
Li°
 *
°¨t_li°
 = 
	`MELD_LIST
(
°¨t
);

713 
li°_ôî©‹
 
ô
;

714 
ô
 = 
	`li°_gë_ôî©‹
(
°¨t_li°
); 
	`li°_ôî©‹_has_√xt
(it);

715 
ô
 = 
	`li°_ôî©‹_√xt
(it))

717 
mñd_öt
 
tŸÆ
 = 
	`li°_ôî©‹_öt
(
ô
Ë* (mñd_öt)
cou¡
;

718 
	`li°_öt_push_èû
(
ªsu…_li°
, 
tŸÆ
);

721 
	`MELD_LIST
(
acc
Ë
ªsu…_li°
;

724 
AGG_SUM_LIST_FLOAT
: {

725 
Li°
 *
ªsu…_li°
 = 
	`li°_Êﬂt_¸óã
();

726 
Li°
 *
°¨t_li°
 = 
	`MELD_LIST
(
°¨t
);

729 
li°_ôî©‹
 
ô
;

730 
ô
 = 
	`li°_gë_ôî©‹
(
°¨t_li°
); 
	`li°_ôî©‹_has_√xt
(it);

731 
ô
 = 
	`li°_ôî©‹_√xt
(it))

733 
mñd_Êﬂt
 
tŸÆ
 = 
	`li°_ôî©‹_Êﬂt
(
ô
Ë* (mñd_Êﬂt)
cou¡
;

734 
	`li°_Êﬂt_push_èû
(
ªsu…_li°
, 
tŸÆ
);

737 
	`MELD_LIST
(
acc
Ë
ªsu…_li°
;

742 
	`as£π
(0);

744 
	}
}

746 
ölöe
 

747 
	$aggªg©e_‰ì
(
tu∂e_t
 
tu∂e
, 
fõld_aggªg©e
,

748 
ty≥_aggªg©e
)

750 
ty≥_aggªg©e
) {

751 
AGG_FIRST
:

752 
AGG_MIN_INT
:

753 
AGG_MAX_INT
:

754 
AGG_SUM_INT
:

755 
AGG_MIN_FLOAT
:

756 
AGG_MAX_FLOAT
:

757 
AGG_SUM_FLOAT
:

761 
AGG_SET_UNION_INT
:

762 
AGG_SET_UNION_FLOAT
:

763 
	`£t_dñëe
(
	`MELD_SET
(
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_aggªg©e
)));

766 
AGG_SUM_LIST_INT
:

767 
AGG_SUM_LIST_FLOAT
:

768 
	`li°_dñëe
(
	`MELD_LIST
(
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_aggªg©e
)));

772 
	`as£π
(0);

775 
	}
}

777 
ölöe


778 
	$aggªg©e_ªˇlc
(
tu∂e_íåy
 *
agg
, 
Regi°î
 *
ªg
,

779 
boﬁ
 
fú°_run
)

781 
tu∂e_ty≥
 
ty≥
 = 
	`TUPLE_TYPE
(
agg
->
tu∂e
);

783 
tu∂e_íåy
 *
cur
;

785 
agg_ty≥
 = 
	`AGG_AGG
(
	`TYPE_AGGREGATE
(
ty≥
));

786 
agg_fõld
 = 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
));

787 
tu∂e_queue
 *
agg_queue
 = 
agg
->
ªc‹ds
.agg_queue;

788 
tu∂e_íåy
 *
agg_li°
 = 
agg_queue
->
hód
;

789 
tu∂e_t
 
tu∂e
 = 
agg_li°
->tuple;

791 * 
°¨t
 = 
	`GET_TUPLE_FIELD
(
tu∂e
, 
agg_fõld
);

794 
size_t
 
size
 = 
	`TYPE_ARG_SIZE
(
ty≥
, 
agg_fõld
);

795 * 
accumuœt‹
 = 
	`mÆloc
(
size
);

797 
	`aggªg©e_£ed
(
agg_ty≥
, 
accumuœt‹
, 
°¨t
, 
agg_li°
->
ªc‹ds
.
cou¡
, 
size
);

800 
size_t
 
size_off£t
 = 
TYPE_FIELD_SIZE
 + 
	`TYPE_ARG_OFFSET
(
ty≥
, 
agg_fõld
Ë+ 
	`TYPE_ARG_SIZE
(type,ágg_field);

801 
size_t
 
tŸÆ_c›y
 = 
	`TYPE_SIZE
(
ty≥
Ë- 
size_off£t
;

802 
tu∂e_t
 
èrgë_tu∂e
 = 
NULL
;

804 i‡(
tŸÆ_c›y
 > 0)

805 
èrgë_tu∂e
 = 
tu∂e
;

807 
cur
 = 
agg_li°
->
√xt
; cu∏!
NULL
; cur = cur->next) {

808 if(
	`aggªg©e_accumuœã
(
agg_ty≥
, 
accumuœt‹
,

809 
	`GET_TUPLE_FIELD
(
cur
->
tu∂e
, 
agg_fõld
), cur->
ªc‹ds
.
cou¡
))

810 
èrgë_tu∂e
 = 
cur
->
tu∂e
;

813 *
acc_¨ó
 = 
	`GET_TUPLE_FIELD
(
agg
->
tu∂e
, 
agg_fõld
);

815 if(
fú°_run
)

816 
	`mem˝y
(
acc_¨ó
, 
accumuœt‹
, 
size
);

817 i‡(
	`aggªg©e_ch™ged
(
agg_ty≥
, 
acc_¨ó
, 
accumuœt‹
)) {

818 
	`tu∂e_¥o˚ss
(
agg
->
tu∂e
, 
	`TYPE_START
(
ty≥
), -1, 
ªg
);

819 
	`aggªg©e_‰ì
(
agg
->
tu∂e
, 
agg_fõld
, 
agg_ty≥
);

820 
	`mem˝y
(
acc_¨ó
, 
accumuœt‹
, 
size
);

821 i‡(
tŸÆ_c›y
 > 0)

822 
	`mem˝y
(((*)
agg
->
tu∂e
Ë+ 
size_off£t
, ((*)
èrgë_tu∂e
Ë+ size_off£t, 
tŸÆ_c›y
);

823 
	`tu∂e_¥o˚ss
(
agg
->
tu∂e
, 
	`TYPE_START
(
ty≥
), 1, 
ªg
);

826 
	`‰ì
(
accumuœt‹
);

827 
	}
}

829 
ölöe


830 
	$¥o˚ss_dñès
(
tu∂e_t
 
tu∂e
, 
tu∂e_ty≥
 
ty≥
, 
Regi°î
 *
ªg
)

832 *
ﬁd
 = 
OLDTUPLES
[
ty≥
];

834 if(
ﬁd
 =
NULL
)

837 
OLDTUPLES
[
ty≥
] = 
NULL
;

839 
i
;

840 
i
 = 0; i < 
	`DELTA_TOTAL
(
ty≥
); ++i) {

841 
dñè_ty≥
 = 
	`DELTA_TYPE
(
ty≥
, 
i
);

842 
dñè_pos
 = 
	`DELTA_POSITION
(
ty≥
, 
i
);

843 *
dñè_tu∂e
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
dñè_ty≥
));

845 
	`mem˝y
(
dñè_tu∂e
, 
ﬁd
, 
	`TYPE_SIZE
(
dñè_ty≥
));

846 
	`TUPLE_TYPE
(
dñè_tu∂e
Ë
dñè_ty≥
;

848 *
fõld_dñè
 = 
	`GET_TUPLE_FIELD
(
dñè_tu∂e
, 
dñè_pos
);

849 *
fõld_ﬁd
 = 
	`GET_TUPLE_FIELD
(
ﬁd
, 
dñè_pos
);

850 *
fõld_√w
 = 
	`GET_TUPLE_FIELD
(
tu∂e
, 
dñè_pos
);

852 
	`TYPE_ARG_TYPE
(
ty≥
, 
dñè_pos
)) {

853 
FIELD_INT
:

854 
	`MELD_INT
(
fõld_dñè
ËMELD_INT(
fõld_√w
Ë- MELD_INT(
fõld_ﬁd
);

856 
FIELD_FLOAT
:

857 
	`MELD_FLOAT
(
fõld_dñè
ËMELD_FLOAT(
fõld_√w
Ë- MELD_FLOAT(
fõld_ﬁd
);

860 
	`as£π
(0);

864 
	`tu∂e_¥o˚ss
(
dñè_tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
(dñè_tu∂e)), 1, 
ªg
);

867 
	`FREE_TUPLE
(
ﬁd
);

868 
	}
}

870 
ölöe
 
tu∂e_t


871 
	$tu∂e_buûd_¥oved
(
tu∂e_ty≥
 
ty≥
, 
mñd_öt
 
tŸÆ
)

873 
tu∂e_t
 
tu∂e
 = 
	`tu∂e_Æloc
(
TYPE_PROVED
);

874 
mñd_öt
 
ty≥_öt
 = (mñd_öt)
ty≥
;

876 
	`SET_TUPLE_FIELD
(
tu∂e
, 0, &
ty≥_öt
);

877 
	`SET_TUPLE_FIELD
(
tu∂e
, 1, &
tŸÆ
);

879  
tu∂e
;

880 
	}
}

882 
	$tu∂e_do_h™dÀ
(
tu∂e_ty≥
 
ty≥
, 
tu∂e_t
 
tu∂e
, 
isNew
, 
Regi°î
 *
ªg
)

884 if(
	`TYPE_IS_PROVED
(
ty≥
)) {

885 
PROVED
[
ty≥
] +(
mñd_öt
)
isNew
;

886 
tu∂e_t
 
_¥oved
 = 
	`tu∂e_buûd_¥oved
(
ty≥
, 
PROVED
[type]);

887 #ifde‡
DEBUG_PROVED_TUPLES


888 
	`¥ötf
("NewÖroved f‹Åu∂ê%s: %d\n", 
tu∂e_«mes
[
ty≥
], 
PROVED
[type]);

890 
	`PUSH_NEW_TUPLE
(
_¥oved
);

891 } if(
ty≥
 =
TYPE_PROVED
) {

892 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
ty≥
), 
isNew
, 
ªg
);

893 
	`FREE_TUPLE
(
tu∂e
);

895 } if(
ty≥
 =
TYPE_TERMINATE
) {

896 
	`FREE_TUPLE
(
tu∂e
);

897 
	`TERMINATE_CURRENT
();

901 if(!
	`TYPE_IS_AGG
(
ty≥
Ë&& 
	`TYPE_IS_PERSISTENT
(type)) {

902 
≥rsi°ít_£t
 *
≥rsi°íts
 = &
PERSISTENT
[
ty≥
];

903 
i
;

904 
size
 = 
	`TYPE_SIZE
(
ty≥
);

906 if(
isNew
 < 0) {

907 
	`Ârötf
(
°dîr
, "meld:ÖersistentÅypes can't be deleted\n");

908 
	`exô
(
EXIT_FAILURE
);

911 
i
 = 0; i < 
≥rsi°íts
->
tŸÆ
; ++i) {

912 *
°‹ed_tu∂e
 = 
≥rsi°íts
->
¨øy
 + 
i
 * 
size
;

914 if(
	`memcmp
(
°‹ed_tu∂e
, 
tu∂e
, 
size
) == 0) {

915 
	`FREE_TUPLE
(
tu∂e
);

921 if(
≥rsi°íts
->
tŸÆ
 =≥rsi°íts->
cuºít
) {

922 if(
≥rsi°íts
->
tŸÆ
 == 0)

923 
≥rsi°íts
->
tŸÆ
 = 
PERSISTENT_INITIAL
;

925 
≥rsi°íts
->
tŸÆ
 *= 2;

927 
≥rsi°íts
->
¨øy
 = 
	`ªÆloc
’îsi°íts->¨øy, 
size
 *Öîsi°íts->
tŸÆ
);

930 
	`mem˝y
(
≥rsi°íts
->
¨øy
 +Öîsi°íts->
cuºít
 * 
size
, 
tu∂e
, size);

931 ++
≥rsi°íts
->
cuºít
;

933 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
ty≥
), 
isNew
, 
ªg
);

938 i‡(!
	`TYPE_IS_AGG
(
ty≥
Ë|| 
	`TYPE_IS_LINEAR
(type))

940 
tu∂e_queue
 *
queue
 = &
TUPLES
[
ty≥
];

941 
tu∂e_íåy
** 
cuºít
;

942 
tu∂e_íåy
* 
cur
;

944 
cuºít
 = &
queue
->
hód
;

945 *
cuºít
 !
NULL
;

946 
cuºít
 = &(*cuºít)->
√xt
)

948 
cur
 = *
cuºít
;

950 i‡(
	`memcmp
(
cur
->
tu∂e
,

951 
tu∂e
,

952 
	`TYPE_SIZE
(
ty≥
)) == 0)

954 
cur
->
ªc‹ds
.
cou¡
 +
isNew
;

956 i‡(
cur
->
ªc‹ds
.
cou¡
 <= 0) {

958 i‡(!
	`TYPE_IS_LINEAR
(
ty≥
)) {

959 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
—u∂e)), -1, 
ªg
);

960 
	`FREE_TUPLE
(
	`queue_dequeue_pos
(
queue
, 
cuºít
));

962 if(
	`DELTA_WITH
(
ty≥
)) {

963 if(
OLDTUPLES
[
ty≥
])

964 
	`FREE_TUPLE
(
OLDTUPLES
[
ty≥
]);

966 
OLDTUPLES
[
ty≥
] = 
	`queue_dequeue_pos
(
queue
, 
cuºít
);

968 
	`FREE_TUPLE
(
	`queue_dequeue_pos
(
queue
, 
cuºít
));

972 
	`FREE_TUPLE
(
tu∂e
);

979 i‡(
isNew
 <= 0) {

980 
	`FREE_TUPLE
(
tu∂e
);

984 
	`queue_íqueue
(
queue
, 
tu∂e
, (
ªc‹d_ty≥
Ë
isNew
);

986 if(
	`TYPE_IS_LINEAR
(
ty≥
Ë&& 
	`DELTA_WITH
(type))

987 
	`¥o˚ss_dñès
(
tu∂e
, 
ty≥
, 
ªg
);

989 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
—u∂e)), 
isNew
, 
ªg
);

994 
ty≥_aggªg©e
 = 
	`TYPE_AGGREGATE
(
ty≥
);

995 
fõld_aggªg©e
 = 
	`AGG_FIELD
(
ty≥_aggªg©e
);

997 
tu∂e_íåy
 **
cuºít
;

998 
tu∂e_íåy
 *
cur
;

999 
tu∂e_queue
 *
queue
 = &(
TUPLES
[
ty≥
]);

1001 
cuºít
 = &
queue
->
hód
;

1002 (*
cuºít
Ë!
NULL
;

1003 
cuºít
 = &(*cuºít)->
√xt
)

1005 
cur
 = *
cuºít
;

1007 
size_t
 
sizeBegö
 = 
TYPE_FIELD_SIZE
 + 
	`TYPE_ARG_OFFSET
(
ty≥
, 
fõld_aggªg©e
);

1008 *
°¨t
 = (*)(
cur
->
tu∂e
);

1010 if(
	`memcmp
(
°¨t
, 
tu∂e
, 
sizeBegö
))

1020 
tu∂e_queue
 *
agg_queue
 = 
cur
->
ªc‹ds
.agg_queue;

1023 if(
	`AGG_AGG
(
ty≥_aggªg©e
Ë=
AGG_FIRST


1024 && 
isNew
 > 0

1025 && !
	`queue_is_em±y
(
agg_queue
))

1027 
	`FREE_TUPLE
(
tu∂e
);

1031 
tu∂e_íåy
** 
cuºít2
;

1032 
tu∂e_íåy
* 
cur2
;

1034 
cuºít2
 = &
agg_queue
->
hód
;

1035 *
cuºít2
 !
NULL
;

1036 
cuºít2
 = &(*cuºít2)->
√xt
)

1038 
cur2
 = *
cuºít2
;

1040 i‡(
	`memcmp
(
cur2
->
tu∂e
,Åu∂e, 
	`TYPE_SIZE
(
ty≥
)) == 0)

1042 
cur2
->
ªc‹ds
.
cou¡
 +
isNew
;

1044 i‡(
cur2
->
ªc‹ds
.
cou¡
 <= 0) {

1046 
	`FREE_TUPLE
(
	`queue_dequeue_pos
(
agg_queue
, 
cuºít2
));

1048 i‡(
	`queue_is_em±y
(
agg_queue
)) {

1050 *
aggTu∂e
 = 
	`queue_dequeue_pos
(
queue
, 
cuºít
);

1053 
	`‰ì
(
agg_queue
);

1055 
	`tu∂e_¥o˚ss
(
aggTu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
◊ggTu∂e)), -1, 
ªg
);

1056 
	`aggªg©e_‰ì
(
aggTu∂e
, 
fõld_aggªg©e
, 
	`AGG_AGG
(
ty≥_aggªg©e
));

1057 
	`FREE_TUPLE
(
aggTu∂e
);

1059 
	`aggªg©e_ªˇlc
(
cur
, 
ªg
, 
Ál£
);

1061 
	`aggªg©e_ªˇlc
(
cur
, 
ªg
, 
Ál£
);

1063 
	`FREE_TUPLE
(
tu∂e
);

1069 i‡(
isNew
 <= 0) {

1070 
	`FREE_TUPLE
(
tu∂e
);

1074 
	`queue_íqueue
(
agg_queue
, 
tu∂e
, (
ªc‹d_ty≥
Ë
isNew
);

1075 
	`aggªg©e_ªˇlc
(
cur
, 
ªg
, 
Ál£
);

1081 i‡(
isNew
 <= 0) {

1082 
	`FREE_TUPLE
(
tu∂e
);

1087 
tu∂e_t
 
tu∂e_˝y
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
ty≥
));

1088 
	`mem˝y
(
tu∂e_˝y
, 
tu∂e
, 
	`TYPE_SIZE
(
ty≥
));

1091 
tu∂e_queue
 *
agg_queue
 = 
	`mÆloc
((tuple_queue));

1093 
	`queue_öô
(
agg_queue
);

1095 
	`queue_íqueue
(
agg_queue
, 
tu∂e
, (
ªc‹d_ty≥
Ë
isNew
);

1096 
tu∂e_íåy
 *
íåy
 =

1097 
	`queue_íqueue
(&
TUPLES
[
ty≥
], 
tu∂e_˝y
, (
ªc‹d_ty≥
)
agg_queue
);

1099 
	`aggªg©e_ªˇlc
(
íåy
, 
ªg
, 
åue
);

1100 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
ty≥
), 
isNew
, 
ªg
);

1101 
	}
}

1104 
	$queue_Àngth
 (
tu∂e_queue
 *
queue
)

1106 
i
;

1107 
tu∂e_íåy
 *
íåy
 = 
queue
->
hód
;

1109 
i
 = 0; 
íåy
 !
NULL
;É¡ry =É¡ry->
√xt
, i++);

1111  
i
;

1112 
	}
}

1114 
	$tu∂e_¥o˚ss
(
tu∂e_t
 
tu∂e
, *
pc
,

1115 
isNew
, 
Regi°î
 *
ªg
)

1117 ; ; 
pc
 = 
	`adv™˚
(pc)) {

1118 
evÆ_lo›
:

1119 i‡(
	`RETURN
(
pc
)) {

1120 #ifde‡
DEBUG_INSTRS


1121 
	`¥ötf
("RETURN\n");

1123  
RET_RET
;

1127 i‡(
	`IF
(
pc
)) {

1128 #ifde‡
DEBUG_INSTRS


1129 
	`¥ötf
("IFÑeg %d ", 
	`IF_REG
(
pc
));

1131 i‡(!
ªg
[
	`IF_REG
(
pc
)]) {

1132 #ifde‡
DEBUG_INSTRS


1133 
	`¥ötf
("no\n");

1135 
pc
 +
	`IF_JUMP
(pc);

1136 
evÆ_lo›
;

1139 #ifde‡
DEBUG_INSTRS


1140 
	`¥ötf
("yes\n");

1142 } i‡(
	`ELSE
(
pc
)) {

1143 
	`Ârötf
(
°dîr
, "ELSE NOT IMPLEMENTED YET!\n");

1144 
	`as£π
(0);

1145 } i‡(
	`ITER
(
pc
)) {

1147 c⁄° 
tu∂e_ty≥
 
ty≥
 = 
	`ITER_TYPE
(
pc
);

1148 
i
, 
Àngth
;

1149 **
li°
;

1150 *
jump
 = 
pc
 + 
	`ITER_JUMP
(pc);

1151 
size
 = 
	`TYPE_SIZE
(
ty≥
);

1155 if(
	`TYPE_IS_PERSISTENT
(
ty≥
Ë&& !
	`TYPE_IS_AGG
(type)) {

1157 
≥rsi°ít_£t
 *
≥rsi°íts
 = &
PERSISTENT
[
ty≥
];

1159 
Àngth
 = 
≥rsi°íts
->
cuºít
;

1160 
li°
 = 
	`mÆloc
((
tu∂e_t
Ë* 
Àngth
);

1162 
i
 = 0; i < 
Àngth
; i++) {

1163 
j
 = 
	`øndom
(Ë% (
i
 + 1);

1165 
li°
[
i
] =Üi°[
j
];

1166 
li°
[
j
] = 
≥rsi°íts
->
¨øy
 + 
i
 * 
size
;

1170 
tu∂e_íåy
 *
íåy
 = 
TUPLES
[
ty≥
].
hód
;

1172 
Àngth
 = 
	`queue_Àngth
(&
TUPLES
[
	`ITER_TYPE
(
pc
)]);

1173 
li°
 = 
	`mÆloc
((
tu∂e_t
Ë* 
Àngth
);

1175 
i
 = 0; i < 
Àngth
; i++) {

1176 
j
 = 
	`øndom
(Ë% (
i
+1);

1178 
li°
[
i
] =Üi°[
j
];

1179 
li°
[
j
] = 
íåy
->
tu∂e
;

1181 
íåy
 =É¡ry->
√xt
;

1185 #ifde‡
DEBUG_INSTRS


1186 
	`¥ötf
("ITER %†Àn=%d\n", 
tu∂e_«mes
[
ty≥
], 
Àngth
);

1189 if(
Àngth
 == 0) {

1191 
pc
 = 
jump
;

1192 
evÆ_lo›
;

1196 *
√xt_tu∂e
;

1198 
i
 = 0; i < 
Àngth
; i++) {

1199 
√xt_tu∂e
 = 
li°
[
i
];

1201 
m©ched
 = 1;

1202 c⁄° *
tmµc
;

1204 
tmµc
 = 
pc
 + 
ITER_BASE
;

1206 if(!
	`ITER_MATCH_NONE
(
tmµc
)) {

1209 c⁄° *
ﬁd_pc
 = 
tmµc
 + 2;

1210 c⁄° 
fõldnum
 = 
	`ITER_MATCH_FIELD
(
tmµc
);

1211 c⁄° 
ty≥_size
 = 
	`TYPE_ARG_SIZE
(
ty≥
, 
fõldnum
);

1213 
Regi°î
 *
fõld
 = 
	`GET_TUPLE_FIELD
(
√xt_tu∂e
, 
fõldnum
);

1214 
Regi°î
 *
vÆ
 = 
	`evÆ
(
	`ITER_MATCH_VAL
(
tmµc
), &
tu∂e
, &
ﬁd_pc
, 
ªg
);

1216 
m©ched
 = m©ched && (
	`memcmp
(
fõld
, 
vÆ
, 
ty≥_size
) == 0);

1218 if(
	`ITER_MATCH_END
(
tmµc
))

1221 
tmµc
 = 
ﬁd_pc
;

1225 #ifde‡
DEBUG_INSTRS


1226 
	`¥ötf
("MATCHED: %d %d\n", 
m©ched
, 
Àngth
);

1229 i‡(
m©ched
) {

1230 i‡(
RET_RET
 =
	`tu∂e_¥o˚ss
(
√xt_tu∂e
, 
	`adv™˚
(
pc
), 
isNew
, 
ªg
)) {

1231 
	`‰ì
(
li°
);

1232  
RET_RET
;

1237 
	`‰ì
(
li°
);

1240 
pc
 = 
jump
;

1241 
evÆ_lo›
;

1243 } i‡(
	`NEXT
(
pc
)) {

1244 #ifde‡
DEBUG_INSTRS


1245 
	`¥ötf
("NEXT\n");

1247  
RET_NEXT
;

1248 } i‡(
	`SEND
(
pc
)) {

1249 c⁄° *
ﬁd_pc
 = 
pc
+3;

1250 
Regi°î
 
£nd_ªg
 = 
ªg
[
	`SEND_MSG
(
pc
)];

1251 
Regi°î
 
£nd_π
 = 
ªg
[
	`SEND_RT
(
pc
)];

1253 #ifde‡
DEBUG_INSTRS


1254 
	`¥ötf
("SEND\n");

1257 
	`tu∂e_£nd
((
tu∂e_t
)
	`MELD_CONVERT_REG_TO_PTR
(
£nd_ªg
),

1258 
	`MELD_CONVERT_REG_TO_PTR
(
£nd_π
),

1259 
	`MELD_INT
(
	`evÆ
(
	`SEND_DELAY
(
pc
), &
tu∂e
, &
ﬁd_pc
, 
ªg
)), 
isNew
);

1260 } i‡(
	`REMOVE
(
pc
)) {

1261 i‡(
isNew
 > 0) {

1262 
ªg_ªmove
 = 
	`REMOVE_REG
(
pc
);

1263 
size
 = 
	`TYPE_SIZE
(
	`TUPLE_TYPE
(
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ªmove
])));

1265 
	`tu∂e_h™dÀ
(
	`mem˝y
(
	`mÆloc
(
size
),
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ªmove
]), size), -1,Ñeg);

1266 
ªg
[
	`REMOVE_REG
(
pc
)] = 0;

1268 } i‡(
	`OP
(
pc
)) {

1270 c⁄° *
ﬁd_pc
 = 
pc
+3;

1272 #ifde‡
DEBUG_INSTRS


1273 
	`¥ötf
("OPÅÿ%d\n", 
	`OP_DST
(
pc
));

1276 
Regi°î
 *
¨g1
, *
¨g2
;

1278 
¨g1
 = 
	`evÆ
(
	`OP_ARG1
(
pc
), &
tu∂e
, &
ﬁd_pc
, 
ªg
);

1279 
¨g2
 = 
	`evÆ
(
	`OP_ARG2
(
pc
), &
tu∂e
, &
ﬁd_pc
, 
ªg
);

1281 #ifde‡
DEBUG_INSTRS


1282 
	`¥ötf
 ("%ld", 
	`MELD_INT
(
¨g1
));

1283 
	`¥ötf
 ("OP");

1284 
	`¥ötf
 ("%ld", 
	`MELD_INT
(
¨g2
));

1285 
	`¥ötf
 ("\n");

1288 
Regi°î
 *
de°
 = 
ªg
 + 
	`OP_DST
(
pc
);

1290 
	`OP_OP
(
pc
)) {

1291 
OP_NEQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë!MELD_INT(
¨g2
)); ;

1292 
OP_EQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë=MELD_INT(
¨g2
)); ;

1293 
OP_LESSI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë< MELD_INT(
¨g2
)); ;

1294 
OP_LESSEQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë<MELD_INT(
¨g2
)); ;

1295 
OP_GREATERI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë> MELD_INT(
¨g2
)); ;

1296 
OP_GREATEREQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë>MELD_INT(
¨g2
)); ;

1297 
OP_MODI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë% MELD_INT(
¨g2
)); ;

1298 
OP_PLUSI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë+ MELD_INT(
¨g2
)); ;

1299 
OP_MINUSI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë- MELD_INT(
¨g2
)); ;

1300 
OP_TIMESI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë* MELD_INT(
¨g2
)); ;

1301 
OP_DIVI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë/ MELD_INT(
¨g2
)); ;

1302 
OP_NEQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë!MELD_FLOAT(
¨g2
)); ;

1303 
OP_EQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë=MELD_FLOAT(
¨g2
)); ;

1304 
OP_LESSF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë< MELD_FLOAT(
¨g2
)); ;

1305 
OP_LESSEQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë<MELD_FLOAT(
¨g2
)); ;

1306 
OP_GREATERF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë> MELD_FLOAT(
¨g2
)); ;

1307 
OP_GREATEREQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë>MELD_FLOAT(
¨g2
)); ;

1308 
OP_MODF
: 
	`MELD_FLOAT
(
de°
Ë
	`fmod
(MELD_FLOAT(
¨g1
), MELD_FLOAT(
¨g2
)); ;

1309 
OP_PLUSF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë+ MELD_FLOAT(
¨g2
)); ;

1310 
OP_MINUSF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë- MELD_FLOAT(
¨g2
)); ;

1311 
OP_TIMESF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë* MELD_FLOAT(
¨g2
)); ;

1312 
OP_DIVF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë/ MELD_FLOAT(
¨g2
)); ;

1313 
OP_NEQA
: *
de°
 = (
	`MELD_PTR
(
¨g1
Ë!MELD_PTR(
¨g2
)); ;

1314 
OP_EQA
: *
de°
 = (
	`MELD_PTR
(
¨g1
Ë=MELD_PTR(
¨g2
)); ;

1317 } i‡(
	`MOVE
(
pc
)) {

1318 c⁄° *
ﬁd_pc
 = 
pc
+2;

1320 #ifde‡
DEBUG_INSTRS


1322 
§c
 = 
	`MOVE_SRC
(
pc
);

1323 
d°
 = 
	`MOVE_DST
(
pc
);

1325 
	`¥ötf
("MOVE ");

1326 if(
	`VAL_IS_TUPLE
(
§c
))

1327 
	`¥ötf
("tuple");

1328 if(
	`VAL_IS_REG
(
§c
))

1329 
	`¥ötf
("ªg %d", 
	`VAL_REG
(
§c
));

1330 if(
	`VAL_IS_HOST
(
§c
))

1331 
	`¥ötf
("host");

1332 if(
	`VAL_IS_FIELD
(
§c
))

1333 
	`¥ötf
("FIELD");

1334 if(
	`VAL_IS_INT
(
§c
))

1335 
	`¥ötf
("INT");

1336 if(
	`VAL_IS_FLOAT
(
§c
))

1337 
	`¥ötf
("float");

1338 if(
	`VAL_IS_REVERSE
(
§c
))

1339 
	`¥ötf
("reverse");

1340 
	`¥ötf
("??");

1342 
	`¥ötf
(" ");

1344 if(
	`VAL_IS_TUPLE
(
d°
))

1345 
	`¥ötf
("tuple");

1346 if(
	`VAL_IS_REG
(
d°
))

1347 
	`¥ötf
("ªg %d", 
	`VAL_REG
(
d°
));

1348 if(
	`VAL_IS_HOST
(
d°
))

1349 
	`¥ötf
("host");

1350 if(
	`VAL_IS_FIELD
(
d°
))

1351 
	`¥ötf
("FIELD");

1352 if(
	`VAL_IS_INT
(
d°
))

1353 
	`¥ötf
("INT");

1354 if(
	`VAL_IS_FLOAT
(
d°
))

1355 
	`¥ötf
("float");

1356 if(
	`VAL_IS_REVERSE
(
d°
))

1357 
	`¥ötf
("reverse");

1358 
	`¥ötf
("??");

1360 
	`¥ötf
("\n");

1363 
size_t
 
size
 = 0;

1365 
Regi°î
 *
§c
 = 
	`evÆ
(
	`MOVE_SRC
(
pc
), &
tu∂e
, &
ﬁd_pc
, 
ªg
);

1366 
Regi°î
 *
d°
 = 
	`evÆ_d°
(
	`MOVE_DST
(
pc
), &
ﬁd_pc
, 
ªg
, &
size
);

1368 
	`mem˝y
(
d°
, 
§c
, 
size
);

1370 } i‡(
	`ALLOC
(
pc
)) {

1372 c⁄° *
ﬁd_pc
 = 
pc
+2;

1373 
tu∂e_t
 *
d°
;

1375 #i‡
	`deföed
(
DEBUG_INSTRS
Ë|| deföed(
DEBUG_ALLOCS
)

1377 
tu∂e_ty≥
 
ty≥
 = 
	`ALLOC_TYPE
(
pc
);

1378 
	`¥ötf
("ALLOC %s\n", 
tu∂e_«mes
[
ty≥
]);

1382 
d°
 = 
	`evÆ
(
	`ALLOC_DST
(
pc
), &
tu∂e
, &
ﬁd_pc
, 
ªg
);

1384 *
d°
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
	`ALLOC_TYPE
(
pc
)));

1385 
	`mem£t
(*
d°
, 0, 
	`TYPE_SIZE
(
	`ALLOC_TYPE
(
pc
)));

1386 
	`TUPLE_TYPE
(*
d°
Ë
	`ALLOC_TYPE
(
pc
);

1387 } i‡(
	`CALL
(
pc
)) {

1388 
Regi°î
 *
d°
 = &
ªg
[
	`CALL_DST
(
pc
)];

1389 
Regi°î
 
¨gs
[
	`CALL_ARGS
(
pc
)];

1391 
	`as£π
(
	`CALL_ARGS
(
pc
) <= 5);

1393 #ifde‡
DEBUG_INSTRS


1394 
	`¥ötf
("CALL %d (%d)\n", 
	`CALL_ID
(
pc
), 
	`CALL_ARGS
(pc));

1397 
i
;

1398 c⁄° *
ﬁd_pc
 = 
pc
+2;

1399 
i
 = 0; i < 
	`CALL_ARGS
(
pc
); i++) {

1400 
vÆue
 = 
	`CALL_VAL
(
ﬁd_pc
);

1401 
ﬁd_pc
++;

1402 
¨gs
[
i
] = 
	`MELD_CONVERT_PTR_TO_REG
(
	`evÆ
(
vÆue
, &
tu∂e
, &
ﬁd_pc
, 
ªg
));

1405 
	`CALL_ARGS
(
pc
)) {

1409 *
d°
 = 
	`CALL_FUNC
(
pc
)();

1412 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0]);

1415 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1]);

1418 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2]);

1421 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2],árgs[3]);

1424 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2],árgs[3],árgs[4]);

1430  
RET_RET
;

1431 
	}
}

1434 
	$tu∂e_¥öt
(
tu∂e_t
 
tu∂e
, 
FILE
 *
Â
)

1436 
tu∂e_ty≥
 = 
	`TUPLE_TYPE
(
tu∂e
);

1437 
j
;

1439 
	`Ârötf
(
Â
, "%s(", 
	`TYPE_NAME
(
tu∂e_ty≥
));

1440 
j
 = 0; j < 
	`TYPE_NOARGS
(
tu∂e_ty≥
); ++j) {

1441 *
fõld
 = 
	`GET_TUPLE_FIELD
(
tu∂e
, 
j
);

1443 i‡(
j
 > 0)

1444 
	`Ârötf
(
Â
, ", ");

1446 
	`TYPE_ARG_TYPE
(
tu∂e_ty≥
, 
j
)) {

1447 
FIELD_INT
:

1448 #i‚de‡
BBSIM


1449 
	`Ârötf
(
Â
, "%ld", 
	`MELD_INT
(
fõld
));

1451 
	`Ârötf
(
Â
, "%d", 
	`MELD_INT
(
fõld
));

1454 
FIELD_FLOAT
:

1455 
	`Ârötf
(
Â
, "%f", ()
	`MELD_FLOAT
(
fõld
));

1457 
FIELD_ADDR
:

1458 
	`Ârötf
(
Â
, "%p", 
	`MELD_PTR
(
fõld
));

1460 
FIELD_LIST_INT
:

1461 
	`Ârötf
(
Â
, "li°_öt[%d][%p]", 
	`li°_tŸÆ
(
	`MELD_LIST
(
fõld
)),

1462 
	`MELD_LIST
(
fõld
));

1464 
FIELD_LIST_FLOAT
:

1465 
	`Ârötf
(
Â
, "li°_Êﬂt[%d][%p]", 
	`li°_tŸÆ
(
	`MELD_LIST
(
fõld
)),

1466 
	`MELD_LIST
(
fõld
));

1468 
FIELD_LIST_ADDR
:

1469 
	`Ârötf
(
Â
, "li°_addr[%p]", *(**)
fõld
);

1471 
FIELD_SET_INT
:

1472 
	`Ârötf
(
Â
, "£t_öt[%d][%p]", 
	`£t_tŸÆ
(
	`MELD_SET
(
fõld
)),

1473 
	`MELD_SET
(
fõld
));

1475 
FIELD_SET_FLOAT
:

1476 
	`Ârötf
(
Â
, "£t_Êﬂt[%d][%p]", 
	`£t_tŸÆ
(
	`MELD_SET
(
fõld
)),

1477 
	`MELD_SET
(
fõld
));

1479 
FIELD_TYPE
:

1480 
	`Ârötf
(
Â
, "%s", 
	`TYPE_NAME
(
	`MELD_INT
(
fõld
)));

1483 
	`as£π
(0);

1487 
	`Ârötf
(
Â
, ")");

1488 
	}
}

1490 
	$Á˘s_dump
()

1492 
i
;

1494 
i
 = 0; i < 
NUM_TYPES
; i++) {

1496 i‡(
TUPLES
[
i
].
hód
 =
NULL
)

1505 
	`Ârötf
(
°dîr
, "tu∂ê%†—y≥ %d)\n", 
tu∂e_«mes
[
i
], i);

1506 
tu∂e_íåy
 *
tu∂eE¡ry
;

1507 
tu∂eE¡ry
 = 
TUPLES
[
i
].
hód
;Åu∂eE¡ry !
NULL
;Åu∂eE¡ry =Åu∂eE¡ry->
√xt
) {

1508 
	`Ârötf
(
°dîr
, " ");

1509 
	`tu∂e_¥öt
(
tu∂eE¡ry
->
tu∂e
, 
°dîr
);

1510 
	`Ârötf
(
°dîr
, "x%d\n", 
tu∂eE¡ry
->
ªc‹ds
.
cou¡
);

1513 
	}
}

1516 
	$¥öt_¥ogøm_öfo
()

1519 
i
;

1520 
i
 = 0; i < 
NUM_TYPES
; ++i) {

1521 
	`¥ötf
("Tu∂ê(%s:%d:%dË", 
tu∂e_«mes
[
i
], i, 
	`TYPE_SIZE
(i));

1523 
	`¥ötf
("[");

1524 if(
	`TYPE_IS_AGG
(
i
))

1525 
	`¥ötf
("agg");

1526 if(
	`TYPE_IS_PERSISTENT
(
i
))

1527 
	`¥ötf
("per");

1528 if(
	`TYPE_IS_LINEAR
(
i
))

1529 
	`¥ötf
("linear");

1530 if(
	`TYPE_IS_ROUTING
(
i
))

1531 
	`¥ötf
("route");

1532 if(
	`TYPE_IS_PROVED
(
i
))

1533 
	`¥ötf
("proved");

1534 
	`¥ötf
("] ");

1536 
	`¥ötf
("num_args:%d deltas:%d off:%d ;árgs(offset,árg_size): ",

1537 
	`TYPE_NOARGS
(
i
), 
	`TYPE_NODELTAS
(i), 
	`TYPE_OFFSET
(i));

1539 
j
;

1540 
j
 = 0; j < 
	`TYPE_NOARGS
(
i
); ++j) {

1541 
	`¥ötf
(" %d:%d", 
	`TYPE_ARG_OFFSET
(
i
, 
j
), 
	`TYPE_ARG_SIZE
(i, j));

1543 
	`¥ötf
("\n");

1545 
	}
}

	@meldinterp-runtime.witoutinstru/core.h

1 #i‚de‡
__CORE_H_


2 
	#__CORE_H_


	)

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

7 
	~"≠i.h
"

8 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


9 
	~"modñ.h
"

15 
	#TUPLE_ALLOC_CHECKS
 1

	)

18 
	#IF
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x60)

	)

19 
	#ELSE
(
x
Ë((*(c⁄° *)(x)Ë=0x02)

	)

20 
	#ITER
(
x
Ë(((*(c⁄° *)(x))&0xffË=0xa0)

	)

21 
	#NEXT
(
x
Ë((*(c⁄° *)(x)Ë=0x01)

	)

22 
	#SEND
(
x
Ë(((*(c⁄° *)(x))&0xfcË=0x08)

	)

23 
	#REMOVE
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x80)

	)

24 
	#OP
(
x
Ë(((*(c⁄° *)(x))&0xc0Ë=0xc0)

	)

25 
	#MOVE
(
x
Ë(((*(c⁄° *)(x))&0xf0Ë=0x30)

	)

26 
	#ALLOC
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x40)

	)

27 
	#RETURN
(
x
Ë((*(c⁄° *)(x)Ë=0x00)

	)

28 
	#CALL
(
x
Ë(((*(c⁄° *)(x)Ë& 0xf0Ë=0x20)

	)

30 
	#IF_REG
(
x
Ë((*(c⁄° *)(x))&0x1f)

	)

31 
	#IF_JUMP
(
x
Ë(*(*)((c⁄° *)(x)+1))

	)

32 
	#IF_BASE
 3

	)

34 
	#ITER_TYPE
(
x
Ë((*(c⁄° *)((x)+1))&0x7f)

	)

35 
	#ITER_JUMP
(
x
Ë(*(*)((c⁄° *)((x)+2)))

	)

36 
	#ITER_MATCH_END
(
x
Ë(((*(c⁄° *)((x)+1))&0xc0Ë=0x40)

	)

37 
	#ITER_MATCH_NONE
(
x
Ë(((*(c⁄° *)((x)+1))&0xc0Ë=0xc0)

	)

38 
	#ITER_MATCH_FIELD
(
x
Ë(*(c⁄° *)(x))

	)

39 
	#ITER_BASE
 4

	)

41 
	#ITER_MATCH_VAL
(
x
Ë(((*(c⁄° *)((x)+1))&0x3f))

	)

42 
	#SEND_MSG
(
x
) ((((*(const *)(x))&0x3) << 3) | \

43 (((*(c⁄° *)((
x
)+1))&0xe0Ë>> 5))

	)

44 
	#SEND_RT
(
x
Ë((*(c⁄° *)((x)+1))&0x1f)

	)

45 
	#SEND_DELAY
(
x
Ë(*(c⁄° *)((x)+2))

	)

46 
	#REMOVE_REG
(
x
Ë((*(c⁄° *)(x))&0x1f)

	)

48 
	#SEND_ARG1
(
x
Ë((*((c⁄° *)(x)+2)Ë& 0x3f)

	)

50 
	#OP_ARG1
(
x
Ë(((*(c⁄° *)(x)Ë& 0x3f))

	)

51 
	#OP_ARG2
(
x
Ë(((*(c⁄° *)((x)+1)Ë& 0xfcË>> 2)

	)

52 
	#OP_OP
(
x
Ë((*(c⁄° *)((x)+2)Ë& 0x1f)

	)

53 
	#OP_DST
(
x
) ((((*(const *)((x)+1)) & 0x03) << 3) | \

54 (((*(c⁄° *)((
x
)+2)Ë& 0xe0Ë>> 5))

	)

56 
	#MOVE_SRC
(
x
) ((((*(const *)(x))&0xf) << 2) | \

57 (((*(c⁄° *)((
x
)+1))&0xc0Ë>> 6))

	)

58 
	#MOVE_DST
(
x
Ë(((*(c⁄° *)((x)+1))&0x3f))

	)

59 
	#ALLOC_TYPE
(
x
) ((((*(const *)(x))&0x1f) << 2) | \

60 (((*(c⁄° *)(
x
+1))&0xc0Ë>> 6))

	)

61 
	#ALLOC_DST
(
x
Ë((*(c⁄° *)((x)+1))&0x3f)

	)

63 
	#CALL_VAL
(
x
Ë(*(c⁄° *)(x))

	)

64 
	#CALL_DST
(
x
Ë((*(c⁄° *)((x)+1)Ë& 0x1f)

	)

65 
	#CALL_ID
(
x
) ((((*(const *)((x))) & 0x0f) << 3) | \

66 (((*(c⁄° *)((
x
)+1)Ë& 0xe0Ë>> 5))

	)

68 
	#CALL_ARGS
(
x
Ë(
exã∫_fun˘s_¨gs
[
	`CALL_ID
(x)])

	)

69 
	#CALL_FUNC
(
x
Ë(
exã∫_fun˘s
[
	`CALL_ID
(x)])

	)

71 
	#OP_NEQF
 0x0

	)

72 
	#OP_NEQI
 0x1

	)

73 
	#OP_EQF
 0x2

	)

74 
	#OP_EQI
 0x3

	)

75 
	#OP_LESSF
 0x4

	)

76 
	#OP_LESSI
 0x5

	)

77 
	#OP_LESSEQF
 0x6

	)

78 
	#OP_LESSEQI
 0x7

	)

79 
	#OP_GREATERF
 0x8

	)

80 
	#OP_GREATERI
 0x9

	)

81 
	#OP_GREATEREQF
 0xa

	)

82 
	#OP_GREATEREQI
 0xb

	)

83 
	#OP_MODF
 0xc

	)

84 
	#OP_MODI
 0xd

	)

85 
	#OP_PLUSF
 0xe

	)

86 
	#OP_PLUSI
 0xf

	)

87 
	#OP_MINUSF
 0x10

	)

88 
	#OP_MINUSI
 0x11

	)

89 
	#OP_TIMESF
 0x12

	)

90 
	#OP_TIMESI
 0x13

	)

91 
	#OP_DIVF
 0x14

	)

92 
	#OP_DIVI
 0x15

	)

93 
	#OP_NEQA
 0x16

	)

94 
	#OP_EQA
 0x17

	)

96 
	#VAL_IS_REG
(
x
Ë(((c⁄° )(x)Ë& 0x20)

	)

97 
	#VAL_IS_TUPLE
(
x
Ë(((c⁄° )(x)Ë=0x1f)

	)

98 
	#VAL_IS_FLOAT
(
x
Ë(((c⁄° )(x)Ë=0x00)

	)

99 
	#VAL_IS_INT
(
x
Ë(((c⁄° )(x)Ë=0x01)

	)

100 
	#VAL_IS_FIELD
(
x
Ë(((c⁄° )(x)Ë=0x02)

	)

101 
	#VAL_IS_HOST
(
x
Ë(((c⁄° )(x)Ë=0x03)

	)

102 
	#VAL_IS_REVERSE
(
x
Ë(((c⁄° )(x)Ë=0x04)

	)

104 
	#VAL_REG
(
x
Ë(((c⁄° )(x)Ë& 0x1f)

	)

105 
	#VAL_FIELD_NUM
(
x
Ë((*(c⁄° *)(x)Ë& 0xff)

	)

106 
	#VAL_FIELD_REG
(
x
Ë((*(c⁄° *)((x)+1)Ë& 0x1f)

	)

108 
	#TYPE_DESCRIPTOR_SIZE
 7

	)

109 
	#DELTA_SIZE
 2

	)

110 
	#TYPE_FIELD_SIZE
 1

	)

111 
	#TYPE_FIELD_TYPE
 

	)

113 
	#TUPLE_TYPE
(
x
Ë(*(
TYPE_FIELD_TYPE
 *)(x))

	)

114 
	#TUPLE_FIELD
(
x
,
off
Ë((*)(((*)(x)Ë+ 
TYPE_FIELD_SIZE
 + (off)))

	)

116 
	#TYPE_OFFSET
(
x
Ë(
mñd_¥og
[1 + (x)])

	)

117 
	#TYPE_DESCRIPTOR
(
x
Ë((*)(
mñd_¥og
 + 
	`TYPE_OFFSET
(x)))

	)

119 
	#TYPE_PROPERTIES
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 2))

	)

120 
	#TYPE_AGGREGATE
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 3))

	)

121 
	#TYPE_NOARGS
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 5))

	)

122 
	#TYPE_STRATIFICATION_ROUND
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(x)+5))

	)

123 
	#TYPE_IS_STRATIFIED
(
x
Ë(
	`TYPE_STRATIFICATION_ROUND
(xË> 0)

	)

124 
	#TYPE_ARGS_DESC
(
x
Ë((*)(
	`TYPE_DESCRIPTOR
(x)+
TYPE_DESCRIPTOR_SIZE
))

	)

125 
	#TYPE_NODELTAS
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 6))

	)

126 
	#TYPE_DELTAS
(
x
Ë(
	`TYPE_ARGS_DESC
(xË+ 1*
	`TYPE_NOARGS
(x))

	)

127 
	#TYPE_START
(
x
Ë((*)(
mñd_¥og
 + *(*)
	`TYPE_DESCRIPTOR
(x)))

	)

128 
	#TYPE_NAME
(
x
Ë(
tu∂e_«mes
[x])

	)

129 
	#TYPE_ARG_DESC
(
x
, 
f
Ë((*)(
	`TYPE_ARGS_DESC
(x)+1*(f)))

	)

130 
	#TYPE_ARG_TYPE
(
x
, 
f
Ë(()(*
	`TYPE_ARG_DESC
(x, f)))

	)

132 
	#TYPE_SIZE
(
x
Ë(
¨gumíts
[(xË* 2 + 1])

	)

133 
	#TYPE_ARGS
(
x
Ë(
¨gumíts
 +árgumíts[(xË* 2])

	)

135 
	#TYPE_ARG
(
x
, 
f
Ë(
	`TYPE_ARGS
(x)+2*(f))

	)

136 
	#TYPE_ARG_SIZE
(
x
, 
f
Ë(*
	`TYPE_ARG
(x, f))

	)

137 
	#TYPE_ARG_OFFSET
(
x
, 
f
Ë(*(
	`TYPE_ARG
(x, fË+ 1))

	)

139 
	#SET_TUPLE_FIELD
(
tu∂e
, 
fõld
, 
d©a
) \

140 
	`mem˝y
(
	`TUPLE_FIELD
(
tu∂e
, 
	`TYPE_ARG_OFFSET
(
	`TUPLE_TYPE
—u∂e), 
fõld
)), \

141 
d©a
, 
	`TYPE_ARG_SIZE
(
	`TUPLE_TYPE
(
tu∂e
), 
fõld
))

	)

142 
	#GET_TUPLE_FIELD
(
tu∂e
, 
fõld
) \

143 
	`TUPLE_FIELD
(
tu∂e
, 
	`TYPE_ARG_OFFSET
(
	`TUPLE_TYPE
—u∂e), 
fõld
))

	)

144 
	#GET_TUPLE_SIZE
(
tu∂e
, 
fõld
) \

145 
	`TYPE_ARG_SIZE
(
	`TUPLE_TYPE
(
tu∂e
), 
fõld
)

	)

147 
	#TYPE_IS_AGG
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x01)

	)

148 
	#TYPE_IS_PERSISTENT
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x02)

	)

149 
	#TYPE_IS_LINEAR
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x04)

	)

150 
	#TYPE_IS_DELETE
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x08)

	)

151 
	#TYPE_IS_SCHEDULE
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x10)

	)

152 
	#TYPE_IS_ROUTING
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x20)

	)

153 
	#TYPE_IS_PROVED
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x40)

	)

155 
	#AGG_AGG
(
x
Ë(((xË& (0xf0)Ë>> 4)

	)

156 
	#AGG_FIELD
(
x
Ë((xË& 0x0f)

	)

158 
	#AGG_NONE
 0

	)

159 
	#AGG_FIRST
 1

	)

160 
	#AGG_MAX_INT
 2

	)

161 
	#AGG_MIN_INT
 3

	)

162 
	#AGG_SUM_INT
 4

	)

163 
	#AGG_MAX_FLOAT
 5

	)

164 
	#AGG_MIN_FLOAT
 6

	)

165 
	#AGG_SUM_FLOAT
 7

	)

166 
	#AGG_SET_UNION_INT
 8

	)

167 
	#AGG_SET_UNION_FLOAT
 9

	)

168 
	#AGG_SUM_LIST_INT
 10

	)

169 
	#AGG_SUM_LIST_FLOAT
 11

	)

171 
	#FIELD_INT
 0x0

	)

172 
	#FIELD_FLOAT
 0x1

	)

173 
	#FIELD_ADDR
 0x2

	)

174 
	#FIELD_OTHER
 0x2

	)

175 
	#FIELD_LIST_INT
 0x3

	)

176 
	#FIELD_LIST_FLOAT
 0x4

	)

177 
	#FIELD_LIST_ADDR
 0x5

	)

178 
	#FIELD_SET_INT
 0x6

	)

179 
	#FIELD_SET_FLOAT
 0x7

	)

180 
	#FIELD_TYPE
 0x8

	)

182 
	#TYPE_NEIGHBOR
 0

	)

183 
	#TYPE_NEIGHBORCOUNT
 1

	)

184 
	#TYPE_VACANT
 2

	)

185 
	#TYPE_SETCOLOR
 3

	)

186 
	#TYPE_SETCOLOR2
 4

	)

189 
	#NUM_TYPES
 (
mñd_¥og
[0])

	)

191 
	#DELTA_TYPE
(
‹i
, 
id
Ë(*(*)(
dñès
[‹i] + (id)*
DELTA_SIZE
))

	)

192 
	#DELTA_POSITION
(
‹i
, 
id
Ë(*(*)(
dñès
[‹i] + (id)*
DELTA_SIZE
 + 1))

	)

193 
	#DELTA_WITH
(
‹i
Ë(
dñè_sizes
[‹i])

	)

194 
	#DELTA_TOTAL
(
‹i
Ë(
dñè_sizes
[‹i])

	)

196 
	#RET_RET
 0

	)

197 
	#RET_NEXT
 1

	)

199 c⁄° 
mñd_¥og
[];

200 
Regi°î
 (*
	texã∫_fun˘_ty≥
)();

201 
exã∫_fun˘_ty≥
 
exã∫_fun˘s
[];

202 
exã∫_fun˘s_¨gs
[];

203 *
tu∂e_«mes
[];

204 *
¨gumíts
;

205 *
dñè_sizes
;

207 
ölöe
 
tu∂e_t


208 
	$tu∂e_Æloc
(
tu∂e_ty≥
 
ty≥
)

210 #ifde‡
TUPLE_ALLOC_CHECKS


211 if(
ty≥
 >
NUM_TYPES
 ||Åype < 0) {

212 
	`Ârötf
(
°dîr
, "UƒecognizedÅy≥: %d\n", 
ty≥
);

213 
	`exô
(
EXIT_FAILURE
);

217 
tu∂e_t
 
tu∂e
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
ty≥
));

219 
	`TUPLE_TYPE
(
tu∂e
Ë
ty≥
;

221 #ifde‡
TUPLE_ALLOC_DEBUG


222 
	`¥ötf
("New %s(%dËtu∂e\n", 
tu∂e_«mes
[
ty≥
],Åype);

225  
tu∂e
;

226 
	}
}

229 
tu∂e_h™dÀ
(
tu∂e_t
 
tu∂e
, 
isNew
, 
Regi°î
 *
ªg
);

230 
tu∂e_£nd
(
tu∂e_t
 
tu∂e
, *
π
, 
mñd_öt
 
dñay
, 
isNew
);

231 
tu∂e_do_h™dÀ
(
tu∂e_ty≥
 
ty≥
, *
tu∂e
, 
isNew
, 
Regi°î
 *
ªg
);

232 
tu∂e_¥o˚ss
(
tu∂e_t
 
tu∂e
, *
pc
,

233 
isNew
, 
Regi°î
 *
ªg
);

234 
tu∂e_¥öt
(
tu∂e_t
 
tu∂e
, 
FILE
 *
Â
);

237 
ölöe
 

238 
	$tu∂e_dump
(*
tu∂e
)

240 
	`tu∂e_¥öt
(
tu∂e
, 
°dîr
);

241 
	`Ârötf
(
°dîr
, "\n");

242 
	}
}

244 
¥öt_¥ogøm_öfo
();

246 
öô_dñès
();

247 
öô_fõlds
();

248 
Á˘s_dump
();

249 
öô_c⁄°s
();

251 
tu∂e_íåy
* 
queue_íqueue
(
tu∂e_queue
 *
queue
, 
tu∂e_t
 
tu∂e
, 
ªc‹d_ty≥
 
isNew
);

252 
boﬁ
 
queue_is_em±y
(
tu∂e_queue
 *
queue
);

253 
tu∂e_t
 
queue_dequeue
(
tu∂e_queue
 *
queue
, *
isNew
);

254 
tu∂e_t
 
queue_p›_tu∂e
(
tu∂e_queue
 *
queue
);

255 
queue_push_tu∂e
(
tu∂e_queue
 *
queue
, 
tu∂e_íåy
 *
íåy
);

257 
ölöe
 

258 
	$queue_öô
(
tu∂e_queue
 *
queue
)

260 
queue
->
hód
 = queue->
èû
 = 
NULL
;

261 
	}
}

263 
ölöe
 
boﬁ


264 
	$p_em±y
(
tu∂e_pqueue
 *
q
)

266  
q
->
queue
 =
NULL
;

267 
	}
}

269 
ölöe
 
tu∂e_≥¡ry
*

270 
	$p_≥ek
(
tu∂e_pqueue
 *
q
)

272  
q
->
queue
;

273 
	}
}

275 
tu∂e_≥¡ry
 *
p_dequeue
(
tu∂e_pqueue
 *
q
);

276 
p_íqueue
(
tu∂e_pqueue
 *
q
, 
mñd_öt
 
¥i‹ôy
, 
tu∂e_t
 
tu∂e
,

277 *
π
, 
ªc‹d_ty≥
 
isNew
);

279 
tu∂e_ty≥
 
TYPE_INIT
;

280 
tu∂e_ty≥
 
TYPE_EDGE
;

281 
tu∂e_ty≥
 
TYPE_COLOCATED
;

282 
tu∂e_ty≥
 
TYPE_PROVED
;

283 
tu∂e_ty≥
 
TYPE_TERMINATE
;

	@meldinterp-runtime.witoutinstru/list_runtime.c

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~"../sy°em/myas£π.h
"

7 
	~"li°_ru¡ime.h
"

8 
	~"≠i.h
"

9 
	~"modñ.h
"

11 
li°_des¸ùt‹
 *
	göt_des¸ùt‹
 = 
NULL
;

12 
li°_des¸ùt‹
 *
	gÊﬂt_des¸ùt‹
 = 
NULL
;

13 
li°_des¸ùt‹
 *
	gnode_des¸ùt‹
 = 
NULL
;

15 
ölöe
 
Li°
*

16 
	$li°_¸óã
(
li°_des¸ùt‹
 *
des¸ùt‹
)

18 
Li°
 *
ªt
 = (Li°*)
	`mÆloc
((List));

20 
ªt
->
tŸÆ
 = 0;

21 
ªt
->
des¸ùt‹
 = descriptor;

22 
ªt
->
hód
 =Ñë->
èû
 = 
NULL
;

24  
ªt
;

25 
	}
}

27 
ölöe
 *

28 
	$li°_¸óã_node
(
Li°
 *
li°
, 
li°_ñemít
 
d©a
, *
√xt
)

30 *
node
 = (*)
	`mÆloc
((*Ë+ 
li°
->
des¸ùt‹
->
size_ñem
);

32 
	`LIST_NEXT
(
node
Ë
√xt
;

34 
	`mem˝y
(
	`LIST_DATA
(
node
), 
d©a
, 
li°
->
des¸ùt‹
->
size_ñem
);

36  
node
;

37 
	}
}

39 
ölöe
 

40 
	$li°_push_hód
(
Li°
 *
li°
, 
li°_ñemít
 
d©a
)

42 *
node
 = 
	`li°_¸óã_node
(
li°
, 
d©a
,Üi°->
hód
);

44 
li°
->
hód
 = 
node
;

46 if(
li°
->
èû
 =
NULL
)

47 
li°
->
èû
 = 
node
;

49 
li°
->
tŸÆ
++;

50 
	}
}

52 
ölöe
 

53 
	$li°_push_èû_node
(
Li°
 *
li°
, *
node
)

55 if(
li°
->
èû
 !
NULL
)

56 
	`LIST_NEXT
(
li°
->
èû
Ë
node
;

57 
li°
->
èû
 = 
node
;

58 if(
li°
->
hód
 =
NULL
)

59 
li°
->
hód
 = 
node
;

60 
	`LIST_NEXT
(
node
Ë
NULL
;

61 
li°
->
tŸÆ
++;

62 
	}
}

64 
ölöe
 

65 
	$li°_push_èû
(
Li°
 *
li°
, 
li°_ñemít
 
d©a
)

67 
	`li°_push_èû_node
(
li°
, 
	`li°_¸óã_node
÷i°, 
d©a
, 
NULL
));

68 
	}
}

70 
ölöe
 *

71 
	$li°_p›_hód
(
Li°
 *
li°
)

73 if(
li°
->
hód
 !
NULL
) {

74 *
±r
 = 
li°
->
hód
;

76 
li°
->
hód
 = 
	`LIST_NEXT
(
±r
);

78 if(
li°
->
hód
 =
NULL
)

79 
li°
->
èû
 = 
NULL
;

81 --
li°
->
tŸÆ
;

83  
±r
;

85  
NULL
;

86 
	}
}

88 
Li°
 *
	$li°_öt_¸óã
()

90 
	`as£π
(
öt_des¸ùt‹
 !
NULL
);

92  
	`li°_¸óã
(
öt_des¸ùt‹
);

93 
	}
}

95 
Li°
 *
	$li°_Êﬂt_¸óã
()

97 
	`as£π
(
Êﬂt_des¸ùt‹
 !
NULL
);

99  
	`li°_¸óã
(
Êﬂt_des¸ùt‹
);

100 
	}
}

102 
Li°
 *
	$li°_node_¸óã
()

104 
	`as£π
(
node_des¸ùt‹
 !
NULL
);

106  
	`li°_¸óã
(
node_des¸ùt‹
);

107 
	}
}

109 
	$li°_öt_push_hód
(
Li°
 *
li°
, 
mñd_öt
 
d©a
)

111 
	`li°_push_hód
(
li°
, (
li°_ñemít
)&
d©a
);

112 
	}
}

114 
	$li°_öt_push_èû
(
Li°
 *
li°
, 
mñd_öt
 
d©a
)

116 
	`li°_push_èû
(
li°
, (
li°_ñemít
)&
d©a
);

117 
	}
}

119 
	$li°_node_push_hód
(
Li°
 *
li°
, *
d©a
)

121 
	`li°_push_hód
(
li°
, (
li°_ñemít
)&
d©a
);

122 
	}
}

124 
	$li°_node_push_èû
(
Li°
 *
li°
, *
d©a
)

126 
	`li°_push_èû
(
li°
, (
li°_ñemít
)&
d©a
);

127 
	}
}

129 
	$li°_Êﬂt_push_hód
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
)

131 
	`li°_push_hód
(
li°
, (
li°_ñemít
)&
d©a
);

132 
	}
}

134 
	$li°_Êﬂt_push_èû
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
)

136 
	`li°_push_èû
(
li°
, (
li°_ñemít
)&
d©a
);

137 
	}
}

139 
boﬁ
 
	$li°_is_Êﬂt
(
Li°
 *
li°
)

141  
li°
->
des¸ùt‹
 =
Êﬂt_des¸ùt‹
;

142 
	}
}

144 
boﬁ
 
	$li°_is_öt
(
Li°
 *
li°
)

146  
li°
->
des¸ùt‹
 =
öt_des¸ùt‹
;

147 
	}
}

149 
boﬁ
 
	$li°_is_node
(
Li°
 *
li°
)

151  
li°
->
des¸ùt‹
 =
node_des¸ùt‹
;

152 
	}
}

154 
Li°
* 
	$li°_öt_‰om_ve˘‹
(
mñd_öt
 *
vec
, 
size
)

156 
Li°
 *
li°
 = 
	`li°_öt_¸óã
();

157 
i
;

159 
i
 = 0; i < 
size
; ++i)

160 
	`li°_öt_push_èû
(
li°
, 
vec
[
i
]);

162  
li°
;

163 
	}
}

165 
Li°
* 
	$li°_Êﬂt_‰om_ve˘‹
(
mñd_Êﬂt
 *
vec
, 
size
)

167 
Li°
 *
li°
 = 
	`li°_Êﬂt_¸óã
();

168 
i
;

170 
i
 = 0; i < 
size
; ++i)

171 
	`li°_Êﬂt_push_èû
(
li°
, 
vec
[
i
]);

173  
li°
;

174 
	}
}

176 
Li°
* 
	$li°_node_‰om_ve˘‹
(**
vec
, 
size
)

178 
Li°
 *
li°
 = 
	`li°_node_¸óã
();

179 
i
;

181 
i
 = 0; i < 
size
; ++i) {

182 
	`li°_node_push_èû
(
li°
, 
vec
[
i
]);

185  
li°
;

186 
	}
}

188 
	$li°_dñëe
(
Li°
 *
li°
)

190 *
chaö
 = 
li°
->
hód
;

191 *
√xt
;

193 
chaö
) {

194 
√xt
 = 
	`LIST_NEXT
(
chaö
);

195 
	`‰ì
(
chaö
);

196 
chaö
 = 
√xt
;

198 
	`‰ì
(
li°
);

199 
	}
}

201 
	$li°_equÆ
(
Li°
 *
li°1
, Li° *
li°2
)

203 if(
li°1
->
des¸ùt‹
 !
li°2
->descriptor)

206 if(
	`li°_tŸÆ
(
li°1
Ë!li°_tŸÆ(
li°2
))

209 
li°_ôî©‹
 
ô1
 = 
	`li°_gë_ôî©‹
(
li°1
);

210 
li°_ôî©‹
 
ô2
 = 
	`li°_gë_ôî©‹
(
li°2
);

212 
	`li°_ôî©‹_has_√xt
(
ô1
)) {

213 if(!
li°1
->
des¸ùt‹
->
	`equÆ_‚
(
	`li°_ôî©‹_d©a
(
ô1
),Üi°_ôî©‹_d©a(
ô2
)))

216 
ô1
 = 
	`li°_ôî©‹_√xt
(
li°1
);

217 
ô2
 = 
	`li°_ôî©‹_√xt
(
li°2
);

221 
	}
}

223 
	$li°_¥öt
(
Li°
 *
li°
)

225 
li°_ôî©‹
 
ô
 = 
	`li°_gë_ôî©‹
(
li°
);

227 
	`¥ötf
("LIST %∞wôh %dÇodes:\n", 
li°
,Üi°->
tŸÆ
);

229 
	`¥ötf
("\t");

230 
	`li°_ôî©‹_has_√xt
(
ô
)) {

231 
li°
->
des¸ùt‹
->
	`¥öt_‚
(
	`li°_ôî©‹_d©a
(
ô
));

232 
ô
 = 
	`li°_ôî©‹_√xt
(it);

233 i‡(
	`li°_ôî©‹_has_√xt
(
ô
))

234 
	`¥ötf
(" ");

236 
	`¥ötf
("\n");

237 
	}
}

239 
	$li°_ªvî£_fú°
(
Li°
 *
li°
)

241 *
node
 = 
	`li°_p›_hód
(
li°
);

243 i‡(
node
) {

244 
	`li°_push_èû_node
(
li°
, 
node
);

246 
	}
}

248 
Li°
* 
	$li°_c›y
(
Li°
 *
li°
)

250 
Li°
 *
˛⁄e
 = 
	`li°_¸óã
(
li°
->
des¸ùt‹
);

251 
li°_ôî©‹
 
ô
 = 
	`li°_gë_ôî©‹
(
li°
);

253 
	`li°_ôî©‹_has_√xt
(
ô
)) {

254 
	`li°_push_èû
(
˛⁄e
, 
	`li°_ôî©‹_d©a
(
ô
));

256 
ô
 = 
	`li°_ôî©‹_√xt
(it);

259  
˛⁄e
;

260 
	}
}

262 
	#MAXLEN
 20

	)

265 
	$c⁄vît_mñd_öt_ß„
(
mñd_öt
 
d©a
)

267 
buf„r
[
MAXLEN
];

268 
i
=
MAXLEN
-2;

269 
buf„r
[
MAXLEN
-1] = 0;

270 
d©a
) {

271 
d
 = 
d©a
 % 10;

272 
buf„r
[
i
--] = '0'+
d
;

273 
d©a
 = data / 10;

275  
buf„r
+
i
+1;

276 
	}
}

279 
	$¥öt_öt_li°_ñem
(
li°_ñemít
 
d©a
)

281 i‡((
mñd_öt
) <= ())

282 
	`¥ötf
("%d", ()
	`MELD_INT
(
d©a
));

284 
	`¥ötf
("%s", 
	`c⁄vît_mñd_öt_ß„
(
	`MELD_INT
(
d©a
)));

285 
	}
}

287 
boﬁ


288 
	$equÆ_öt_li°_ñem
(
li°_ñemít
 
ñ1
,Üi°_ñemíà
ñ2
)

290  
	`MELD_INT
(
ñ1
Ë=MELD_INT(
ñ2
);

291 
	}
}

294 
	$¥öt_Êﬂt_li°_ñem
(
li°_ñemít
 
d©a
)

296 
	`¥ötf
("%f", ()(
	`MELD_FLOAT
(
d©a
)));

297 
	}
}

299 
boﬁ


300 
	$equÆ_Êﬂt_li°_ñem
(
li°_ñemít
 
ñ1
,Üi°_ñemíà
ñ2
)

302  
	`MELD_FLOAT
(
ñ1
Ë=MELD_FLOAT(
ñ2
);

303 
	}
}

306 
	$¥öt_node_li°_ñem
(
li°_ñemít
 
d©a
)

308 #ifde‡
PARALLEL_MACHINE


309 
	`¥ötf
(
NODE_FORMAT
, 
	`MELD_NODE
(
d©a
)->
‹dî
);

310 
	`¥ötf
(" %p", 
	`MELD_NODE
(
d©a
));

312 #ifde‡
BBSIM


313 
	`¥ötf
(
NODE_FORMAT
, 
	`MELD_NODE
(
d©a
)->
id
);

316 
	}
}

318 
boﬁ


319 
	$equÆ_node_li°_ñem
(
li°_ñemít
 
ñ1
,Üi°_ñemíà
ñ2
)

321  
	`MELD_PTR
(
ñ1
Ë=MELD_PTR(
ñ2
);

322 
	}
}

325 
	$li°_öô_des¸ùt‹s
()

327 
öt_des¸ùt‹
 = 
	`mÆloc
((
li°_des¸ùt‹
));

328 
öt_des¸ùt‹
->
size_ñem
 = (
mñd_öt
);

329 
öt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_öt_li°_ñem
;

330 
öt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_öt_li°_ñem
;

332 
Êﬂt_des¸ùt‹
 = 
	`mÆloc
((
li°_des¸ùt‹
));

333 
Êﬂt_des¸ùt‹
->
size_ñem
 = (
mñd_Êﬂt
);

334 
Êﬂt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_Êﬂt_li°_ñem
;

335 
Êﬂt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_Êﬂt_li°_ñem
;

337 
node_des¸ùt‹
 = 
	`mÆloc
((
li°_des¸ùt‹
));

338 
node_des¸ùt‹
->
size_ñem
 = (*);

339 
node_des¸ùt‹
->
¥öt_‚
 = 
¥öt_node_li°_ñem
;

340 
node_des¸ùt‹
->
equÆ_‚
 = 
equÆ_node_li°_ñem
;

341 
	}
}

	@meldinterp-runtime.witoutinstru/list_runtime.h

2 #i‚de‡
LIST_RUNTIME_H


3 
	#LIST_RUNTIME_H


	)

5 
	~<°ddef.h
>

7 
	~"≠i.h
"

8 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


9 
	~"modñ.h
"

12 * 
	tli°_ñemít
;

14 
	#LIST_NEXT
(
node
Ë(*(**)“ode))

	)

15 
	#LIST_DATA
(
node
Ë((*)((*)“odeË+ (*)))

	)

17 (*
	tli°_¥öt_‚
)(
	tli°_ñemít
);

18 
	$boﬁ
 (*
	tli°_equÆ_‚
)(
	tli°_ñemít
,Üist_element);

20 
	s_li°_des¸ùt‹


22 
size_t
 
size_ñem
;

23 
li°_¥öt_‚
 
¥öt_‚
;

24 
li°_equÆ_‚
 
equÆ_‚
;

25 } 
	tli°_des¸ùt‹
;

27 
_Li°
 
	tLi°
;

29 
	s_Li°
 {

30 *
hód
;

31 *
èû
;

32 
tŸÆ
;

33 
li°_des¸ùt‹
 *
des¸ùt‹
;

36 
	`li°_öô_des¸ùt‹s
();

38 
Li°
 *
	`li°_öt_¸óã
();

39 
Li°
 *
	`li°_Êﬂt_¸óã
();

40 
Li°
 *
	`li°_node_¸óã
();

42 
	`li°_dñëe
(
Li°
 *
li°
);

44 
	`li°_equÆ
(
Li°
 *
li°1
, Li° *
li°2
);

46 
	`li°_¥öt
(
Li°
 *
li°
);

48 
	`li°_ªvî£_fú°
(
Li°
 *
li°
);

50 
Li°
 *
	`li°_c›y
(Li° *
li°
);

52 
ölöe
 
	$li°_tŸÆ
(
Li°
 *
li°
)

54  
li°
->
tŸÆ
;

55 
	}
}

57 
li°_ñemít
 
	tli°_ôî©‹
;

59 
ölöe


60 
li°_ôî©‹
 
	$li°_gë_ôî©‹
(
Li°
 *
li°
)

62  
li°
->
hód
;

63 
	}
}

65 
ölöe


66 
li°_ôî©‹
 
	$li°_œ°_ôî©‹
(
Li°
 *
li°
)

68  
li°
->
èû
;

69 
	}
}

71 
ölöe


72 
	$li°_ôî©‹_has_√xt
(
li°_ôî©‹
 
ôî©‹
)

74  
ôî©‹
 !
NULL
;

75 
	}
}

77 
ölöe


78 
li°_ôî©‹
 
	$li°_ôî©‹_√xt
(
li°_ôî©‹
 
ôî©‹
)

80  
	`LIST_NEXT
(
ôî©‹
);

81 
	}
}

83 
ölöe


84 
li°_ñemít
 
	$li°_ôî©‹_d©a
(
li°_ôî©‹
 
ôî©‹
)

86  
	`LIST_DATA
(
ôî©‹
);

87 
	}
}

89 
	#li°_ôî©‹_öt
(
ô
Ë(*(
mñd_öt
 *)
	`li°_ôî©‹_d©a
(ô))

	)

90 
	#li°_ôî©‹_Êﬂt
(
ô
Ë(*(
mñd_Êﬂt
 *)
	`li°_ôî©‹_d©a
(ô))

	)

91 
	#li°_ôî©‹_node
(
ô
Ë(*(
Node
 **)
	`li°_ôî©‹_d©a
(ô))

	)

93 
li°_öt_push_hód
(
Li°
 *
li°
, 
mñd_öt
 
d©a
);

94 
li°_öt_push_èû
(
Li°
 *
li°
, 
mñd_öt
 
d©a
);

96 
li°_Êﬂt_push_hód
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
);

97 
li°_Êﬂt_push_èû
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
);

99 
li°_node_push_hód
(
Li°
 *
li°
, *
d©a
);

100 
li°_node_push_èû
(
Li°
 *
li°
, *
d©a
);

102 
boﬁ
 
li°_is_Êﬂt
(
Li°
 *
li°
);

103 
boﬁ
 
li°_is_öt
(
Li°
 *
li°
);

104 
boﬁ
 
li°_is_node
(
Li°
 *
li°
);

106 
Li°
* 
li°_Êﬂt_‰om_ve˘‹
(
mñd_Êﬂt
 *
vec
, 
size
);

107 
Li°
* 
li°_öt_‰om_ve˘‹
(
mñd_öt
 *
vec
, 
size
);

108 
Li°
* 
li°_node_‰om_ve˘‹
(**
vec
, 
size
);

110 * 
c⁄vît_mñd_öt_ß„
(
mñd_öt
 
d©a
);

	@meldinterp-runtime.witoutinstru/set_runtime.c

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~"../sy°em/myas£π.h
"

7 
	~"£t_ru¡ime.h
"

9 
£t_des¸ùt‹
 *
	göt_des¸ùt‹
 = 
NULL
;

10 
£t_des¸ùt‹
 *
	gÊﬂt_des¸ùt‹
 = 
NULL
;

12 
ölöe
 
Së
*

13 
	$£t_¸óã
(
£t_des¸ùt‹
 *
des¸ùt‹
)

15 
Së
* 
£t
 = (Së*)
	`mÆloc
((Set));

17 
£t
->
°¨t
 = 
NULL
;

18 
£t
->
√Àms
 = 0;

19 
£t
->
des¸ùt‹
 = descriptor;

21  
£t
;

22 
	}
}

24 
	#ALLOC_AND_SET
(
£t
, 
d©a
, 
√xt
, 
de°
) \

25 
de°
 = 
	`mÆloc
(
£t
->
des¸ùt‹
->
size_ñem
 + (*)); \

26 
	`mem˝y
(
de°
, 
d©a
, 
£t
->
des¸ùt‹
->
size_ñem
); \

27 *((**)((*)(
de°
Ë+ 
£t
->
des¸ùt‹
->
size_ñem
)Ë
√xt
; \

28 
£t
->
√Àms
++

	)

30 
	#ADVANCE_NEXT
(
£t
, 
±r
Ë*(**)’å + së->
des¸ùt‹
->
size_ñem
)

	)

33 
	$£t_ö£π
(
Së
 *
£t
, 
£t_d©a
 
d©a
)

35 *
bef‹e
 = 
NULL
;

36 *
cuºít
 = 
£t
->
°¨t
;

38 
cuºít
) {

39 
£t_d©a
 
ñem
 = 
cuºít
;

41 if(
£t
->
des¸ùt‹
->
	`cmp_‚
(
d©a
, 
ñem
)) {

45 if(
bef‹e
 && 
£t
->
des¸ùt‹
->
	`equÆ_‚
(
d©a
, before))

48 i‡(
bef‹e
) {

49 **
bef‹íext
 = (**)(
bef‹e
 + 
£t
->
des¸ùt‹
->
size_ñem
);

50 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
cuºít
, *
bef‹íext
);

52 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
cuºít
, së->
°¨t
);

59 
bef‹e
 = 
cuºít
;

60 
cuºít
 = 
	`ADVANCE_NEXT
(
£t
, current);

63 i‡(
bef‹e
) {

65 i‡(
£t
->
des¸ùt‹
->
	`equÆ_‚
(
d©a
, 
bef‹e
))

68 **
bef‹íext
 = (**)(
bef‹e
 + 
£t
->
des¸ùt‹
->
size_ñem
);

69 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
NULL
, *
bef‹íext
);

71 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
NULL
, së->
°¨t
);

73 
	}
}

76 
	$com∑ª_öt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

78 
i1
 = *(*)
a1
;

79 
i2
 = *(*)
a2
;

81  
i1
 < 
i2
;

82 
	}
}

85 
	$equÆ_öt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

87 
i1
 = *(*)
a1
;

88 
i2
 = *(*)
a2
;

90  
i1
 =
i2
;

91 
	}
}

94 
	$¥öt_öt_vÆue
(
£t_d©a
 
a
)

96 
	`¥ötf
("%d", *(*)
a
);

97 
	}
}

99 
Së
*

100 
	$£t_öt_¸óã
()

102 
	`as£π
(
öt_des¸ùt‹
 !
NULL
);

103  
	`£t_¸óã
(
öt_des¸ùt‹
);

104 
	}
}

107 
	$com∑ª_Êﬂt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

109 
f1
 = *(*)
a1
;

110 
f2
 = *(*)
a2
;

112  
f1
 < 
f2
;

113 
	}
}

116 
	$equÆ_Êﬂt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

118 
f1
 = *(*)
a1
;

119 
f2
 = *(*)
a2
;

121  
f1
 =
f2
;

122 
	}
}

125 
	$¥öt_Êﬂt_vÆue
(
£t_d©a
 
a
)

127 
	`¥ötf
("%f", *(*)
a
);

128 
	}
}

130 
Së
*

131 
	$£t_Êﬂt_¸óã
()

133 
	`as£π
(
Êﬂt_des¸ùt‹
 !
NULL
);

134  
	`£t_¸óã
(
Êﬂt_des¸ùt‹
);

135 
	}
}

138 
	$£t_öt_ö£π
(
Së
* 
£t
, 
d©a
)

140 
	`£t_ö£π
(
£t
, (
£t_d©a
)&
d©a
);

141 
	}
}

144 
	$£t_Êﬂt_ö£π
(
Së
* 
£t
, 
d©a
)

146 
	`£t_ö£π
(
£t
, (
£t_d©a
)&
d©a
);

147 
	}
}

150 
	$£t_¥öt
(
Së
 *
£t
)

152 
	`¥ötf
("(Së-Uni⁄ wôh %dÉÀms, %Zu byã†óch [", 
£t
->
√Àms
, së->
des¸ùt‹
->
size_ñem
);

154 * 
cuºít
 = 
£t
->
°¨t
;

155 
isFú°
 = 1;

157 
cuºít
) {

159 if(
isFú°
)

160 
isFú°
 = 0;

162 
	`¥ötf
(", ");

164 
£t
->
des¸ùt‹
->
	`¥öt_‚
((
£t_d©a
)
cuºít
);

166 
cuºít
 = 
	`ADVANCE_NEXT
(
£t
, current);

169 
	`¥ötf
("])\n");

170 
	}
}

172 
	$£t_equÆ
(
Së
 *
£t1
, Së *
£t2
)

174 if(
£t1
->
√Àms
 !
£t2
->nelems)

177 if(
£t1
->
des¸ùt‹
 !
£t2
->descriptor)

180 * 
cuºít1
 = 
£t1
->
°¨t
;

181 * 
cuºít2
 = 
£t2
->
°¨t
;

183 
cuºít1
) {

184 
£t_d©a
 
ñem1
 = (£t_d©a)
cuºít1
;

185 
£t_d©a
 
ñem2
 = (£t_d©a)
cuºít2
;

187 if(!
£t1
->
des¸ùt‹
->
	`equÆ_‚
(
ñem1
, 
ñem2
))

190 
cuºít1
 = 
	`ADVANCE_NEXT
(
£t1
, current1);

191 
cuºít2
 = 
	`ADVANCE_NEXT
(
£t1
, current2);

195 
	}
}

197 
	$£t_dñëe
(
Së
 *
£t
)

199 * 
cuºít
 = 
£t
->
°¨t
;

200 * 
√xt
;

202 
cuºít
) {

204 
√xt
 = 
	`ADVANCE_NEXT
(
£t
, 
cuºít
);

205 
	`‰ì
(
cuºít
);

206 
cuºít
 = 
√xt
;

209 
	`‰ì
(
£t
);

210 
	}
}

213 
	$£t_öô_des¸ùt‹s
()

215 
öt_des¸ùt‹
 = 
	`mÆloc
((
£t_des¸ùt‹
));

216 
öt_des¸ùt‹
->
size_ñem
 = ();

217 
öt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_öt_vÆue
;

218 
öt_des¸ùt‹
->
cmp_‚
 = 
com∑ª_öt_vÆues
;

219 
öt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_öt_vÆues
;

221 
Êﬂt_des¸ùt‹
 = 
	`mÆloc
((
£t_des¸ùt‹
));

222 
Êﬂt_des¸ùt‹
->
size_ñem
 = ();

223 
Êﬂt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_Êﬂt_vÆue
;

224 
Êﬂt_des¸ùt‹
->
cmp_‚
 = 
com∑ª_Êﬂt_vÆues
;

225 
Êﬂt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_Êﬂt_vÆues
;

226 
	}
}

	@meldinterp-runtime.witoutinstru/set_runtime.h

2 #i‚de‡
SET_RUNTIME_H


3 
	#SET_RUNTIME_H


	)

5 
	~<°ddef.h
>

7 * 
	t£t_d©a
;

9 (*
	tcom∑ª_£t_‚
)(
	t£t_d©a
, set_data);

10 (*
	t¥öt_£t_‚
)(
	t£t_d©a
);

12 
	s_£t_des¸ùt‹
 {

13 
com∑ª_£t_‚
 
cmp_‚
;

14 
com∑ª_£t_‚
 
equÆ_‚
;

15 
¥öt_£t_‚
 
¥öt_‚
;

16 
size_t
 
size_ñem
;

17 } 
	t£t_des¸ùt‹
;

19 
	s_Së
 {

20 * 
°¨t
;

21 
√Àms
;

22 
£t_des¸ùt‹
 *
des¸ùt‹
;

23 } 
	tSë
;

25 
	`£t_öô_des¸ùt‹s
();

27 
Së
 *
	`£t_öt_¸óã
();

28 
Së
 *
	`£t_Êﬂt_¸óã
();

30 
	`£t_ö£π
(
Së
 *
£t
, 
£t_d©a
 
d©a
);

31 
	`£t_öt_ö£π
(
Së
 *
£t
, 
d©a
);

32 
	`£t_Êﬂt_ö£π
(
Së
 *
£t
, 
d©a
);

34 
	`£t_equÆ
(
Së
 *
£t1
, Së *
£t2
);

36 
	`£t_dñëe
(
Së
 *
£t
);

38 
	`£t_¥öt
(
Së
 *
£t
);

40 
ölöe


41 
	$£t_tŸÆ
(
Së
 *
£t
)

43  
£t
->
√Àms
;

44 
	}
}

	@meldinterp-runtime/api.h

2 #i‚de‡
API_H


3 
	#API_H


	)

5 
	~<°döt.h
>

7 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


8 
	~"modñ.h
"

11 
Regi°î
 
	tmñd_vÆue
;

13 
	#NODE_FORMAT
 "%lu"

	)

15 
	#MELD_INT
(
x
Ë(*(
mñd_öt
 *)(x))

	)

16 
	#MELD_FLOAT
(
x
Ë(*(
mñd_Êﬂt
 *)(x))

	)

17 
	#MELD_NODE
(
x
Ë(*(
Node
 **)(x))

	)

18 
	#MELD_NODE_ID
(
x
Ë(*(
NodeID
 *)(x))

	)

19 
	#MELD_SET
(
x
Ë(*(
Së
 **)(x))

	)

20 
	#MELD_LIST
(
x
Ë(*(
Li°
 **)(x))

	)

21 
	#MELD_PTR
(
x
Ë(*(**)(x))

	)

23 
	#MELD_CONVERT_INT
(
x
Ë(*(
Regi°î
 *)(
mñd_öt
 *)&(x))

	)

24 
	#MELD_CONVERT_FLOAT
(
x
Ë(*(
Regi°î
 *)(
mñd_Êﬂt
 *)&(x))

	)

25 
	#MELD_CONVERT_LIST
(
x
Ë((
Regi°î
)(x))

	)

27 
	#MELD_CONVERT_REG_TO_PTR
(
x
Ë((*)()(
Regi°î
)(x))

	)

28 
	#MELD_CONVERT_PTR_TO_REG
(
x
Ë((
Regi°î
)()(*)(x))

	)

	@meldinterp-runtime/core.c

1 #ifde‡
MELDVMINSTRU


2 
	~"mñdvm_ö°rumíèti⁄.h
"

5 
	~"≠i.h
"

6 
	~"c‹e.h
"

7 
	~"modñ.h
"

9 
	~"£t_ru¡ime.h
"

10 
	~"li°_ru¡ime.h
"

11 
	~<°dlib.h
>

12 
	~<m©h.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~"../sy°em/myas£π.h
"

16 
	~<°dio.h
>

22 **
	gdñès
 = 
NULL
;

23 *
	gdñè_sizes
 = 
NULL
;

24 *
	g¨gumíts
 = 
NULL
;

25 
tu∂e_ty≥
 
	gTYPE_EDGE
 = -1;

26 
tu∂e_ty≥
 
	gTYPE_INIT
 = -1;

27 
tu∂e_ty≥
 
	gTYPE_COLOCATED
 = -1;

28 
tu∂e_ty≥
 
	gTYPE_PROVED
 = -1;

29 
tu∂e_ty≥
 
	gTYPE_TERMINATE
 = -1;

31 
≥rsi°ít_£t
 *
≥rsi°ít
;

33 
boﬁ


34 
	$queue_is_em±y
(
tu∂e_queue
 *
queue
)

36  
queue
->
hód
 =
NULL
;

37 
	}
}

40 
	$queue_push_tu∂e
(
tu∂e_queue
 *
queue
, 
tu∂e_íåy
 *
íåy
)

42 if(
queue
->
hód
 =
NULL
)

43 
queue
->
hód
 = queue->
èû
 = 
íåy
;

45 
queue
->
èû
->
√xt
 = 
íåy
;

46 
queue
->
èû
 = 
íåy
;

48 
	}
}

50 
tu∂e_t


51 
	$queue_p›_tu∂e
(
tu∂e_queue
 *
queue
)

53 
tu∂e_íåy
 *
íåy
 = 
NULL
;

55 i‡(
queue
->
hód
) {

56 
íåy
 = 
queue
->
hód
;

57 
queue
->
hód
 = queue->hód->
√xt
;

59 i‡(
queue
->
hód
 =
NULL
)

60 
queue
->
èû
 = 
NULL
;

63  
íåy
;

64 
	}
}

66 
tu∂e_t


67 
	$queue_dequeue_pos
(
tu∂e_queue
 *
queue
, 
tu∂e_íåy
 **
pos
)

69 
tu∂e_íåy
 *
íåy
 = *
pos
;

70 
tu∂e_íåy
 *
√xt
 = (*
pos
)->next;

72 i‡(
íåy
 =
queue
->
èû
) {

73 if(
íåy
 =
queue
->
hód
)

74 
queue
->
èû
 = 
NULL
;

76 
queue
->
èû
 = (
tu∂e_íåy
 *)
pos
;

79 *
pos
 = 
√xt
;

81 
tu∂e_t
 
tu∂e
 = 
íåy
->tuple;

82 
	`‰ì
(
íåy
);

84  
tu∂e
;

85 
	}
}

87 
tu∂e_íåy
*

88 
	$queue_íqueue
(
tu∂e_queue
 *
queue
, 
tu∂e_t
 
tu∂e
, 
ªc‹d_ty≥
 
isNew
)

90 
tu∂e_íåy
 *
íåy
 = 
	`mÆloc
((tuple_entry));

92 
íåy
->
tu∂e
 =Åuple;

93 
íåy
->
ªc‹ds
 = 
isNew
;

94 
íåy
->
√xt
 = 
NULL
;

96 
	`queue_push_tu∂e
(
queue
, 
íåy
);

98  
íåy
;

99 
	}
}

101 
tu∂e_t


102 
	$queue_dequeue
(
tu∂e_queue
 *
queue
, *
isNew
)

104 
tu∂e_íåy
 *
íåy
 = 
	`queue_p›_tu∂e
(
queue
);

106 
tu∂e_t
 
tu∂e
 = 
íåy
->tuple;

108 if(
isNew
)

109 *
isNew
 = 
íåy
->
ªc‹ds
.
cou¡
;

111 
	`‰ì
(
íåy
);

113  
tu∂e
;

114 
	}
}

116 
tu∂e_≥¡ry
*

117 
	$p_dequeue
(
tu∂e_pqueue
 *
q
)

119 
tu∂e_≥¡ry
 *
ªt
 = 
q
->
queue
;

121 if(
q
->
queue
 !
NULL
)

122 
q
->
queue
 = q->queue->
√xt
;

124  
ªt
;

125 
	}
}

128 
	$p_íqueue
(
tu∂e_pqueue
 *
queue
, 
mñd_öt
 
¥i‹ôy
, 
tu∂e_t
 
tu∂e
,

129 *
π
, 
ªc‹d_ty≥
 
isNew
)

131 
tu∂e_≥¡ry
 *
íåy
 = 
	`mÆloc
((tuple_pentry));

133 
íåy
->
tu∂e
 =Åuple;

134 
íåy
->
ªc‹ds
 = 
isNew
;

135 
íåy
->
¥i‹ôy
 =Öriority;

136 
íåy
->
π
 =Ñt;

138 
tu∂e_≥¡ry
 **
•Ÿ
;

139 
•Ÿ
 = &(
queue
->queue);

140 *
•Ÿ
 !
NULL
 &&

141 (*
•Ÿ
)->
¥i‹ôy
 <Öriority;

142 
•Ÿ
 = &((*•Ÿ)->
√xt
));

144 
íåy
->
√xt
 = *
•Ÿ
;

145 *
•Ÿ
 = 
íåy
;

146 
	}
}

149 
	$öô_dñès
()

151 
i
;

153 
dñès
 = (**)
	`mÆloc
((*)*
NUM_TYPES
);

154 
dñè_sizes
 = (*)
	`mÆloc
(()*
NUM_TYPES
);

156 
i
 = 0; i < 
NUM_TYPES
; ++i) {

157 
dñè_sizes
[
i
] = 
	`TYPE_NODELTAS
(i);

158 
dñès
[
i
] = (*)
	`TYPE_DELTAS
(i);

160 
	}
}

162 
	gty≥
;

164 
	$öô_fõlds
()

166 
size_t
 
tŸÆ
 = 2*
NUM_TYPES
;

167 
i
, 
j
;

169 
i
 = 0; i < 
NUM_TYPES
; ++i)

170 
tŸÆ
 +
	`TYPE_NOARGS
(
i
) * 2;

172 
¨gumíts
 = 
	`mÆloc
(
tŸÆ
);

173 *
°¨t
 = 
¨gumíts
 + 2*
NUM_TYPES
;

174 
off£t
, 
size
;

176 
i
 = 0; i < 
NUM_TYPES
; ++i) {

177 
¨gumíts
[
i
*2] = 
°¨t
 -árguments;

178 
off£t
 = 0;

180 
j
 = 0; j < 
	`TYPE_NOARGS
(
i
); ++j) {

181 
ty≥
 = 
	`TYPE_ARG_TYPE
(
i
, 
j
);

182 
ty≥
) {

184 ()
FIELD_INT
:

185 ()
FIELD_TYPE
:

186 
size
 = (
mñd_öt
);

189 ()
FIELD_FLOAT
:

190 
size
 = (
mñd_Êﬂt
);

193 ()
FIELD_ADDR
:

194 
size
 = (
NodeID
);

197 ()
FIELD_LIST_INT
:

198 ()
FIELD_LIST_FLOAT
:

199 ()
FIELD_LIST_ADDR
:

200 ()
FIELD_SET_INT
:

201 ()
FIELD_SET_FLOAT
:

202 
size
 = (*);

206 
	`as£π
(0);

207 
size
 = 0;

211 
°¨t
[0] = 
size
;

212 
°¨t
[1] = 
off£t
;

214 
off£t
 +
size
;

215 
°¨t
 += 2;

218 
¨gumíts
[
i
*2+1] = 
off£t
 + 
TYPE_FIELD_SIZE
;

220 
	}
}

222 
	$öô_c⁄°s
()

224 
tu∂e_ty≥
 
i
;

225 
i
 = 0; i < 
NUM_TYPES
; i++) {

226 i‡(
	`°rcmp
(
	`TYPE_NAME
(
i
), "_init") == 0)

227 
TYPE_INIT
 = 
i
;

228 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "edge") == 0)

229 
TYPE_EDGE
 = 
i
;

230 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "colocated") == 0)

231 
TYPE_COLOCATED
 = 
i
;

232 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "proved") == 0)

233 
TYPE_PROVED
 = 
i
;

234 if(
	`°rcmp
(
	`TYPE_NAME
(
i
), "terminate") == 0)

235 
TYPE_TERMINATE
 = 
i
;

237 
	}
}

239 
ölöe


240 *
	$evÆ_d°
(c⁄° 
vÆue
,

241 c⁄° **
pc
, 
Regi°î
 *
ªg
, 
size_t
 *
size
)

243 i‡(
	`VAL_IS_REG
(
vÆue
)) {

244 *
size
 = (
Regi°î
);

245  &(
ªg
)[
	`VAL_REG
(
vÆue
)];

246 } i‡(
	`VAL_IS_FIELD
(
vÆue
)) {

247 
ªg_ödex
 = 
	`VAL_FIELD_REG
(*
pc
);

248 
fõld_num
 = 
	`VAL_FIELD_NUM
(*
pc
);

249 
tu∂e_t
 
tu∂e
 = (tu∂e_t)
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ödex
]);

250 
tu∂e_ty≥
 
ty≥
 = 
	`TUPLE_TYPE
(
tu∂e
);

252 *
size
 = 
	`TYPE_ARG_SIZE
(
ty≥
, 
fõld_num
);

254 (*
pc
) += 2;

256  
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
);

257 } i‡(
	`VAL_IS_INT
(
vÆue
)) {

258 
	`as£π
(0);

259 } i‡(
	`VAL_IS_FLOAT
(
vÆue
)) {

260 
	`as£π
(0);

261 } if(
	`VAL_IS_TUPLE
(
vÆue
)) {

262 
	`as£π
(0);

263 } if(
	`VAL_IS_HOST
(
vÆue
)) {

264 
	`as£π
(0);

266 
	`as£π
(0 );

269 
	`as£π
(0);

270  
NULL
;

271 
	}
}

273 
ölöe


274 * 
	$evÆ
(c⁄° 
vÆue
, 
tu∂e_t
 
tu∂e
,

275 c⁄° **
pc
, 
Regi°î
 *
ªg
)

277 i‡(
	`VAL_IS_REG
(
vÆue
)) {

278  (*)&(
ªg
[
	`VAL_REG
(
vÆue
)]);

281 
vÆue
) {

282 
VALUE_TYPE_FLOAT
: {

283 *
ªt
 = (*)(*
pc
);

284 *
pc
 = *p¯+ (
mñd_Êﬂt
);

285  
ªt
;

289 
VALUE_TYPE_INT
: {

290 *
ªt
 = (*)(*
pc
);

291 *
pc
 = *p¯+ (
mñd_öt
);

292  
ªt
;

296 
VALUE_TYPE_HOST
: {

297  (*)
EVAL_HOST
;

301 
VALUE_TYPE_REVERSE
: {

302 c⁄° 
ªg_ödex
 = 
	`VAL_FIELD_REG
(*
pc
);

303 c⁄° 
fõld_num
 = 
	`VAL_FIELD_NUM
(*
pc
);

304 
tu∂e_t
 
tu∂e
 = (tu∂e_t)
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ödex
]);

306 (*
pc
) += 2;

308 #ifde‡
PARALLEL_MACHINE


309 
Li°
 *
rouã
 = 
	`MELD_LIST
(
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
));

310 
Li°
 *
˛⁄e
 = 
	`li°_c›y
(
rouã
);

312 
	`li°_ªvî£_fú°
(
˛⁄e
);

314 
	`thªad_£lf
()->
ªvî£_li°
 = 
˛⁄e
;

316  (*)&
	`thªad_£lf
()->
ªvî£_li°
;

318  
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
);

323 
VALUE_TYPE_TUPLE
: {

324  (*)
tu∂e
;

328 
VALUE_TYPE_FIELD
: {

329 c⁄° 
ªg_ödex
 = 
	`VAL_FIELD_REG
(*
pc
);

330 c⁄° 
fõld_num
 = 
	`VAL_FIELD_NUM
(*
pc
);

331 
tu∂e_t
 
tu∂e
 = (tu∂e_t)
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ödex
]);

332 (*
pc
) += 2;

334 #ifde‡
DEBUG_INSTRS


335 
	`¥ötf
 ("tuple = ");

336 
	`tu∂e_¥öt
(
tu∂e
, 
°dout
);

337 
	`¥ötf
 ("\n");

338 
	`¥ötf
 ("tu∂e[%d] = %lx\n", 
fõld_num
, 
	`MELD_INT
(
	`GET_TUPLE_FIELD
(
tu∂e
, field_num)));

341  
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_num
);

346 
	`as£π
(0);

347  
NULL
;

348 
	}
}

350 
ölöe


351 
boﬁ
 
	$aggªg©e_accumuœã
(
agg_ty≥
, *
acc
, *
obj
, 
cou¡
)

353 
agg_ty≥
) {

354 
AGG_SET_UNION_INT
: {

355 
Së
 *
£t
 = 
	`MELD_SET
(
acc
);

356 
	`£t_öt_ö£π
(
£t
, 
	`MELD_INT
(
obj
));

357 
	`£t_¥öt
(
£t
);

358  
Ál£
;

360 
AGG_SET_UNION_FLOAT
: {

361 
Së
 *
£t
 = 
	`MELD_SET
(
acc
);

362 
	`£t_Êﬂt_ö£π
(
£t
, 
	`MELD_FLOAT
(
obj
));

363 
	`£t_¥öt
(
£t
);

364  
Ál£
;

367 
AGG_FIRST
:

368  
Ál£
;

370 
AGG_MAX_INT
:

371 i‡(
	`MELD_INT
(
obj
Ë> MELD_INT(
acc
)) {

372 
	`MELD_INT
(
acc
ËMELD_INT(
obj
);

373  
åue
;

375  
Ál£
;

377 
AGG_MIN_INT
:

378 i‡(
	`MELD_INT
(
obj
Ë< MELD_INT(
acc
)) {

379 
	`MELD_INT
(
acc
ËMELD_INT(
obj
);

380  
åue
;

382  
Ál£
;

384 
AGG_SUM_INT
:

385 
	`MELD_INT
(
acc
Ë+MELD_INT(
obj
Ë* 
cou¡
;

386  
Ál£
;

388 
AGG_MAX_FLOAT
:

389 if(
	`MELD_FLOAT
(
obj
Ë> MELD_FLOAT(
acc
)) {

390 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
obj
);

391  
åue
;

393  
Ál£
;

395 
AGG_MIN_FLOAT
:

396 if(
	`MELD_FLOAT
(
obj
Ë< MELD_FLOAT(
acc
)) {

397 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
obj
);

398  
åue
;

400  
Ál£
;

402 
AGG_SUM_FLOAT
:

403 
	`MELD_FLOAT
(
acc
Ë+MELD_FLOAT(
obj
Ë* (
mñd_Êﬂt
)
cou¡
;

404  
Ál£
;

406 
AGG_SUM_LIST_INT
: {

407 
Li°
 *
ªsu…_li°
 = 
	`MELD_LIST
(
acc
);

408 
Li°
 *
Ÿhî_li°
 = 
	`MELD_LIST
(
obj
);

410 if(
	`li°_tŸÆ
(
ªsu…_li°
Ë!li°_tŸÆ(
Ÿhî_li°
)) {

411 
	`Ârötf
(
°dîr
, "lists differ in size foráccumulator AGG_SUM_LIST_INT:"

412 " %d v†%d\n", 
	`li°_tŸÆ
(
ªsu…_li°
),Üi°_tŸÆ(
Ÿhî_li°
));

413 
	`exô
(1);

416 
li°_ôî©‹
 
ô_ªsu…
 = 
	`li°_gë_ôî©‹
(
ªsu…_li°
);

417 
li°_ôî©‹
 
ô_Ÿhî
 = 
	`li°_gë_ôî©‹
(
Ÿhî_li°
);

419 
	`li°_ôî©‹_has_√xt
(
ô_ªsu…
)) {

420 
	`li°_ôî©‹_öt
(
ô_ªsu…
Ë+li°_ôî©‹_öt(
ô_Ÿhî
Ë* (
mñd_öt
)
cou¡
;

422 
ô_Ÿhî
 = 
	`li°_ôî©‹_√xt
(it_other);

423 
ô_ªsu…
 = 
	`li°_ôî©‹_√xt
(it_result);

426  
Ál£
;

429 
AGG_SUM_LIST_FLOAT
: {

430 
Li°
 *
ªsu…_li°
 = 
	`MELD_LIST
(
acc
);

431 
Li°
 *
Ÿhî_li°
 = 
	`MELD_LIST
(
obj
);

433 if(
	`li°_tŸÆ
(
ªsu…_li°
Ë!li°_tŸÆ(
Ÿhî_li°
)) {

434 
	`Ârötf
(
°dîr
, "lists differ in size foráccumulator AGG_SUM_LIST_FLOAT: "

435 "%d v†%d\n", 
	`li°_tŸÆ
(
ªsu…_li°
),Üi°_tŸÆ(
Ÿhî_li°
));

436 
	`exô
(1);

439 
li°_ôî©‹
 
ô_ªsu…
 = 
	`li°_gë_ôî©‹
(
ªsu…_li°
);

440 
li°_ôî©‹
 
ô_Ÿhî
 = 
	`li°_gë_ôî©‹
(
Ÿhî_li°
);

442 
	`li°_ôî©‹_has_√xt
(
ô_ªsu…
)) {

443 
	`li°_ôî©‹_Êﬂt
(
ô_ªsu…
Ë+li°_ôî©‹_Êﬂt(
ô_Ÿhî
Ë* (
mñd_Êﬂt
)
cou¡
;

445 
ô_ªsu…
 = 
	`li°_ôî©‹_√xt
(it_result);

446 
ô_Ÿhî
 = 
	`li°_ôî©‹_√xt
(it_other);

449  
Ál£
;

453 
	`as£π
(0);

455 
	}
}

457 
ölöe
 
boﬁ


458 
	$aggªg©e_ch™ged
(
agg_ty≥
, *
v1
, *
v2
)

460 
agg_ty≥
) {

461 
AGG_FIRST
:

462  
Ál£
;

464 
AGG_MIN_INT
:

465 
AGG_MAX_INT
:

466 
AGG_SUM_INT
:

467  
	`MELD_INT
(
v1
Ë!MELD_INT(
v2
);

469 
AGG_MIN_FLOAT
:

470 
AGG_MAX_FLOAT
:

471 
AGG_SUM_FLOAT
:

472  
	`MELD_FLOAT
(
v1
Ë!MELD_FLOAT(
v2
);

474 
AGG_SET_UNION_INT
:

475 
AGG_SET_UNION_FLOAT
: {

476 
Së
 *
£tOld
 = 
	`MELD_SET
(
v1
);

477 
Së
 *
£tNew
 = 
	`MELD_SET
(
v2
);

479 if(!
	`£t_equÆ
(
£tOld
, 
£tNew
))

480  
åue
;

483 
	`£t_dñëe
(
£tNew
);

484  
Ál£
;

488 
AGG_SUM_LIST_INT
:

489 
AGG_SUM_LIST_FLOAT
: {

490 
Li°
 *
li°Old
 = 
	`MELD_LIST
(
v1
);

491 
Li°
 *
li°New
 = 
	`MELD_LIST
(
v2
);

493 if(!
	`li°_equÆ
(
li°Old
, 
li°New
))

494  
åue
;

497 
	`li°_dñëe
(
li°New
);

498  
Ál£
;

503 
	`as£π
(0);

504  
åue
;

507 
	`as£π
(0);

509 
	}
}

511 
ölöe
 

512 
	$aggªg©e_£ed
(
agg_ty≥
, *
acc
, *
°¨t
, 
cou¡
, 
size_t
 
size
)

514 
agg_ty≥
) {

515 
AGG_FIRST
:

516 
	`mem˝y
(
acc
, 
°¨t
, 
size
);

518 
AGG_MIN_INT
:

519 
AGG_MAX_INT
:

520 
	`MELD_INT
(
acc
ËMELD_INT(
°¨t
);

522 
AGG_SUM_INT
:

523 
	`MELD_INT
(
acc
ËMELD_INT(
°¨t
Ë* 
cou¡
;

525 
AGG_MIN_FLOAT
:

526 
AGG_MAX_FLOAT
:

527 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
°¨t
);

529 
AGG_SUM_FLOAT
:

530 
	`MELD_FLOAT
(
acc
ËMELD_FLOAT(
°¨t
Ë* 
cou¡
;

532 
AGG_SET_UNION_INT
: {

533 
Së
 *
£t
 = 
	`£t_öt_¸óã
();

534 
	`£t_öt_ö£π
(
£t
, 
	`MELD_INT
(
°¨t
));

535 
	`£t_¥öt
(
£t
);

536 
	`MELD_SET
(
acc
Ë
£t
;

539 
AGG_SET_UNION_FLOAT
: {

540 
Së
 *
£t
 = 
	`£t_Êﬂt_¸óã
();

541 
	`£t_Êﬂt_ö£π
(
£t
, 
	`MELD_FLOAT
(
°¨t
));

542 
	`£t_¥öt
(
£t
);

543 
	`MELD_SET
(
acc
Ë
£t
;

546 
AGG_SUM_LIST_INT
: {

547 
Li°
 *
ªsu…_li°
 = 
	`li°_öt_¸óã
();

548 
Li°
 *
°¨t_li°
 = 
	`MELD_LIST
(
°¨t
);

551 
li°_ôî©‹
 
ô
;

552 
ô
 = 
	`li°_gë_ôî©‹
(
°¨t_li°
); 
	`li°_ôî©‹_has_√xt
(it);

553 
ô
 = 
	`li°_ôî©‹_√xt
(it))

555 
mñd_öt
 
tŸÆ
 = 
	`li°_ôî©‹_öt
(
ô
Ë* (mñd_öt)
cou¡
;

556 
	`li°_öt_push_èû
(
ªsu…_li°
, 
tŸÆ
);

559 
	`MELD_LIST
(
acc
Ë
ªsu…_li°
;

562 
AGG_SUM_LIST_FLOAT
: {

563 
Li°
 *
ªsu…_li°
 = 
	`li°_Êﬂt_¸óã
();

564 
Li°
 *
°¨t_li°
 = 
	`MELD_LIST
(
°¨t
);

567 
li°_ôî©‹
 
ô
;

568 
ô
 = 
	`li°_gë_ôî©‹
(
°¨t_li°
); 
	`li°_ôî©‹_has_√xt
(it);

569 
ô
 = 
	`li°_ôî©‹_√xt
(it))

571 
mñd_Êﬂt
 
tŸÆ
 = 
	`li°_ôî©‹_Êﬂt
(
ô
Ë* (mñd_Êﬂt)
cou¡
;

572 
	`li°_Êﬂt_push_èû
(
ªsu…_li°
, 
tŸÆ
);

575 
	`MELD_LIST
(
acc
Ë
ªsu…_li°
;

580 
	`as£π
(0);

582 
	}
}

584 
ölöe
 

585 
	$aggªg©e_‰ì
(
tu∂e_t
 
tu∂e
, 
fõld_aggªg©e
,

586 
ty≥_aggªg©e
)

588 
ty≥_aggªg©e
) {

589 
AGG_FIRST
:

590 
AGG_MIN_INT
:

591 
AGG_MAX_INT
:

592 
AGG_SUM_INT
:

593 
AGG_MIN_FLOAT
:

594 
AGG_MAX_FLOAT
:

595 
AGG_SUM_FLOAT
:

599 
AGG_SET_UNION_INT
:

600 
AGG_SET_UNION_FLOAT
:

601 
	`£t_dñëe
(
	`MELD_SET
(
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_aggªg©e
)));

604 
AGG_SUM_LIST_INT
:

605 
AGG_SUM_LIST_FLOAT
:

606 
	`li°_dñëe
(
	`MELD_LIST
(
	`GET_TUPLE_FIELD
(
tu∂e
, 
fõld_aggªg©e
)));

610 
	`as£π
(0);

613 
	}
}

615 
ölöe


616 
	$aggªg©e_ªˇlc
(
tu∂e_íåy
 *
agg
, 
Regi°î
 *
ªg
,

617 
boﬁ
 
fú°_run
)

619 
tu∂e_ty≥
 
ty≥
 = 
	`TUPLE_TYPE
(
agg
->
tu∂e
);

621 
tu∂e_íåy
 *
cur
;

623 
agg_ty≥
 = 
	`AGG_AGG
(
	`TYPE_AGGREGATE
(
ty≥
));

624 
agg_fõld
 = 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
));

625 
tu∂e_queue
 *
agg_queue
 = 
agg
->
ªc‹ds
.agg_queue;

626 
tu∂e_íåy
 *
agg_li°
 = 
agg_queue
->
hód
;

627 
tu∂e_t
 
tu∂e
 = 
agg_li°
->tuple;

629 * 
°¨t
 = 
	`GET_TUPLE_FIELD
(
tu∂e
, 
agg_fõld
);

632 
size_t
 
size
 = 
	`TYPE_ARG_SIZE
(
ty≥
, 
agg_fõld
);

633 * 
accumuœt‹
 = 
	`mÆloc
(
size
);

635 
	`aggªg©e_£ed
(
agg_ty≥
, 
accumuœt‹
, 
°¨t
, 
agg_li°
->
ªc‹ds
.
cou¡
, 
size
);

638 
size_t
 
size_off£t
 = 
TYPE_FIELD_SIZE
 + 
	`TYPE_ARG_OFFSET
(
ty≥
, 
agg_fõld
Ë+ 
	`TYPE_ARG_SIZE
(type,ágg_field);

639 
size_t
 
tŸÆ_c›y
 = 
	`TYPE_SIZE
(
ty≥
Ë- 
size_off£t
;

640 
tu∂e_t
 
èrgë_tu∂e
 = 
NULL
;

642 i‡(
tŸÆ_c›y
 > 0)

643 
èrgë_tu∂e
 = 
tu∂e
;

645 
cur
 = 
agg_li°
->
√xt
; cu∏!
NULL
; cur = cur->next) {

646 if(
	`aggªg©e_accumuœã
(
agg_ty≥
, 
accumuœt‹
,

647 
	`GET_TUPLE_FIELD
(
cur
->
tu∂e
, 
agg_fõld
), cur->
ªc‹ds
.
cou¡
))

648 
èrgë_tu∂e
 = 
cur
->
tu∂e
;

651 *
acc_¨ó
 = 
	`GET_TUPLE_FIELD
(
agg
->
tu∂e
, 
agg_fõld
);

653 if(
fú°_run
)

654 
	`mem˝y
(
acc_¨ó
, 
accumuœt‹
, 
size
);

655 i‡(
	`aggªg©e_ch™ged
(
agg_ty≥
, 
acc_¨ó
, 
accumuœt‹
)) {

656 
	`tu∂e_¥o˚ss
(
agg
->
tu∂e
, 
	`TYPE_START
(
ty≥
), -1, 
ªg
);

657 
	`aggªg©e_‰ì
(
agg
->
tu∂e
, 
agg_fõld
, 
agg_ty≥
);

658 
	`mem˝y
(
acc_¨ó
, 
accumuœt‹
, 
size
);

659 i‡(
tŸÆ_c›y
 > 0)

660 
	`mem˝y
(((*)
agg
->
tu∂e
Ë+ 
size_off£t
, ((*)
èrgë_tu∂e
Ë+ size_off£t, 
tŸÆ_c›y
);

661 
	`tu∂e_¥o˚ss
(
agg
->
tu∂e
, 
	`TYPE_START
(
ty≥
), 1, 
ªg
);

664 
	`‰ì
(
accumuœt‹
);

665 
	}
}

667 
ölöe


668 
	$¥o˚ss_dñès
(
tu∂e_t
 
tu∂e
, 
tu∂e_ty≥
 
ty≥
, 
Regi°î
 *
ªg
)

670 *
ﬁd
 = 
OLDTUPLES
[
ty≥
];

672 if(
ﬁd
 =
NULL
)

675 
OLDTUPLES
[
ty≥
] = 
NULL
;

677 
i
;

678 
i
 = 0; i < 
	`DELTA_TOTAL
(
ty≥
); ++i) {

679 
dñè_ty≥
 = 
	`DELTA_TYPE
(
ty≥
, 
i
);

680 
dñè_pos
 = 
	`DELTA_POSITION
(
ty≥
, 
i
);

681 *
dñè_tu∂e
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
dñè_ty≥
));

683 
	`mem˝y
(
dñè_tu∂e
, 
ﬁd
, 
	`TYPE_SIZE
(
dñè_ty≥
));

684 
	`TUPLE_TYPE
(
dñè_tu∂e
Ë
dñè_ty≥
;

686 *
fõld_dñè
 = 
	`GET_TUPLE_FIELD
(
dñè_tu∂e
, 
dñè_pos
);

687 *
fõld_ﬁd
 = 
	`GET_TUPLE_FIELD
(
ﬁd
, 
dñè_pos
);

688 *
fõld_√w
 = 
	`GET_TUPLE_FIELD
(
tu∂e
, 
dñè_pos
);

690 
	`TYPE_ARG_TYPE
(
ty≥
, 
dñè_pos
)) {

691 
FIELD_INT
:

692 
	`MELD_INT
(
fõld_dñè
ËMELD_INT(
fõld_√w
Ë- MELD_INT(
fõld_ﬁd
);

694 
FIELD_FLOAT
:

695 
	`MELD_FLOAT
(
fõld_dñè
ËMELD_FLOAT(
fõld_√w
Ë- MELD_FLOAT(
fõld_ﬁd
);

698 
	`as£π
(0);

702 
	`tu∂e_¥o˚ss
(
dñè_tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
(dñè_tu∂e)), 1, 
ªg
);

705 
	`FREE_TUPLE
(
ﬁd
);

706 
	}
}

708 
ölöe
 
tu∂e_t


709 
	$tu∂e_buûd_¥oved
(
tu∂e_ty≥
 
ty≥
, 
mñd_öt
 
tŸÆ
)

711 
tu∂e_t
 
tu∂e
 = 
	`tu∂e_Æloc
(
TYPE_PROVED
);

712 
mñd_öt
 
ty≥_öt
 = (mñd_öt)
ty≥
;

714 
	`SET_TUPLE_FIELD
(
tu∂e
, 0, &
ty≥_öt
);

715 
	`SET_TUPLE_FIELD
(
tu∂e
, 1, &
tŸÆ
);

717  
tu∂e
;

718 
	}
}

720 
	$tu∂e_do_h™dÀ
(
tu∂e_ty≥
 
ty≥
, 
tu∂e_t
 
tu∂e
, 
isNew
, 
Regi°î
 *
ªg
)

722 if(
	`TYPE_IS_PROVED
(
ty≥
)) {

723 
PROVED
[
ty≥
] +(
mñd_öt
)
isNew
;

724 
tu∂e_t
 
_¥oved
 = 
	`tu∂e_buûd_¥oved
(
ty≥
, 
PROVED
[type]);

725 #ifde‡
DEBUG_PROVED_TUPLES


726 
	`¥ötf
("NewÖroved f‹Åu∂ê%s: %d\n", 
tu∂e_«mes
[
ty≥
], 
PROVED
[type]);

728 
	`PUSH_NEW_TUPLE
(
_¥oved
);

729 } if(
ty≥
 =
TYPE_PROVED
) {

730 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
ty≥
), 
isNew
, 
ªg
);

731 
	`FREE_TUPLE
(
tu∂e
);

733 } if(
ty≥
 =
TYPE_TERMINATE
) {

734 
	`FREE_TUPLE
(
tu∂e
);

735 
	`TERMINATE_CURRENT
();

739 if(!
	`TYPE_IS_AGG
(
ty≥
Ë&& 
	`TYPE_IS_PERSISTENT
(type)) {

740 
≥rsi°ít_£t
 *
≥rsi°íts
 = &
PERSISTENT
[
ty≥
];

741 
i
;

742 
size
 = 
	`TYPE_SIZE
(
ty≥
);

744 if(
isNew
 < 0) {

745 
	`Ârötf
(
°dîr
, "meld:ÖersistentÅypes can't be deleted\n");

746 
	`exô
(
EXIT_FAILURE
);

749 
i
 = 0; i < 
≥rsi°íts
->
tŸÆ
; ++i) {

750 *
°‹ed_tu∂e
 = 
≥rsi°íts
->
¨øy
 + 
i
 * 
size
;

752 if(
	`memcmp
(
°‹ed_tu∂e
, 
tu∂e
, 
size
) == 0) {

753 
	`FREE_TUPLE
(
tu∂e
);

759 if(
≥rsi°íts
->
tŸÆ
 =≥rsi°íts->
cuºít
) {

760 if(
≥rsi°íts
->
tŸÆ
 == 0)

761 
≥rsi°íts
->
tŸÆ
 = 
PERSISTENT_INITIAL
;

763 
≥rsi°íts
->
tŸÆ
 *= 2;

765 
≥rsi°íts
->
¨øy
 = 
	`ªÆloc
’îsi°íts->¨øy, 
size
 *Öîsi°íts->
tŸÆ
);

768 
	`mem˝y
(
≥rsi°íts
->
¨øy
 +Öîsi°íts->
cuºít
 * 
size
, 
tu∂e
, size);

769 ++
≥rsi°íts
->
cuºít
;

771 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
ty≥
), 
isNew
, 
ªg
);

776 i‡(!
	`TYPE_IS_AGG
(
ty≥
Ë|| 
	`TYPE_IS_LINEAR
(type))

778 
tu∂e_queue
 *
queue
 = &
TUPLES
[
ty≥
];

779 
tu∂e_íåy
** 
cuºít
;

780 
tu∂e_íåy
* 
cur
;

782 
cuºít
 = &
queue
->
hód
;

783 *
cuºít
 !
NULL
;

784 
cuºít
 = &(*cuºít)->
√xt
)

786 
cur
 = *
cuºít
;

788 i‡(
	`memcmp
(
cur
->
tu∂e
,

789 
tu∂e
,

790 
	`TYPE_SIZE
(
ty≥
)) == 0)

792 
cur
->
ªc‹ds
.
cou¡
 +
isNew
;

794 i‡(
cur
->
ªc‹ds
.
cou¡
 <= 0) {

796 i‡(!
	`TYPE_IS_LINEAR
(
ty≥
)) {

797 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
—u∂e)), -1, 
ªg
);

798 
	`FREE_TUPLE
(
	`queue_dequeue_pos
(
queue
, 
cuºít
));

800 if(
	`DELTA_WITH
(
ty≥
)) {

801 if(
OLDTUPLES
[
ty≥
])

802 
	`FREE_TUPLE
(
OLDTUPLES
[
ty≥
]);

804 
OLDTUPLES
[
ty≥
] = 
	`queue_dequeue_pos
(
queue
, 
cuºít
);

806 
	`FREE_TUPLE
(
	`queue_dequeue_pos
(
queue
, 
cuºít
));

810 
	`FREE_TUPLE
(
tu∂e
);

817 i‡(
isNew
 <= 0) {

818 
	`FREE_TUPLE
(
tu∂e
);

822 
	`queue_íqueue
(
queue
, 
tu∂e
, (
ªc‹d_ty≥
Ë
isNew
);

824 if(
	`TYPE_IS_LINEAR
(
ty≥
Ë&& 
	`DELTA_WITH
(type))

825 
	`¥o˚ss_dñès
(
tu∂e
, 
ty≥
, 
ªg
);

827 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
—u∂e)), 
isNew
, 
ªg
);

832 
ty≥_aggªg©e
 = 
	`TYPE_AGGREGATE
(
ty≥
);

833 
fõld_aggªg©e
 = 
	`AGG_FIELD
(
ty≥_aggªg©e
);

835 
tu∂e_íåy
 **
cuºít
;

836 
tu∂e_íåy
 *
cur
;

837 
tu∂e_queue
 *
queue
 = &(
TUPLES
[
ty≥
]);

839 
cuºít
 = &
queue
->
hód
;

840 (*
cuºít
Ë!
NULL
;

841 
cuºít
 = &(*cuºít)->
√xt
)

843 
cur
 = *
cuºít
;

845 
size_t
 
sizeBegö
 = 
TYPE_FIELD_SIZE
 + 
	`TYPE_ARG_OFFSET
(
ty≥
, 
fõld_aggªg©e
);

846 *
°¨t
 = (*)(
cur
->
tu∂e
);

848 if(
	`memcmp
(
°¨t
, 
tu∂e
, 
sizeBegö
))

858 
tu∂e_queue
 *
agg_queue
 = 
cur
->
ªc‹ds
.agg_queue;

861 if(
	`AGG_AGG
(
ty≥_aggªg©e
Ë=
AGG_FIRST


862 && 
isNew
 > 0

863 && !
	`queue_is_em±y
(
agg_queue
))

865 
	`FREE_TUPLE
(
tu∂e
);

869 
tu∂e_íåy
** 
cuºít2
;

870 
tu∂e_íåy
* 
cur2
;

872 
cuºít2
 = &
agg_queue
->
hód
;

873 *
cuºít2
 !
NULL
;

874 
cuºít2
 = &(*cuºít2)->
√xt
)

876 
cur2
 = *
cuºít2
;

878 i‡(
	`memcmp
(
cur2
->
tu∂e
,Åu∂e, 
	`TYPE_SIZE
(
ty≥
)) == 0)

880 
cur2
->
ªc‹ds
.
cou¡
 +
isNew
;

882 i‡(
cur2
->
ªc‹ds
.
cou¡
 <= 0) {

884 
	`FREE_TUPLE
(
	`queue_dequeue_pos
(
agg_queue
, 
cuºít2
));

886 i‡(
	`queue_is_em±y
(
agg_queue
)) {

888 *
aggTu∂e
 = 
	`queue_dequeue_pos
(
queue
, 
cuºít
);

891 
	`‰ì
(
agg_queue
);

893 
	`tu∂e_¥o˚ss
(
aggTu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
◊ggTu∂e)), -1, 
ªg
);

894 
	`aggªg©e_‰ì
(
aggTu∂e
, 
fõld_aggªg©e
, 
	`AGG_AGG
(
ty≥_aggªg©e
));

895 
	`FREE_TUPLE
(
aggTu∂e
);

897 
	`aggªg©e_ªˇlc
(
cur
, 
ªg
, 
Ál£
);

899 
	`aggªg©e_ªˇlc
(
cur
, 
ªg
, 
Ál£
);

901 
	`FREE_TUPLE
(
tu∂e
);

907 i‡(
isNew
 <= 0) {

908 
	`FREE_TUPLE
(
tu∂e
);

912 
	`queue_íqueue
(
agg_queue
, 
tu∂e
, (
ªc‹d_ty≥
Ë
isNew
);

913 
	`aggªg©e_ªˇlc
(
cur
, 
ªg
, 
Ál£
);

919 i‡(
isNew
 <= 0) {

920 
	`FREE_TUPLE
(
tu∂e
);

925 
tu∂e_t
 
tu∂e_˝y
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
ty≥
));

926 
	`mem˝y
(
tu∂e_˝y
, 
tu∂e
, 
	`TYPE_SIZE
(
ty≥
));

929 
tu∂e_queue
 *
agg_queue
 = 
	`mÆloc
((tuple_queue));

931 
	`queue_öô
(
agg_queue
);

933 
	`queue_íqueue
(
agg_queue
, 
tu∂e
, (
ªc‹d_ty≥
Ë
isNew
);

934 
tu∂e_íåy
 *
íåy
 =

935 
	`queue_íqueue
(&
TUPLES
[
ty≥
], 
tu∂e_˝y
, (
ªc‹d_ty≥
)
agg_queue
);

937 
	`aggªg©e_ªˇlc
(
íåy
, 
ªg
, 
åue
);

938 
	`tu∂e_¥o˚ss
(
tu∂e
, 
	`TYPE_START
(
ty≥
), 
isNew
, 
ªg
);

939 
	}
}

942 
	$queue_Àngth
 (
tu∂e_queue
 *
queue
)

944 
i
;

945 
tu∂e_íåy
 *
íåy
 = 
queue
->
hód
;

947 
i
 = 0; 
íåy
 !
NULL
;É¡ry =É¡ry->
√xt
, i++);

949  
i
;

950 
	}
}

952 
	$tu∂e_¥o˚ss
(
tu∂e_t
 
tu∂e
, c⁄° *
pc
,

953 
isNew
, 
Regi°î
 *
ªg
)

956 0xf0 & *(c⁄° *)
pc
) {

959 #ifde‡
MELDVMINSTRU


960 
	`mñdvm_ö°ru
("RETURN",1,
pc
);

962 0x0‡& *(c⁄° *)
pc
) {

965 #ifde‡
DEBUG_INSTRS


966 
	`¥ötf
("RETURN\n");

968  
RET_RET
;

972 #ifde‡
MELDVMINSTRU


973 
	`mñdvm_ö°ru
("NEXT",2,
pc
);

975 #ifde‡
DEBUG_INSTRS


976 
	`¥ötf
("NEXT\n");

978  
RET_NEXT
;

982 #ifde‡
MELDVMINSTRU


983 
	`mñdvm_ö°ru
("ELSE",3,
pc
);

985 
	`Ârötf
(
°dîr
, "ELSE NOT IMPLEMENTED YET!\n");

986 
	`as£π
(0);

990 #ifde‡
MELDVMINSTRU


991 
	`mñdvm_ö°ru
("NOP",0,
pc
);

993 
pc
++;

1000 #ifde‡
MELDVMINSTRU


1001 
	`mñdvm_ö°ru
("SEND",4,
pc
);

1004 c⁄° *
√w_pc
 = 
pc
+3;

1005 
Regi°î
 
£nd_ªg
 = 
ªg
[
	`SEND_MSG
(
pc
)];

1006 
Regi°î
 
£nd_π
 = 
ªg
[
	`SEND_RT
(
pc
)];

1008 #ifde‡
DEBUG_INSTRS


1009 
	`¥ötf
("SEND\n");

1012 
	`tu∂e_£nd
((
tu∂e_t
)
	`MELD_CONVERT_REG_TO_PTR
(
£nd_ªg
),

1013 
	`MELD_CONVERT_REG_TO_PTR
(
£nd_π
),

1014 
	`MELD_INT
(
	`evÆ
(
	`SEND_DELAY
(
pc
), &
tu∂e
, &
√w_pc
, 
ªg
)), 
isNew
);

1017 
pc
 = 
√w_pc
;

1022 
	`Ârötf
(
°dîr
, "INVALID INSTRUCTION %u", *
pc
);

1023 
	`as£π
(0);

1029 #ifde‡
MELDVMINSTRU


1030 
	`mñdvm_ö°ru
("CALL",5,
pc
);

1033 
Regi°î
 *
d°
 = &
ªg
[
	`CALL_DST
(
pc
)];

1034 
Regi°î
 
¨gs
[
	`CALL_ARGS
(
pc
)];

1036 
	`as£π
(
	`CALL_ARGS
(
pc
) <= 5);

1038 #ifde‡
DEBUG_INSTRS


1039 
	`¥ötf
("CALL %d (%d)\n", 
	`CALL_ID
(
pc
), 
	`CALL_ARGS
(pc));

1042 
i
;

1043 c⁄° *
√w_pc
 = 
pc
+2;

1044 
i
 = 0; i < 
	`CALL_ARGS
(
pc
); i++) {

1045 
vÆue
 = 
	`CALL_VAL
(
√w_pc
);

1046 
√w_pc
++;

1047 
¨gs
[
i
] = 
	`MELD_CONVERT_PTR_TO_REG
(
	`evÆ
(
vÆue
, &
tu∂e
, &
√w_pc
, 
ªg
));

1050 
	`CALL_ARGS
(
pc
)) {

1054 *
d°
 = 
	`CALL_FUNC
(
pc
)();

1057 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0]);

1060 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1]);

1063 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2]);

1066 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2],árgs[3]);

1069 *
d°
 = 
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2],árgs[3],árgs[4]);

1073 
pc
 = 
√w_pc
;

1078 #ifde‡
MELDVMINSTRU


1079 
	`mñdvm_ö°ru
("MOVE",6,
pc
);

1082 c⁄° *
√w_pc
 = 
pc
+2;

1084 #ifde‡
DEBUG_INSTRS


1086 
§c
 = 
	`MOVE_SRC
(
pc
);

1087 
d°
 = 
	`MOVE_DST
(
pc
);

1089 
	`¥ötf
("MOVE ");

1090 if(
	`VAL_IS_TUPLE
(
§c
))

1091 
	`¥ötf
("tuple");

1092 if(
	`VAL_IS_REG
(
§c
))

1093 
	`¥ötf
("ªg %d", 
	`VAL_REG
(
§c
));

1094 if(
	`VAL_IS_HOST
(
§c
))

1095 
	`¥ötf
("host");

1096 if(
	`VAL_IS_FIELD
(
§c
))

1097 
	`¥ötf
("FIELD");

1098 if(
	`VAL_IS_INT
(
§c
))

1099 
	`¥ötf
("INT");

1100 if(
	`VAL_IS_FLOAT
(
§c
))

1101 
	`¥ötf
("float");

1102 if(
	`VAL_IS_REVERSE
(
§c
))

1103 
	`¥ötf
("reverse");

1104 
	`¥ötf
("??");

1106 
	`¥ötf
(" ");

1108 if(
	`VAL_IS_TUPLE
(
d°
))

1109 
	`¥ötf
("tuple");

1110 if(
	`VAL_IS_REG
(
d°
))

1111 
	`¥ötf
("ªg %d", 
	`VAL_REG
(
d°
));

1112 if(
	`VAL_IS_HOST
(
d°
))

1113 
	`¥ötf
("host");

1114 if(
	`VAL_IS_FIELD
(
d°
))

1115 
	`¥ötf
("FIELD");

1116 if(
	`VAL_IS_INT
(
d°
))

1117 
	`¥ötf
("INT");

1118 if(
	`VAL_IS_FLOAT
(
d°
))

1119 
	`¥ötf
("float");

1120 if(
	`VAL_IS_REVERSE
(
d°
))

1121 
	`¥ötf
("reverse");

1122 
	`¥ötf
("??");

1124 
	`¥ötf
("\n");

1127 
size_t
 
size
 = 0;

1129 
Regi°î
 *
§c
 = 
	`evÆ
(
	`MOVE_SRC
(
pc
), &
tu∂e
, &
√w_pc
, 
ªg
);

1130 
Regi°î
 *
d°
 = 
	`evÆ_d°
(
	`MOVE_DST
(
pc
), &
√w_pc
, 
ªg
, &
size
);

1132 
	`mem˝y
(
d°
, 
§c
, 
size
);

1134 
pc
 = 
√w_pc
;

1140 #ifde‡
MELDVMINSTRU


1141 
	`mñdvm_ö°ru
("ALLOC",7,
pc
);

1144 c⁄° *
√w_pc
 = 
pc
+2;

1145 
tu∂e_t
 *
d°
;

1146 
tu∂e_ty≥
 
ty≥
 = 
	`ALLOC_TYPE
(
pc
);

1148 #i‡
	`deföed
(
DEBUG_INSTRS
Ë|| deföed(
DEBUG_ALLOCS
)

1150 
	`¥ötf
("ALLOC %s\n", 
tu∂e_«mes
[
ty≥
]);

1154 
d°
 = 
	`evÆ
(
	`ALLOC_DST
(
pc
), &
tu∂e
, &
√w_pc
, 
ªg
);

1156 *
d°
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
ty≥
));

1157 
	`mem£t
(*
d°
, 0, 
	`TYPE_SIZE
(
ty≥
));

1158 
	`TUPLE_TYPE
(*
d°
Ë
ty≥
;

1160 
pc
 = 
√w_pc
;

1166 #ifde‡
MELDVMINSTRU


1167 
	`mñdvm_ö°ru
("IF",8,
pc
);

1169 #ifde‡
DEBUG_INSTRS


1170 
	`¥ötf
("IFÑeg %d ", 
	`IF_REG
(
pc
));

1172 i‡(!
ªg
[
	`IF_REG
(
pc
)]) {

1173 #ifde‡
DEBUG_INSTRS


1174 
	`¥ötf
("no\n");

1176 
pc
 +
	`IF_JUMP
(pc);

1180 #ifde‡
DEBUG_INSTRS


1181 
	`¥ötf
("yes\n");

1184 
pc
 +
IF_BASE
;

1189 #ifde‡
MELDVMINSTRU


1190 
	`mñdvm_ö°ru
("REMOVE",9,
pc
);

1192 i‡(
isNew
 > 0) {

1193 
ªg_ªmove
 = 
	`REMOVE_REG
(
pc
);

1194 
size
 = 
	`TYPE_SIZE
(
	`TUPLE_TYPE
(
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ªmove
])));

1196 
	`tu∂e_h™dÀ
(
	`mem˝y
(
	`mÆloc
(
size
),
	`MELD_CONVERT_REG_TO_PTR
(
ªg
[
ªg_ªmove
]), size), -1,Ñeg);

1197 
ªg
[
	`REMOVE_REG
(
pc
)] = 0;

1200 
pc
 += 1;

1204 #ifde‡
MELDVMINSTRU


1205 
	`mñdvm_ö°ru
("ITER",10,
pc
);

1208 c⁄° 
tu∂e_ty≥
 
ty≥
 = 
	`ITER_TYPE
(
pc
);

1209 
i
, 
Àngth
;

1210 **
li°
;

1211 c⁄° *
jump
 = 
pc
 + 
	`ITER_JUMP
(pc);

1212 
size
 = 
	`TYPE_SIZE
(
ty≥
);

1216 if(
	`TYPE_IS_PERSISTENT
(
ty≥
Ë&& !
	`TYPE_IS_AGG
(type)) {

1218 
≥rsi°ít_£t
 *
≥rsi°íts
 = &
PERSISTENT
[
ty≥
];

1220 
Àngth
 = 
≥rsi°íts
->
cuºít
;

1221 
li°
 = 
	`mÆloc
((
tu∂e_t
Ë* 
Àngth
);

1223 
i
 = 0; i < 
Àngth
; i++) {

1224 
j
 = 
	`øndom
(Ë% (
i
 + 1);

1226 
li°
[
i
] =Üi°[
j
];

1227 
li°
[
j
] = 
≥rsi°íts
->
¨øy
 + 
i
 * 
size
;

1231 
tu∂e_íåy
 *
íåy
 = 
TUPLES
[
ty≥
].
hód
;

1233 
Àngth
 = 
	`queue_Àngth
(&
TUPLES
[
	`ITER_TYPE
(
pc
)]);

1234 
li°
 = 
	`mÆloc
((
tu∂e_t
Ë* 
Àngth
);

1236 
i
 = 0; i < 
Àngth
; i++) {

1237 
j
 = 
	`øndom
(Ë% (
i
+1);

1239 
li°
[
i
] =Üi°[
j
];

1240 
li°
[
j
] = 
íåy
->
tu∂e
;

1242 
íåy
 =É¡ry->
√xt
;

1246 #ifde‡
DEBUG_INSTRS


1247 
	`¥ötf
("ITER %†Àn=%d\n", 
tu∂e_«mes
[
ty≥
], 
Àngth
);

1250 if(
Àngth
 == 0) {

1252 
pc
 = 
jump
;

1257 *
√xt_tu∂e
;

1259 
i
 = 0; i < 
Àngth
; i++) {

1260 
√xt_tu∂e
 = 
li°
[
i
];

1262 
m©ched
 = 1;

1263 c⁄° *
tmµc
;

1265 
tmµc
 = 
pc
 + 
ITER_BASE
;

1267 if(!
	`ITER_MATCH_NONE
(
tmµc
)) {

1270 c⁄° *
√w_pc
 = 
tmµc
 + 2;

1271 c⁄° 
fõldnum
 = 
	`ITER_MATCH_FIELD
(
tmµc
);

1272 c⁄° 
ty≥_size
 = 
	`TYPE_ARG_SIZE
(
ty≥
, 
fõldnum
);

1274 
Regi°î
 *
fõld
 = 
	`GET_TUPLE_FIELD
(
√xt_tu∂e
, 
fõldnum
);

1275 
Regi°î
 *
vÆ
 = 
	`evÆ
(
	`ITER_MATCH_VAL
(
tmµc
), &
tu∂e
, &
√w_pc
, 
ªg
);

1277 
m©ched
 = m©ched && (
	`memcmp
(
fõld
, 
vÆ
, 
ty≥_size
) == 0);

1279 if(
	`ITER_MATCH_END
(
tmµc
))

1282 
tmµc
 = 
√w_pc
;

1286 #ifde‡
DEBUG_INSTRS


1287 
	`¥ötf
("MATCHED: %d %d\n", 
m©ched
, 
Àngth
);

1290 i‡(
m©ched
) {

1291 c⁄° * 
ôî_pc
 = 
pc
 + 
ITER_BASE
;

1293 if(
	`ITER_MATCH_NONE
(
ôî_pc
))

1294 
ôî_pc
 += 2;

1296 c⁄° *
ﬁd
;

1298 
ﬁd
 = 
ôî_pc
;

1300 i‡(
	`VAL_IS_FLOAT
(
	`ITER_MATCH_VAL
(
ôî_pc
)))

1301 
ôî_pc
 +(
mñd_Êﬂt
);

1302 i‡(
	`VAL_IS_INT
(
	`ITER_MATCH_VAL
(
ôî_pc
)))

1303 
ôî_pc
 +(
mñd_öt
);

1304 i‡(
	`VAL_IS_FIELD
(
	`ITER_MATCH_VAL
(
ôî_pc
)))

1305 
ôî_pc
 += 2;

1306 i‡(
	`VAL_IS_REVERSE
(
	`ITER_MATCH_VAL
(
ôî_pc
)))

1307 
ôî_pc
 += 2;

1309 
	`as£π
(0);

1310 
	`exô
(1);

1313 
ôî_pc
 += 2;

1315 if(
	`ITER_MATCH_END
(
ﬁd
))

1320 i‡(
RET_RET
 =
	`tu∂e_¥o˚ss
(
√xt_tu∂e
, 
ôî_pc
, 
isNew
, 
ªg
)) {

1321 
	`‰ì
(
li°
);

1322  
RET_RET
;

1327 
	`‰ì
(
li°
);

1330 
pc
 = 
jump
;

1338 #ifde‡
MELDVMINSTRU


1339 
	`mñdvm_ö°ru
("OP",10,
pc
);

1342 c⁄° *
√w_pc
 = 
pc
+3;

1344 #ifde‡
DEBUG_INSTRS


1345 
	`¥ötf
("OPÅÿ%d\n", 
	`OP_DST
(
pc
));

1348 
Regi°î
 *
¨g1
, *
¨g2
;

1350 
¨g1
 = 
	`evÆ
(
	`OP_ARG1
(
pc
), &
tu∂e
, &
√w_pc
, 
ªg
);

1351 
¨g2
 = 
	`evÆ
(
	`OP_ARG2
(
pc
), &
tu∂e
, &
√w_pc
, 
ªg
);

1353 #ifde‡
DEBUG_INSTRS


1354 
	`¥ötf
 ("%ld", 
	`MELD_INT
(
¨g1
));

1355 
	`¥ötf
 ("OP");

1356 
	`¥ötf
 ("%ld", 
	`MELD_INT
(
¨g2
));

1357 
	`¥ötf
 ("\n");

1360 
Regi°î
 *
de°
 = 
ªg
 + 
	`OP_DST
(
pc
);

1362 
	`OP_OP
(
pc
)) {

1363 
OP_NEQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë!MELD_INT(
¨g2
)); ;

1364 
OP_EQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë=MELD_INT(
¨g2
)); ;

1365 
OP_LESSI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë< MELD_INT(
¨g2
)); ;

1366 
OP_LESSEQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë<MELD_INT(
¨g2
)); ;

1367 
OP_GREATERI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë> MELD_INT(
¨g2
)); ;

1368 
OP_GREATEREQI
: *
de°
 = (
	`MELD_INT
(
¨g1
Ë>MELD_INT(
¨g2
)); ;

1369 
OP_MODI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë% MELD_INT(
¨g2
)); ;

1370 
OP_PLUSI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë+ MELD_INT(
¨g2
)); ;

1371 
OP_MINUSI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë- MELD_INT(
¨g2
)); ;

1372 
OP_TIMESI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë* MELD_INT(
¨g2
)); ;

1373 
OP_DIVI
: 
	`MELD_INT
(
de°
Ë(MELD_INT(
¨g1
Ë/ MELD_INT(
¨g2
)); ;

1374 
OP_NEQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë!MELD_FLOAT(
¨g2
)); ;

1375 
OP_EQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë=MELD_FLOAT(
¨g2
)); ;

1376 
OP_LESSF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë< MELD_FLOAT(
¨g2
)); ;

1377 
OP_LESSEQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë<MELD_FLOAT(
¨g2
)); ;

1378 
OP_GREATERF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë> MELD_FLOAT(
¨g2
)); ;

1379 
OP_GREATEREQF
: *
de°
 = (
	`MELD_FLOAT
(
¨g1
Ë>MELD_FLOAT(
¨g2
)); ;

1380 
OP_MODF
: 
	`MELD_FLOAT
(
de°
Ë
	`fmod
(MELD_FLOAT(
¨g1
), MELD_FLOAT(
¨g2
)); ;

1381 
OP_PLUSF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë+ MELD_FLOAT(
¨g2
)); ;

1382 
OP_MINUSF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë- MELD_FLOAT(
¨g2
)); ;

1383 
OP_TIMESF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë* MELD_FLOAT(
¨g2
)); ;

1384 
OP_DIVF
: 
	`MELD_FLOAT
(
de°
Ë(MELD_FLOAT(
¨g1
Ë/ MELD_FLOAT(
¨g2
)); ;

1385 
OP_NEQA
: *
de°
 = (
	`MELD_PTR
(
¨g1
Ë!MELD_PTR(
¨g2
)); ;

1386 
OP_EQA
: *
de°
 = (
	`MELD_PTR
(
¨g1
Ë=MELD_PTR(
¨g2
)); ;

1389 
pc
 = 
√w_pc
;

1394 
	`Ârötf
(
°dîr
, "INVALID INSTRUCTION %u", *
pc
);

1395 
	`as£π
(0);

1400  
RET_RET
;

1401 
	}
}

1404 
	$tu∂e_¥öt
(
tu∂e_t
 
tu∂e
, 
FILE
 *
Â
)

1406 
tu∂e_ty≥
 = 
	`TUPLE_TYPE
(
tu∂e
);

1407 
j
;

1409 
	`Ârötf
(
Â
, "%s(", 
	`TYPE_NAME
(
tu∂e_ty≥
));

1410 
j
 = 0; j < 
	`TYPE_NOARGS
(
tu∂e_ty≥
); ++j) {

1411 *
fõld
 = 
	`GET_TUPLE_FIELD
(
tu∂e
, 
j
);

1413 i‡(
j
 > 0)

1414 
	`Ârötf
(
Â
, ", ");

1416 
	`TYPE_ARG_TYPE
(
tu∂e_ty≥
, 
j
)) {

1417 
FIELD_INT
:

1418 #i‚de‡
BBSIM


1419 
	`Ârötf
(
Â
, "%ld", 
	`MELD_INT
(
fõld
));

1421 
	`Ârötf
(
Â
, "%d", 
	`MELD_INT
(
fõld
));

1424 
FIELD_FLOAT
:

1425 
	`Ârötf
(
Â
, "%f", ()
	`MELD_FLOAT
(
fõld
));

1427 
FIELD_ADDR
:

1428 
	`Ârötf
(
Â
, "%p", 
	`MELD_PTR
(
fõld
));

1430 
FIELD_LIST_INT
:

1431 
	`Ârötf
(
Â
, "li°_öt[%d][%p]", 
	`li°_tŸÆ
(
	`MELD_LIST
(
fõld
)),

1432 
	`MELD_LIST
(
fõld
));

1434 
FIELD_LIST_FLOAT
:

1435 
	`Ârötf
(
Â
, "li°_Êﬂt[%d][%p]", 
	`li°_tŸÆ
(
	`MELD_LIST
(
fõld
)),

1436 
	`MELD_LIST
(
fõld
));

1438 
FIELD_LIST_ADDR
:

1439 
	`Ârötf
(
Â
, "li°_addr[%p]", *(**)
fõld
);

1441 
FIELD_SET_INT
:

1442 
	`Ârötf
(
Â
, "£t_öt[%d][%p]", 
	`£t_tŸÆ
(
	`MELD_SET
(
fõld
)),

1443 
	`MELD_SET
(
fõld
));

1445 
FIELD_SET_FLOAT
:

1446 
	`Ârötf
(
Â
, "£t_Êﬂt[%d][%p]", 
	`£t_tŸÆ
(
	`MELD_SET
(
fõld
)),

1447 
	`MELD_SET
(
fõld
));

1449 
FIELD_TYPE
:

1450 
	`Ârötf
(
Â
, "%s", 
	`TYPE_NAME
(
	`MELD_INT
(
fõld
)));

1453 
	`as£π
(0);

1457 
	`Ârötf
(
Â
, ")");

1458 
	}
}

1460 
	$Á˘s_dump
()

1462 
i
;

1464 
i
 = 0; i < 
NUM_TYPES
; i++) {

1466 i‡(
TUPLES
[
i
].
hód
 =
NULL
)

1475 
	`Ârötf
(
°dîr
, "tu∂ê%†—y≥ %d)\n", 
tu∂e_«mes
[
i
], i);

1476 
tu∂e_íåy
 *
tu∂eE¡ry
;

1477 
tu∂eE¡ry
 = 
TUPLES
[
i
].
hód
;Åu∂eE¡ry !
NULL
;Åu∂eE¡ry =Åu∂eE¡ry->
√xt
) {

1478 
	`Ârötf
(
°dîr
, " ");

1479 
	`tu∂e_¥öt
(
tu∂eE¡ry
->
tu∂e
, 
°dîr
);

1480 i‡(
	`TYPE_IS_AGG
(
i
)) {

1481 
	`Ârötf
(
°dîr
, "\n [[[");

1482 
tu∂e_íåy
 *
çE
;

1483 
çE
 = 
tu∂eE¡ry
->
ªc‹ds
.
agg_queue
->
hód
;

1484 
çE
 !
NULL
;

1485 
çE
 =ÅpE->
√xt
) {

1486 
	`tu∂e_¥öt
(
çE
->
tu∂e
, 
°dîr
);

1487 
	`Ârötf
(
°dîr
, "x%d\¿ ", 
çE
->
ªc‹ds
.
cou¡
);

1489 
	`Ârötf
(
°dîr
, "\b\b\b]]]\n");

1492 
	`Ârötf
(
°dîr
, "x%d\n", 
tu∂eE¡ry
->
ªc‹ds
.
cou¡
);

1496 
	}
}

1499 
	$¥öt_¥ogøm_öfo
()

1502 
i
;

1503 
i
 = 0; i < 
NUM_TYPES
; ++i) {

1504 
	`¥ötf
("Tu∂ê(%s:%d:%dË", 
tu∂e_«mes
[
i
], i, 
	`TYPE_SIZE
(i));

1506 
	`¥ötf
("[");

1507 if(
	`TYPE_IS_AGG
(
i
))

1508 
	`¥ötf
("agg");

1509 if(
	`TYPE_IS_PERSISTENT
(
i
))

1510 
	`¥ötf
("per");

1511 if(
	`TYPE_IS_LINEAR
(
i
))

1512 
	`¥ötf
("linear");

1513 if(
	`TYPE_IS_ROUTING
(
i
))

1514 
	`¥ötf
("route");

1515 if(
	`TYPE_IS_PROVED
(
i
))

1516 
	`¥ötf
("proved");

1517 
	`¥ötf
("] ");

1519 
	`¥ötf
("num_args:%d deltas:%d off:%d ;árgs(offset,árg_size): ",

1520 
	`TYPE_NOARGS
(
i
), 
	`TYPE_NODELTAS
(i), 
	`TYPE_OFFSET
(i));

1522 
j
;

1523 
j
 = 0; j < 
	`TYPE_NOARGS
(
i
); ++j) {

1524 
	`¥ötf
(" %d:%d", 
	`TYPE_ARG_OFFSET
(
i
, 
j
), 
	`TYPE_ARG_SIZE
(i, j));

1526 
	`¥ötf
("\n");

1528 
	}
}

	@meldinterp-runtime/core.h

1 #i‚de‡
__CORE_H_


2 
	#__CORE_H_


	)

4 
	~<°dlib.h
>

5 
	~<°dio.h
>

7 
	~"≠i.h
"

8 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


9 
	~"modñ.h
"

15 
	#TUPLE_ALLOC_CHECKS
 1

	)

18 
	#IF
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x60)

	)

19 
	#ELSE
(
x
Ë((*(c⁄° *)(x)Ë=0x02)

	)

20 
	#ITER
(
x
Ë(((*(c⁄° *)(x))&0xffË=0xa0)

	)

21 
	#NEXT
(
x
Ë((*(c⁄° *)(x)Ë=0x01)

	)

22 
	#SEND
(
x
Ë(((*(c⁄° *)(x))&0xfcË=0x08)

	)

23 
	#REMOVE
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x80)

	)

24 
	#OP
(
x
Ë(((*(c⁄° *)(x))&0xc0Ë=0xc0)

	)

25 
	#MOVE
(
x
Ë(((*(c⁄° *)(x))&0xf0Ë=0x30)

	)

26 
	#ALLOC
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x40)

	)

27 
	#RETURN
(
x
Ë((*(c⁄° *)(x)Ë=0x00)

	)

28 
	#CALL
(
x
Ë(((*(c⁄° *)(x)Ë& 0xf0Ë=0x20)

	)

30 
	#IF_REG
(
x
Ë((*(c⁄° *)(x))&0x1f)

	)

31 
	#IF_JUMP
(
x
Ë(*(*)((c⁄° *)(x)+1))

	)

32 
	#IF_BASE
 3

	)

34 
	#ITER_TYPE
(
x
Ë((*(c⁄° *)((x)+1))&0x7f)

	)

35 
	#ITER_JUMP
(
x
Ë(*(*)((c⁄° *)((x)+2)))

	)

36 
	#ITER_MATCH_END
(
x
Ë(((*(c⁄° *)((x)+1))&0xc0Ë=0x40)

	)

37 
	#ITER_MATCH_NONE
(
x
Ë(((*(c⁄° *)((x)+1))&0xc0Ë=0xc0)

	)

38 
	#ITER_MATCH_FIELD
(
x
Ë(*(c⁄° *)(x))

	)

39 
	#ITER_BASE
 4

	)

41 
	#ITER_MATCH_VAL
(
x
Ë(((*(c⁄° *)((x)+1))&0x3f))

	)

42 
	#SEND_MSG
(
x
) ((((*(const *)(x))&0x3) << 3) | \

43 (((*(c⁄° *)((
x
)+1))&0xe0Ë>> 5))

	)

44 
	#SEND_RT
(
x
Ë((*(c⁄° *)((x)+1))&0x1f)

	)

45 
	#SEND_DELAY
(
x
Ë(*(c⁄° *)((x)+2))

	)

46 
	#REMOVE_REG
(
x
Ë((*(c⁄° *)(x))&0x1f)

	)

48 
	#SEND_ARG1
(
x
Ë((*((c⁄° *)(x)+2)Ë& 0x3f)

	)

50 
	#OP_ARG1
(
x
Ë(((*(c⁄° *)(x)Ë& 0x3f))

	)

51 
	#OP_ARG2
(
x
Ë(((*(c⁄° *)((x)+1)Ë& 0xfcË>> 2)

	)

52 
	#OP_OP
(
x
Ë((*(c⁄° *)((x)+2)Ë& 0x1f)

	)

53 
	#OP_DST
(
x
) ((((*(const *)((x)+1)) & 0x03) << 3) | \

54 (((*(c⁄° *)((
x
)+2)Ë& 0xe0Ë>> 5))

	)

56 
	#MOVE_SRC
(
x
) ((((*(const *)(x))&0xf) << 2) | \

57 (((*(c⁄° *)((
x
)+1))&0xc0Ë>> 6))

	)

58 
	#MOVE_DST
(
x
Ë(((*(c⁄° *)((x)+1))&0x3f))

	)

59 
	#ALLOC_TYPE
(
x
) ((((*(const *)(x))&0x1f) << 2) | \

60 (((*(c⁄° *)(
x
+1))&0xc0Ë>> 6))

	)

61 
	#ALLOC_DST
(
x
Ë((*(c⁄° *)((x)+1))&0x3f)

	)

63 
	#CALL_VAL
(
x
Ë(*(c⁄° *)(x))

	)

64 
	#CALL_DST
(
x
Ë((*(c⁄° *)((x)+1)Ë& 0x1f)

	)

65 
	#CALL_ID
(
x
) ((((*(const *)((x))) & 0x0f) << 3) | \

66 (((*(c⁄° *)((
x
)+1)Ë& 0xe0Ë>> 5))

	)

68 
	#CALL_ARGS
(
x
Ë(
exã∫_fun˘s_¨gs
[
	`CALL_ID
(x)])

	)

69 
	#CALL_FUNC
(
x
Ë(
exã∫_fun˘s
[
	`CALL_ID
(x)])

	)

71 
	#OP_NEQF
 0x0

	)

72 
	#OP_NEQI
 0x1

	)

73 
	#OP_EQF
 0x2

	)

74 
	#OP_EQI
 0x3

	)

75 
	#OP_LESSF
 0x4

	)

76 
	#OP_LESSI
 0x5

	)

77 
	#OP_LESSEQF
 0x6

	)

78 
	#OP_LESSEQI
 0x7

	)

79 
	#OP_GREATERF
 0x8

	)

80 
	#OP_GREATERI
 0x9

	)

81 
	#OP_GREATEREQF
 0xa

	)

82 
	#OP_GREATEREQI
 0xb

	)

83 
	#OP_MODF
 0xc

	)

84 
	#OP_MODI
 0xd

	)

85 
	#OP_PLUSF
 0xe

	)

86 
	#OP_PLUSI
 0xf

	)

87 
	#OP_MINUSF
 0x10

	)

88 
	#OP_MINUSI
 0x11

	)

89 
	#OP_TIMESF
 0x12

	)

90 
	#OP_TIMESI
 0x13

	)

91 
	#OP_DIVF
 0x14

	)

92 
	#OP_DIVI
 0x15

	)

93 
	#OP_NEQA
 0x16

	)

94 
	#OP_EQA
 0x17

	)

96 
	#VALUE_TYPE_FLOAT
 0x00

	)

97 
	#VALUE_TYPE_INT
 0x01

	)

98 
	#VALUE_TYPE_FIELD
 0x02

	)

99 
	#VALUE_TYPE_HOST
 0x03

	)

100 
	#VALUE_TYPE_REVERSE
 0x04

	)

101 
	#VALUE_TYPE_TUPLE
 0x1f

	)

103 
	#VAL_IS_REG
(
x
Ë(((c⁄° )(x)Ë& 0x20)

	)

104 
	#VAL_IS_TUPLE
(
x
Ë(((c⁄° )(x)Ë=
VALUE_TYPE_TUPLE
)

	)

105 
	#VAL_IS_FLOAT
(
x
Ë(((c⁄° )(x)Ë=
VALUE_TYPE_FLOAT
)

	)

106 
	#VAL_IS_INT
(
x
Ë(((c⁄° )(x)Ë=
VALUE_TYPE_INT
)

	)

107 
	#VAL_IS_FIELD
(
x
Ë(((c⁄° )(x)Ë=
VALUE_TYPE_FIELD
)

	)

108 
	#VAL_IS_HOST
(
x
Ë(((c⁄° )(x)Ë=
VALUE_TYPE_HOST
)

	)

109 
	#VAL_IS_REVERSE
(
x
Ë(((c⁄° )(x)Ë=
VALUE_TYPE_REVERSE
)

	)

111 
	#VAL_REG
(
x
Ë(((c⁄° )(x)Ë& 0x1f)

	)

112 
	#VAL_FIELD_NUM
(
x
Ë((*(c⁄° *)(x)Ë& 0xff)

	)

113 
	#VAL_FIELD_REG
(
x
Ë((*(c⁄° *)((x)+1)Ë& 0x1f)

	)

115 
	#TYPE_DESCRIPTOR_SIZE
 7

	)

116 
	#DELTA_SIZE
 2

	)

117 
	#TYPE_FIELD_SIZE
 1

	)

118 
	#TYPE_FIELD_TYPE
 

	)

120 
	#TUPLE_TYPE
(
x
Ë(*(
TYPE_FIELD_TYPE
 *)(x))

	)

121 
	#TUPLE_FIELD
(
x
,
off
Ë((*)(((*)(x)Ë+ 
TYPE_FIELD_SIZE
 + (off)))

	)

123 
	#TYPE_OFFSET
(
x
Ë(
mñd_¥og
[1 + (x)])

	)

124 
	#TYPE_DESCRIPTOR
(
x
Ë((*)(
mñd_¥og
 + 
	`TYPE_OFFSET
(x)))

	)

126 
	#TYPE_PROPERTIES
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 2))

	)

127 
	#TYPE_AGGREGATE
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 3))

	)

128 
	#TYPE_NOARGS
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 5))

	)

129 
	#TYPE_STRATIFICATION_ROUND
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(x)+5))

	)

130 
	#TYPE_IS_STRATIFIED
(
x
Ë(
	`TYPE_STRATIFICATION_ROUND
(xË> 0)

	)

131 
	#TYPE_ARGS_DESC
(
x
Ë((*)(
	`TYPE_DESCRIPTOR
(x)+
TYPE_DESCRIPTOR_SIZE
))

	)

132 
	#TYPE_NODELTAS
(
x
Ë(*(
	`TYPE_DESCRIPTOR
(xË+ 6))

	)

133 
	#TYPE_DELTAS
(
x
Ë(
	`TYPE_ARGS_DESC
(xË+ 1*
	`TYPE_NOARGS
(x))

	)

134 
	#TYPE_START
(
x
Ë((*)(
mñd_¥og
 + *(*)
	`TYPE_DESCRIPTOR
(x)))

	)

135 
	#TYPE_NAME
(
x
Ë(
tu∂e_«mes
[x])

	)

136 
	#TYPE_ARG_DESC
(
x
, 
f
Ë((*)(
	`TYPE_ARGS_DESC
(x)+1*(f)))

	)

137 
	#TYPE_ARG_TYPE
(
x
, 
f
Ë(()(*
	`TYPE_ARG_DESC
(x, f)))

	)

139 
	#TYPE_SIZE
(
x
Ë(
¨gumíts
[(xË* 2 + 1])

	)

140 
	#TYPE_ARGS
(
x
Ë(
¨gumíts
 +árgumíts[(xË* 2])

	)

142 
	#TYPE_ARG
(
x
, 
f
Ë(
	`TYPE_ARGS
(x)+2*(f))

	)

143 
	#TYPE_ARG_SIZE
(
x
, 
f
Ë(*
	`TYPE_ARG
(x, f))

	)

144 
	#TYPE_ARG_OFFSET
(
x
, 
f
Ë(*(
	`TYPE_ARG
(x, fË+ 1))

	)

146 
	#SET_TUPLE_FIELD
(
tu∂e
, 
fõld
, 
d©a
) \

147 
	`mem˝y
(
	`TUPLE_FIELD
(
tu∂e
, 
	`TYPE_ARG_OFFSET
(
	`TUPLE_TYPE
—u∂e), 
fõld
)), \

148 
d©a
, 
	`TYPE_ARG_SIZE
(
	`TUPLE_TYPE
(
tu∂e
), 
fõld
))

	)

149 
	#GET_TUPLE_FIELD
(
tu∂e
, 
fõld
) \

150 
	`TUPLE_FIELD
(
tu∂e
, 
	`TYPE_ARG_OFFSET
(
	`TUPLE_TYPE
—u∂e), 
fõld
))

	)

151 
	#GET_TUPLE_SIZE
(
tu∂e
, 
fõld
) \

152 
	`TYPE_ARG_SIZE
(
	`TUPLE_TYPE
(
tu∂e
), 
fõld
)

	)

154 
	#TYPE_IS_AGG
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x01)

	)

155 
	#TYPE_IS_PERSISTENT
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x02)

	)

156 
	#TYPE_IS_LINEAR
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x04)

	)

157 
	#TYPE_IS_DELETE
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x08)

	)

158 
	#TYPE_IS_SCHEDULE
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x10)

	)

159 
	#TYPE_IS_ROUTING
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x20)

	)

160 
	#TYPE_IS_PROVED
(
x
Ë(
	`TYPE_PROPERTIES
(xË& 0x40)

	)

162 
	#AGG_AGG
(
x
Ë(((xË& (0xf0)Ë>> 4)

	)

163 
	#AGG_FIELD
(
x
Ë((xË& 0x0f)

	)

165 
	#AGG_NONE
 0

	)

166 
	#AGG_FIRST
 1

	)

167 
	#AGG_MAX_INT
 2

	)

168 
	#AGG_MIN_INT
 3

	)

169 
	#AGG_SUM_INT
 4

	)

170 
	#AGG_MAX_FLOAT
 5

	)

171 
	#AGG_MIN_FLOAT
 6

	)

172 
	#AGG_SUM_FLOAT
 7

	)

173 
	#AGG_SET_UNION_INT
 8

	)

174 
	#AGG_SET_UNION_FLOAT
 9

	)

175 
	#AGG_SUM_LIST_INT
 10

	)

176 
	#AGG_SUM_LIST_FLOAT
 11

	)

178 
	#FIELD_INT
 0x0

	)

179 
	#FIELD_FLOAT
 0x1

	)

180 
	#FIELD_ADDR
 0x2

	)

181 
	#FIELD_OTHER
 0x2

	)

182 
	#FIELD_LIST_INT
 0x3

	)

183 
	#FIELD_LIST_FLOAT
 0x4

	)

184 
	#FIELD_LIST_ADDR
 0x5

	)

185 
	#FIELD_SET_INT
 0x6

	)

186 
	#FIELD_SET_FLOAT
 0x7

	)

187 
	#FIELD_TYPE
 0x8

	)

189 
	#TYPE_NEIGHBOR
 0

	)

190 
	#TYPE_NEIGHBORCOUNT
 1

	)

191 
	#TYPE_VACANT
 2

	)

192 
	#TYPE_SETCOLOR
 3

	)

193 
	#TYPE_SETCOLOR2
 4

	)

196 
	#NUM_TYPES
 (
mñd_¥og
[0])

	)

198 
	#DELTA_TYPE
(
‹i
, 
id
Ë(*(*)(
dñès
[‹i] + (id)*
DELTA_SIZE
))

	)

199 
	#DELTA_POSITION
(
‹i
, 
id
Ë(*(*)(
dñès
[‹i] + (id)*
DELTA_SIZE
 + 1))

	)

200 
	#DELTA_WITH
(
‹i
Ë(
dñè_sizes
[‹i])

	)

201 
	#DELTA_TOTAL
(
‹i
Ë(
dñè_sizes
[‹i])

	)

203 
	#RET_RET
 0

	)

204 
	#RET_NEXT
 1

	)

206 c⁄° 
mñd_¥og
[];

207 
Regi°î
 (*
	texã∫_fun˘_ty≥
)();

208 
exã∫_fun˘_ty≥
 
exã∫_fun˘s
[];

209 
exã∫_fun˘s_¨gs
[];

210 *
tu∂e_«mes
[];

211 *
¨gumíts
;

212 *
dñè_sizes
;

214 
ölöe
 
tu∂e_t


215 
	$tu∂e_Æloc
(
tu∂e_ty≥
 
ty≥
)

217 #ifde‡
TUPLE_ALLOC_CHECKS


218 if(
ty≥
 >
NUM_TYPES
 ||Åype < 0) {

219 
	`Ârötf
(
°dîr
, "UƒecognizedÅy≥: %d\n", 
ty≥
);

220 
	`exô
(
EXIT_FAILURE
);

224 
tu∂e_t
 
tu∂e
 = 
	`ALLOC_TUPLE
(
	`TYPE_SIZE
(
ty≥
));

226 
	`TUPLE_TYPE
(
tu∂e
Ë
ty≥
;

228 #ifde‡
TUPLE_ALLOC_DEBUG


229 
	`¥ötf
("New %s(%dËtu∂e\n", 
tu∂e_«mes
[
ty≥
],Åype);

232  
tu∂e
;

233 
	}
}

236 
tu∂e_h™dÀ
(
tu∂e_t
 
tu∂e
, 
isNew
, 
Regi°î
 *
ªg
);

237 
tu∂e_£nd
(
tu∂e_t
 
tu∂e
, *
π
, 
mñd_öt
 
dñay
, 
isNew
);

238 
tu∂e_do_h™dÀ
(
tu∂e_ty≥
 
ty≥
, *
tu∂e
, 
isNew
, 
Regi°î
 *
ªg
);

239 
tu∂e_¥o˚ss
(
tu∂e_t
 
tu∂e
, c⁄° *
pc
,

240 
isNew
, 
Regi°î
 *
ªg
);

241 
tu∂e_¥öt
(
tu∂e_t
 
tu∂e
, 
FILE
 *
Â
);

244 
ölöe
 

245 
	$tu∂e_dump
(*
tu∂e
)

247 
	`tu∂e_¥öt
(
tu∂e
, 
°dîr
);

248 
	`Ârötf
(
°dîr
, "\n");

249 
	}
}

251 
¥öt_¥ogøm_öfo
();

253 
öô_dñès
();

254 
öô_fõlds
();

255 
Á˘s_dump
();

256 
öô_c⁄°s
();

258 
tu∂e_íåy
* 
queue_íqueue
(
tu∂e_queue
 *
queue
, 
tu∂e_t
 
tu∂e
, 
ªc‹d_ty≥
 
isNew
);

259 
boﬁ
 
queue_is_em±y
(
tu∂e_queue
 *
queue
);

260 
tu∂e_t
 
queue_dequeue
(
tu∂e_queue
 *
queue
, *
isNew
);

261 
tu∂e_t
 
queue_p›_tu∂e
(
tu∂e_queue
 *
queue
);

262 
queue_push_tu∂e
(
tu∂e_queue
 *
queue
, 
tu∂e_íåy
 *
íåy
);

264 
ölöe
 

265 
	$queue_öô
(
tu∂e_queue
 *
queue
)

267 
queue
->
hód
 = queue->
èû
 = 
NULL
;

268 
	}
}

270 
ölöe
 
boﬁ


271 
	$p_em±y
(
tu∂e_pqueue
 *
q
)

273  
q
->
queue
 =
NULL
;

274 
	}
}

276 
ölöe
 
tu∂e_≥¡ry
*

277 
	$p_≥ek
(
tu∂e_pqueue
 *
q
)

279  
q
->
queue
;

280 
	}
}

282 
tu∂e_≥¡ry
 *
p_dequeue
(
tu∂e_pqueue
 *
q
);

283 
p_íqueue
(
tu∂e_pqueue
 *
q
, 
mñd_öt
 
¥i‹ôy
, 
tu∂e_t
 
tu∂e
,

284 *
π
, 
ªc‹d_ty≥
 
isNew
);

286 
tu∂e_ty≥
 
TYPE_INIT
;

287 
tu∂e_ty≥
 
TYPE_EDGE
;

288 
tu∂e_ty≥
 
TYPE_COLOCATED
;

289 
tu∂e_ty≥
 
TYPE_PROVED
;

290 
tu∂e_ty≥
 
TYPE_TERMINATE
;

	@meldinterp-runtime/list_runtime.c

2 
	~<°dlib.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~"../sy°em/myas£π.h
"

7 
	~"li°_ru¡ime.h
"

8 
	~"≠i.h
"

9 
	~"modñ.h
"

11 
li°_des¸ùt‹
 *
	göt_des¸ùt‹
 = 
NULL
;

12 
li°_des¸ùt‹
 *
	gÊﬂt_des¸ùt‹
 = 
NULL
;

13 
li°_des¸ùt‹
 *
	gnode_des¸ùt‹
 = 
NULL
;

15 
ölöe
 
Li°
*

16 
	$li°_¸óã
(
li°_des¸ùt‹
 *
des¸ùt‹
)

18 
Li°
 *
ªt
 = (Li°*)
	`mÆloc
((List));

20 
ªt
->
tŸÆ
 = 0;

21 
ªt
->
des¸ùt‹
 = descriptor;

22 
ªt
->
hód
 =Ñë->
èû
 = 
NULL
;

24  
ªt
;

25 
	}
}

27 
ölöe
 *

28 
	$li°_¸óã_node
(
Li°
 *
li°
, 
li°_ñemít
 
d©a
, *
√xt
)

30 *
node
 = (*)
	`mÆloc
((*Ë+ 
li°
->
des¸ùt‹
->
size_ñem
);

32 
	`LIST_NEXT
(
node
Ë
√xt
;

34 
	`mem˝y
(
	`LIST_DATA
(
node
), 
d©a
, 
li°
->
des¸ùt‹
->
size_ñem
);

36  
node
;

37 
	}
}

39 
ölöe
 

40 
	$li°_push_hód
(
Li°
 *
li°
, 
li°_ñemít
 
d©a
)

42 *
node
 = 
	`li°_¸óã_node
(
li°
, 
d©a
,Üi°->
hód
);

44 
li°
->
hód
 = 
node
;

46 if(
li°
->
èû
 =
NULL
)

47 
li°
->
èû
 = 
node
;

49 
li°
->
tŸÆ
++;

50 
	}
}

52 
ölöe
 

53 
	$li°_push_èû_node
(
Li°
 *
li°
, *
node
)

55 if(
li°
->
èû
 !
NULL
)

56 
	`LIST_NEXT
(
li°
->
èû
Ë
node
;

57 
li°
->
èû
 = 
node
;

58 if(
li°
->
hód
 =
NULL
)

59 
li°
->
hód
 = 
node
;

60 
	`LIST_NEXT
(
node
Ë
NULL
;

61 
li°
->
tŸÆ
++;

62 
	}
}

64 
ölöe
 

65 
	$li°_push_èû
(
Li°
 *
li°
, 
li°_ñemít
 
d©a
)

67 
	`li°_push_èû_node
(
li°
, 
	`li°_¸óã_node
÷i°, 
d©a
, 
NULL
));

68 
	}
}

70 
ölöe
 *

71 
	$li°_p›_hód
(
Li°
 *
li°
)

73 if(
li°
->
hód
 !
NULL
) {

74 *
±r
 = 
li°
->
hód
;

76 
li°
->
hód
 = 
	`LIST_NEXT
(
±r
);

78 if(
li°
->
hód
 =
NULL
)

79 
li°
->
èû
 = 
NULL
;

81 --
li°
->
tŸÆ
;

83  
±r
;

85  
NULL
;

86 
	}
}

88 
Li°
 *
	$li°_öt_¸óã
()

90 
	`as£π
(
öt_des¸ùt‹
 !
NULL
);

92  
	`li°_¸óã
(
öt_des¸ùt‹
);

93 
	}
}

95 
Li°
 *
	$li°_Êﬂt_¸óã
()

97 
	`as£π
(
Êﬂt_des¸ùt‹
 !
NULL
);

99  
	`li°_¸óã
(
Êﬂt_des¸ùt‹
);

100 
	}
}

102 
Li°
 *
	$li°_node_¸óã
()

104 
	`as£π
(
node_des¸ùt‹
 !
NULL
);

106  
	`li°_¸óã
(
node_des¸ùt‹
);

107 
	}
}

109 
	$li°_öt_push_hód
(
Li°
 *
li°
, 
mñd_öt
 
d©a
)

111 
	`li°_push_hód
(
li°
, (
li°_ñemít
)&
d©a
);

112 
	}
}

114 
	$li°_öt_push_èû
(
Li°
 *
li°
, 
mñd_öt
 
d©a
)

116 
	`li°_push_èû
(
li°
, (
li°_ñemít
)&
d©a
);

117 
	}
}

119 
	$li°_node_push_hód
(
Li°
 *
li°
, *
d©a
)

121 
	`li°_push_hód
(
li°
, (
li°_ñemít
)&
d©a
);

122 
	}
}

124 
	$li°_node_push_èû
(
Li°
 *
li°
, *
d©a
)

126 
	`li°_push_èû
(
li°
, (
li°_ñemít
)&
d©a
);

127 
	}
}

129 
	$li°_Êﬂt_push_hód
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
)

131 
	`li°_push_hód
(
li°
, (
li°_ñemít
)&
d©a
);

132 
	}
}

134 
	$li°_Êﬂt_push_èû
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
)

136 
	`li°_push_èû
(
li°
, (
li°_ñemít
)&
d©a
);

137 
	}
}

139 
boﬁ
 
	$li°_is_Êﬂt
(
Li°
 *
li°
)

141  
li°
->
des¸ùt‹
 =
Êﬂt_des¸ùt‹
;

142 
	}
}

144 
boﬁ
 
	$li°_is_öt
(
Li°
 *
li°
)

146  
li°
->
des¸ùt‹
 =
öt_des¸ùt‹
;

147 
	}
}

149 
boﬁ
 
	$li°_is_node
(
Li°
 *
li°
)

151  
li°
->
des¸ùt‹
 =
node_des¸ùt‹
;

152 
	}
}

154 
Li°
* 
	$li°_öt_‰om_ve˘‹
(
mñd_öt
 *
vec
, 
size
)

156 
Li°
 *
li°
 = 
	`li°_öt_¸óã
();

157 
i
;

159 
i
 = 0; i < 
size
; ++i)

160 
	`li°_öt_push_èû
(
li°
, 
vec
[
i
]);

162  
li°
;

163 
	}
}

165 
Li°
* 
	$li°_Êﬂt_‰om_ve˘‹
(
mñd_Êﬂt
 *
vec
, 
size
)

167 
Li°
 *
li°
 = 
	`li°_Êﬂt_¸óã
();

168 
i
;

170 
i
 = 0; i < 
size
; ++i)

171 
	`li°_Êﬂt_push_èû
(
li°
, 
vec
[
i
]);

173  
li°
;

174 
	}
}

176 
Li°
* 
	$li°_node_‰om_ve˘‹
(**
vec
, 
size
)

178 
Li°
 *
li°
 = 
	`li°_node_¸óã
();

179 
i
;

181 
i
 = 0; i < 
size
; ++i) {

182 
	`li°_node_push_èû
(
li°
, 
vec
[
i
]);

185  
li°
;

186 
	}
}

188 
	$li°_dñëe
(
Li°
 *
li°
)

190 *
chaö
 = 
li°
->
hód
;

191 *
√xt
;

193 
chaö
) {

194 
√xt
 = 
	`LIST_NEXT
(
chaö
);

195 
	`‰ì
(
chaö
);

196 
chaö
 = 
√xt
;

198 
	`‰ì
(
li°
);

199 
	}
}

201 
	$li°_equÆ
(
Li°
 *
li°1
, Li° *
li°2
)

203 if(
li°1
->
des¸ùt‹
 !
li°2
->descriptor)

206 if(
	`li°_tŸÆ
(
li°1
Ë!li°_tŸÆ(
li°2
))

209 
li°_ôî©‹
 
ô1
 = 
	`li°_gë_ôî©‹
(
li°1
);

210 
li°_ôî©‹
 
ô2
 = 
	`li°_gë_ôî©‹
(
li°2
);

212 
	`li°_ôî©‹_has_√xt
(
ô1
)) {

213 if(!
li°1
->
des¸ùt‹
->
	`equÆ_‚
(
	`li°_ôî©‹_d©a
(
ô1
),Üi°_ôî©‹_d©a(
ô2
)))

216 
ô1
 = 
	`li°_ôî©‹_√xt
(
li°1
);

217 
ô2
 = 
	`li°_ôî©‹_√xt
(
li°2
);

221 
	}
}

223 
	$li°_¥öt
(
Li°
 *
li°
)

225 
li°_ôî©‹
 
ô
 = 
	`li°_gë_ôî©‹
(
li°
);

227 
	`¥ötf
("LIST %∞wôh %dÇodes:\n", 
li°
,Üi°->
tŸÆ
);

229 
	`¥ötf
("\t");

230 
	`li°_ôî©‹_has_√xt
(
ô
)) {

231 
li°
->
des¸ùt‹
->
	`¥öt_‚
(
	`li°_ôî©‹_d©a
(
ô
));

232 
ô
 = 
	`li°_ôî©‹_√xt
(it);

233 i‡(
	`li°_ôî©‹_has_√xt
(
ô
))

234 
	`¥ötf
(" ");

236 
	`¥ötf
("\n");

237 
	}
}

239 
	$li°_ªvî£_fú°
(
Li°
 *
li°
)

241 *
node
 = 
	`li°_p›_hód
(
li°
);

243 i‡(
node
) {

244 
	`li°_push_èû_node
(
li°
, 
node
);

246 
	}
}

248 
Li°
* 
	$li°_c›y
(
Li°
 *
li°
)

250 
Li°
 *
˛⁄e
 = 
	`li°_¸óã
(
li°
->
des¸ùt‹
);

251 
li°_ôî©‹
 
ô
 = 
	`li°_gë_ôî©‹
(
li°
);

253 
	`li°_ôî©‹_has_√xt
(
ô
)) {

254 
	`li°_push_èû
(
˛⁄e
, 
	`li°_ôî©‹_d©a
(
ô
));

256 
ô
 = 
	`li°_ôî©‹_√xt
(it);

259  
˛⁄e
;

260 
	}
}

262 
	#MAXLEN
 20

	)

265 
	$c⁄vît_mñd_öt_ß„
(
mñd_öt
 
d©a
)

267 
buf„r
[
MAXLEN
];

268 
i
=
MAXLEN
-2;

269 
buf„r
[
MAXLEN
-1] = 0;

270 
d©a
) {

271 
d
 = 
d©a
 % 10;

272 
buf„r
[
i
--] = '0'+
d
;

273 
d©a
 = data / 10;

275  
buf„r
+
i
+1;

276 
	}
}

279 
	$¥öt_öt_li°_ñem
(
li°_ñemít
 
d©a
)

281 i‡((
mñd_öt
) <= ())

282 
	`¥ötf
("%d", ()
	`MELD_INT
(
d©a
));

284 
	`¥ötf
("%s", 
	`c⁄vît_mñd_öt_ß„
(
	`MELD_INT
(
d©a
)));

285 
	}
}

287 
boﬁ


288 
	$equÆ_öt_li°_ñem
(
li°_ñemít
 
ñ1
,Üi°_ñemíà
ñ2
)

290  
	`MELD_INT
(
ñ1
Ë=MELD_INT(
ñ2
);

291 
	}
}

294 
	$¥öt_Êﬂt_li°_ñem
(
li°_ñemít
 
d©a
)

296 
	`¥ötf
("%f", ()(
	`MELD_FLOAT
(
d©a
)));

297 
	}
}

299 
boﬁ


300 
	$equÆ_Êﬂt_li°_ñem
(
li°_ñemít
 
ñ1
,Üi°_ñemíà
ñ2
)

302  
	`MELD_FLOAT
(
ñ1
Ë=MELD_FLOAT(
ñ2
);

303 
	}
}

306 
	$¥öt_node_li°_ñem
(
li°_ñemít
 
d©a
)

308 #ifde‡
PARALLEL_MACHINE


309 
	`¥ötf
(
NODE_FORMAT
, 
	`MELD_NODE
(
d©a
)->
‹dî
);

310 
	`¥ötf
(" %p", 
	`MELD_NODE
(
d©a
));

312 #ifde‡
BBSIM


313 
	`¥ötf
(
NODE_FORMAT
, 
	`MELD_NODE
(
d©a
)->
id
);

316 
	}
}

318 
boﬁ


319 
	$equÆ_node_li°_ñem
(
li°_ñemít
 
ñ1
,Üi°_ñemíà
ñ2
)

321  
	`MELD_PTR
(
ñ1
Ë=MELD_PTR(
ñ2
);

322 
	}
}

325 
	$li°_öô_des¸ùt‹s
()

327 
öt_des¸ùt‹
 = 
	`mÆloc
((
li°_des¸ùt‹
));

328 
öt_des¸ùt‹
->
size_ñem
 = (
mñd_öt
);

329 
öt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_öt_li°_ñem
;

330 
öt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_öt_li°_ñem
;

332 
Êﬂt_des¸ùt‹
 = 
	`mÆloc
((
li°_des¸ùt‹
));

333 
Êﬂt_des¸ùt‹
->
size_ñem
 = (
mñd_Êﬂt
);

334 
Êﬂt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_Êﬂt_li°_ñem
;

335 
Êﬂt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_Êﬂt_li°_ñem
;

337 
node_des¸ùt‹
 = 
	`mÆloc
((
li°_des¸ùt‹
));

338 
node_des¸ùt‹
->
size_ñem
 = (*);

339 
node_des¸ùt‹
->
¥öt_‚
 = 
¥öt_node_li°_ñem
;

340 
node_des¸ùt‹
->
equÆ_‚
 = 
equÆ_node_li°_ñem
;

341 
	}
}

	@meldinterp-runtime/list_runtime.h

2 #i‚de‡
LIST_RUNTIME_H


3 
	#LIST_RUNTIME_H


	)

5 
	~<°ddef.h
>

7 
	~"≠i.h
"

8 #i‚de‡
IGNORE_IN_PASS1_OFF_COMPILE_BB


9 
	~"modñ.h
"

12 * 
	tli°_ñemít
;

14 
	#LIST_NEXT
(
node
Ë(*(**)“ode))

	)

15 
	#LIST_DATA
(
node
Ë((*)((*)“odeË+ (*)))

	)

17 (*
	tli°_¥öt_‚
)(
	tli°_ñemít
);

18 
	$boﬁ
 (*
	tli°_equÆ_‚
)(
	tli°_ñemít
,Üist_element);

20 
	s_li°_des¸ùt‹


22 
size_t
 
size_ñem
;

23 
li°_¥öt_‚
 
¥öt_‚
;

24 
li°_equÆ_‚
 
equÆ_‚
;

25 } 
	tli°_des¸ùt‹
;

27 
_Li°
 
	tLi°
;

29 
	s_Li°
 {

30 *
hód
;

31 *
èû
;

32 
tŸÆ
;

33 
li°_des¸ùt‹
 *
des¸ùt‹
;

36 
	`li°_öô_des¸ùt‹s
();

38 
Li°
 *
	`li°_öt_¸óã
();

39 
Li°
 *
	`li°_Êﬂt_¸óã
();

40 
Li°
 *
	`li°_node_¸óã
();

42 
	`li°_dñëe
(
Li°
 *
li°
);

44 
	`li°_equÆ
(
Li°
 *
li°1
, Li° *
li°2
);

46 
	`li°_¥öt
(
Li°
 *
li°
);

48 
	`li°_ªvî£_fú°
(
Li°
 *
li°
);

50 
Li°
 *
	`li°_c›y
(Li° *
li°
);

52 
ölöe
 
	$li°_tŸÆ
(
Li°
 *
li°
)

54  
li°
->
tŸÆ
;

55 
	}
}

57 
li°_ñemít
 
	tli°_ôî©‹
;

59 
ölöe


60 
li°_ôî©‹
 
	$li°_gë_ôî©‹
(
Li°
 *
li°
)

62  
li°
->
hód
;

63 
	}
}

65 
ölöe


66 
li°_ôî©‹
 
	$li°_œ°_ôî©‹
(
Li°
 *
li°
)

68  
li°
->
èû
;

69 
	}
}

71 
ölöe


72 
	$li°_ôî©‹_has_√xt
(
li°_ôî©‹
 
ôî©‹
)

74  
ôî©‹
 !
NULL
;

75 
	}
}

77 
ölöe


78 
li°_ôî©‹
 
	$li°_ôî©‹_√xt
(
li°_ôî©‹
 
ôî©‹
)

80  
	`LIST_NEXT
(
ôî©‹
);

81 
	}
}

83 
ölöe


84 
li°_ñemít
 
	$li°_ôî©‹_d©a
(
li°_ôî©‹
 
ôî©‹
)

86  
	`LIST_DATA
(
ôî©‹
);

87 
	}
}

89 
	#li°_ôî©‹_öt
(
ô
Ë(*(
mñd_öt
 *)
	`li°_ôî©‹_d©a
(ô))

	)

90 
	#li°_ôî©‹_Êﬂt
(
ô
Ë(*(
mñd_Êﬂt
 *)
	`li°_ôî©‹_d©a
(ô))

	)

91 
	#li°_ôî©‹_node
(
ô
Ë(*(
Node
 **)
	`li°_ôî©‹_d©a
(ô))

	)

93 
li°_öt_push_hód
(
Li°
 *
li°
, 
mñd_öt
 
d©a
);

94 
li°_öt_push_èû
(
Li°
 *
li°
, 
mñd_öt
 
d©a
);

96 
li°_Êﬂt_push_hód
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
);

97 
li°_Êﬂt_push_èû
(
Li°
 *
li°
, 
mñd_Êﬂt
 
d©a
);

99 
li°_node_push_hód
(
Li°
 *
li°
, *
d©a
);

100 
li°_node_push_èû
(
Li°
 *
li°
, *
d©a
);

102 
boﬁ
 
li°_is_Êﬂt
(
Li°
 *
li°
);

103 
boﬁ
 
li°_is_öt
(
Li°
 *
li°
);

104 
boﬁ
 
li°_is_node
(
Li°
 *
li°
);

106 
Li°
* 
li°_Êﬂt_‰om_ve˘‹
(
mñd_Êﬂt
 *
vec
, 
size
);

107 
Li°
* 
li°_öt_‰om_ve˘‹
(
mñd_öt
 *
vec
, 
size
);

108 
Li°
* 
li°_node_‰om_ve˘‹
(**
vec
, 
size
);

110 * 
c⁄vît_mñd_öt_ß„
(
mñd_öt
 
d©a
);

	@meldinterp-runtime/meldvm_instrumentation.c

1 
	~"mñdvm_ö°rumíèti⁄.h
"

2 
	~<°dio.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<°dlib.h
>

8 
	$hexc⁄vît
 (
pci
,* 
buf„r
)

11 
buf„r1
;

12 
buf„r2
;

13 
buf„rch¨1
;

14 
buf„rch¨2
;

16 
buf„r1
 = ()(
pci
 & 0x0f);

17 
buf„r2
 = (Ë((
pci
 >> 4) & 0x0f);

18 
buf„rch¨1
 = (
pci
 & 0x0f);

20 
buf„rch¨2
 =((
pci
 >> 4) & 0x0f);

22 
buf„r2
) {

24 
buf„r
[0]= '0';

27 
buf„r
[0]= '1';

30 
buf„r
[0]= '2';

33 
buf„r
[0]= '3';

36 
buf„r
[0]= '4';

39 
buf„r
[0]= '5';

42 
buf„r
[0]= '6';

45 
buf„r
[0]= '7';

48 
buf„r
[0]= '8';

51 
buf„r
[0]= '9';

54 
buf„r
[0]= 'A';

57 
buf„r
[0]= 'B';

60 
buf„r
[0]= 'C';

63 
buf„r
[0]= 'D';

66 
buf„r
[0]= 'E';

69 
buf„r
[0]= 'F';

75 
buf„r1
) {

77 
buf„r
[1]= '0';

80 
buf„r
[1]= '1';

83 
buf„r
[1]= '2';

86 
buf„r
[1]= '3';

89 
buf„r
[1]= '4';

92 
buf„r
[1]= '5';

95 
buf„r
[1]= '6';

98 
buf„r
[1]= '7';

101 
buf„r
[1]= '8';

104 
buf„r
[1]= '9';

107 
buf„r
[1]= 'A';

110 
buf„r
[1]= 'B';

113 
buf„r
[1]= 'C';

116 
buf„r
[1]= 'D';

119 
buf„r
[1]= 'E';

122 
buf„r
[1]= 'F';

128 
buf„r
[2] = '\0';

129 
	}
}

132 
	$mñdvm_ö°ru
(* 
›s_ty≥
, 
›s_co°
, *
pc
)

135 
FILE
 *
log
;

136 * 
pchexbuf„r
;

137 * 
pchex
;

138 * 
pc›ªsu…
;

139 
i
,
Àn
;

141 
log
 = 
	`f›í
 ("executionlog","a");

144 
pchex
 = 
	`mÆloc
(50);

145 
pchexbuf„r
 = 
	`mÆloc
(4);

146 
pc›ªsu…
 = 
	`mÆloc
(2);

149 
±hªad_t
 
id
 = 
	`±hªad_£lf
();

153 
	`°r˝y
((*)
pchex
,"");

155 
Àn
 = (
pc
)-1;

157 
i
=0 ; i<
Àn
; i++) {

158 
	`°r˝y
((*Ë
pchexbuf„r
,"");

162 
	`hexc⁄vît
(
pc
[
i
],
pchexbuf„r
);

163 
	`°rˇt
(
pchex
,
pchexbuf„r
);

167 *
pc›ªsu…
 = ((*(c⁄° *)(
pc
))&0xfc);

170 
	`Ârötf
(
log
, "cuºíà› o¿block %lu: %s, o∞co°: %d\n",
id
, 
›s_ty≥
, 
›s_co°
);

172 
	`‰ì
(
pchexbuf„r
);

173 
	`‰ì
(
pchex
);

174 
	`f˛o£
(
log
);

176 
	}
}

	@meldinterp-runtime/meldvm_instrumentation.h

1 
	~<±hªad.h
>

3 
mñdvm_ö°ru
(* 
›s_ty≥
, 
›s_co°
, c⁄° * 
pc
);

	@meldinterp-runtime/set_runtime.c

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<°dio.h
>

5 
	~"../sy°em/myas£π.h
"

7 
	~"£t_ru¡ime.h
"

9 
£t_des¸ùt‹
 *
	göt_des¸ùt‹
 = 
NULL
;

10 
£t_des¸ùt‹
 *
	gÊﬂt_des¸ùt‹
 = 
NULL
;

12 
ölöe
 
Së
*

13 
	$£t_¸óã
(
£t_des¸ùt‹
 *
des¸ùt‹
)

15 
Së
* 
£t
 = (Së*)
	`mÆloc
((Set));

17 
£t
->
°¨t
 = 
NULL
;

18 
£t
->
√Àms
 = 0;

19 
£t
->
des¸ùt‹
 = descriptor;

21  
£t
;

22 
	}
}

24 
	#ALLOC_AND_SET
(
£t
, 
d©a
, 
√xt
, 
de°
) \

25 
de°
 = 
	`mÆloc
(
£t
->
des¸ùt‹
->
size_ñem
 + (*)); \

26 
	`mem˝y
(
de°
, 
d©a
, 
£t
->
des¸ùt‹
->
size_ñem
); \

27 *((**)((*)(
de°
Ë+ 
£t
->
des¸ùt‹
->
size_ñem
)Ë
√xt
; \

28 
£t
->
√Àms
++

	)

30 
	#ADVANCE_NEXT
(
£t
, 
±r
Ë*(**)’å + së->
des¸ùt‹
->
size_ñem
)

	)

33 
	$£t_ö£π
(
Së
 *
£t
, 
£t_d©a
 
d©a
)

35 *
bef‹e
 = 
NULL
;

36 *
cuºít
 = 
£t
->
°¨t
;

38 
cuºít
) {

39 
£t_d©a
 
ñem
 = 
cuºít
;

41 if(
£t
->
des¸ùt‹
->
	`cmp_‚
(
d©a
, 
ñem
)) {

45 if(
bef‹e
 && 
£t
->
des¸ùt‹
->
	`equÆ_‚
(
d©a
, before))

48 i‡(
bef‹e
) {

49 **
bef‹íext
 = (**)(
bef‹e
 + 
£t
->
des¸ùt‹
->
size_ñem
);

50 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
cuºít
, *
bef‹íext
);

52 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
cuºít
, së->
°¨t
);

59 
bef‹e
 = 
cuºít
;

60 
cuºít
 = 
	`ADVANCE_NEXT
(
£t
, current);

63 i‡(
bef‹e
) {

65 i‡(
£t
->
des¸ùt‹
->
	`equÆ_‚
(
d©a
, 
bef‹e
))

68 **
bef‹íext
 = (**)(
bef‹e
 + 
£t
->
des¸ùt‹
->
size_ñem
);

69 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
NULL
, *
bef‹íext
);

71 
	`ALLOC_AND_SET
(
£t
, 
d©a
, 
NULL
, së->
°¨t
);

73 
	}
}

76 
	$com∑ª_öt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

78 
i1
 = *(*)
a1
;

79 
i2
 = *(*)
a2
;

81  
i1
 < 
i2
;

82 
	}
}

85 
	$equÆ_öt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

87 
i1
 = *(*)
a1
;

88 
i2
 = *(*)
a2
;

90  
i1
 =
i2
;

91 
	}
}

94 
	$¥öt_öt_vÆue
(
£t_d©a
 
a
)

96 
	`¥ötf
("%d", *(*)
a
);

97 
	}
}

99 
Së
*

100 
	$£t_öt_¸óã
()

102 
	`as£π
(
öt_des¸ùt‹
 !
NULL
);

103  
	`£t_¸óã
(
öt_des¸ùt‹
);

104 
	}
}

107 
	$com∑ª_Êﬂt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

109 
f1
 = *(*)
a1
;

110 
f2
 = *(*)
a2
;

112  
f1
 < 
f2
;

113 
	}
}

116 
	$equÆ_Êﬂt_vÆues
(
£t_d©a
 
a1
, së_d©®
a2
)

118 
f1
 = *(*)
a1
;

119 
f2
 = *(*)
a2
;

121  
f1
 =
f2
;

122 
	}
}

125 
	$¥öt_Êﬂt_vÆue
(
£t_d©a
 
a
)

127 
	`¥ötf
("%f", *(*)
a
);

128 
	}
}

130 
Së
*

131 
	$£t_Êﬂt_¸óã
()

133 
	`as£π
(
Êﬂt_des¸ùt‹
 !
NULL
);

134  
	`£t_¸óã
(
Êﬂt_des¸ùt‹
);

135 
	}
}

138 
	$£t_öt_ö£π
(
Së
* 
£t
, 
d©a
)

140 
	`£t_ö£π
(
£t
, (
£t_d©a
)&
d©a
);

141 
	}
}

144 
	$£t_Êﬂt_ö£π
(
Së
* 
£t
, 
d©a
)

146 
	`£t_ö£π
(
£t
, (
£t_d©a
)&
d©a
);

147 
	}
}

150 
	$£t_¥öt
(
Së
 *
£t
)

152 
	`¥ötf
("(Së-Uni⁄ wôh %dÉÀms, %Zu byã†óch [", 
£t
->
√Àms
, së->
des¸ùt‹
->
size_ñem
);

154 * 
cuºít
 = 
£t
->
°¨t
;

155 
isFú°
 = 1;

157 
cuºít
) {

159 if(
isFú°
)

160 
isFú°
 = 0;

162 
	`¥ötf
(", ");

164 
£t
->
des¸ùt‹
->
	`¥öt_‚
((
£t_d©a
)
cuºít
);

166 
cuºít
 = 
	`ADVANCE_NEXT
(
£t
, current);

169 
	`¥ötf
("])\n");

170 
	}
}

172 
	$£t_equÆ
(
Së
 *
£t1
, Së *
£t2
)

174 if(
£t1
->
√Àms
 !
£t2
->nelems)

177 if(
£t1
->
des¸ùt‹
 !
£t2
->descriptor)

180 * 
cuºít1
 = 
£t1
->
°¨t
;

181 * 
cuºít2
 = 
£t2
->
°¨t
;

183 
cuºít1
) {

184 
£t_d©a
 
ñem1
 = (£t_d©a)
cuºít1
;

185 
£t_d©a
 
ñem2
 = (£t_d©a)
cuºít2
;

187 if(!
£t1
->
des¸ùt‹
->
	`equÆ_‚
(
ñem1
, 
ñem2
))

190 
cuºít1
 = 
	`ADVANCE_NEXT
(
£t1
, current1);

191 
cuºít2
 = 
	`ADVANCE_NEXT
(
£t1
, current2);

195 
	}
}

197 
	$£t_dñëe
(
Së
 *
£t
)

199 * 
cuºít
 = 
£t
->
°¨t
;

200 * 
√xt
;

202 
cuºít
) {

204 
√xt
 = 
	`ADVANCE_NEXT
(
£t
, 
cuºít
);

205 
	`‰ì
(
cuºít
);

206 
cuºít
 = 
√xt
;

209 
	`‰ì
(
£t
);

210 
	}
}

213 
	$£t_öô_des¸ùt‹s
()

215 
öt_des¸ùt‹
 = 
	`mÆloc
((
£t_des¸ùt‹
));

216 
öt_des¸ùt‹
->
size_ñem
 = ();

217 
öt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_öt_vÆue
;

218 
öt_des¸ùt‹
->
cmp_‚
 = 
com∑ª_öt_vÆues
;

219 
öt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_öt_vÆues
;

221 
Êﬂt_des¸ùt‹
 = 
	`mÆloc
((
£t_des¸ùt‹
));

222 
Êﬂt_des¸ùt‹
->
size_ñem
 = ();

223 
Êﬂt_des¸ùt‹
->
¥öt_‚
 = 
¥öt_Êﬂt_vÆue
;

224 
Êﬂt_des¸ùt‹
->
cmp_‚
 = 
com∑ª_Êﬂt_vÆues
;

225 
Êﬂt_des¸ùt‹
->
equÆ_‚
 = 
equÆ_Êﬂt_vÆues
;

226 
	}
}

	@meldinterp-runtime/set_runtime.h

2 #i‚de‡
SET_RUNTIME_H


3 
	#SET_RUNTIME_H


	)

5 
	~<°ddef.h
>

7 * 
	t£t_d©a
;

9 (*
	tcom∑ª_£t_‚
)(
	t£t_d©a
, set_data);

10 (*
	t¥öt_£t_‚
)(
	t£t_d©a
);

12 
	s_£t_des¸ùt‹
 {

13 
com∑ª_£t_‚
 
cmp_‚
;

14 
com∑ª_£t_‚
 
equÆ_‚
;

15 
¥öt_£t_‚
 
¥öt_‚
;

16 
size_t
 
size_ñem
;

17 } 
	t£t_des¸ùt‹
;

19 
	s_Së
 {

20 * 
°¨t
;

21 
√Àms
;

22 
£t_des¸ùt‹
 *
des¸ùt‹
;

23 } 
	tSë
;

25 
	`£t_öô_des¸ùt‹s
();

27 
Së
 *
	`£t_öt_¸óã
();

28 
Së
 *
	`£t_Êﬂt_¸óã
();

30 
	`£t_ö£π
(
Së
 *
£t
, 
£t_d©a
 
d©a
);

31 
	`£t_öt_ö£π
(
Së
 *
£t
, 
d©a
);

32 
	`£t_Êﬂt_ö£π
(
Së
 *
£t
, 
d©a
);

34 
	`£t_equÆ
(
Së
 *
£t1
, Së *
£t2
);

36 
	`£t_dñëe
(
Së
 *
£t
);

38 
	`£t_¥öt
(
Së
 *
£t
);

40 
ölöe


41 
	$£t_tŸÆ
(
Së
 *
£t
)

43  
£t
->
√Àms
;

44 
	}
}

	@meldinterp/runtime/extern_functions.c

2 
	~"exã∫_fun˘i⁄s.h
"

3 
	~<°dio.h
>

5 
	$blockID
(
x
) {

6 
	`Ârötf
(
°dîr
, "Rëu∫ög %d\n", 
x
);

7  
x
;

8 
	}
}

10 
	$¥ötI¡
(
x
, 
y
, 
z
) {

11 
	`Ârötf
(
°dîr
, "Prötög f‹ c©om %dáà%d vÆuê%d\n", 
x
, 
y
, 
z
);

12 
	}
}

	@meldinterp/runtime/extern_functions.h

2 #i‚de‡
_EXTERN_FUNCTIONS_H_


3 
	#_EXTERN_FUNCTIONS_H_


	)

5 
blockID
();

6 
¥ötI¡
(, , );

	@meldinterp/runtime/meldvm.c

2 
	~"bb.h
"

3 
	~"Àd.h
"

4 
	~"í£mbÀ.h
"

6 
	~<uni°d.h
>

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

13 
	#BLOCK_ID
 (
	`ªad_f˙_id
())

	)

15 c⁄° 
mñd_¥og
[];

16 * (*
exã∫_fun˘s
[])();

17 
exã∫_fun˘s_¨gs
[];

20 
	#IF
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x60)

	)

21 
	#ELSE
(
x
Ë((*(c⁄° *)(x)Ë=0x02)

	)

22 
	#ENDIF
(
x
Ë((*(c⁄° *)(x)Ë=0x03)

	)

23 
	#ITER
(
x
Ë(((*(c⁄° *)(x))&0xc0Ë=0xc0)

	)

24 
	#NEXT
(
x
Ë((*(c⁄° *)(x)Ë=0x01)

	)

25 
	#SEND
(
x
Ë(((*(c⁄° *)(x))&0xfcË=0x08)

	)

26 
	#OP
(
x
Ë(((*(c⁄° *)(x))&0xe0Ë=0x40)

	)

27 
	#MOVE
(
x
Ë(((*(c⁄° *)(x))&0xf0Ë=0x30)

	)

28 
	#ALLOC
(
x
Ë(((*(c⁄° *)(x))&0xc0Ë=0x80)

	)

29 
	#RETURN
(
x
Ë((*(c⁄° *)(x)Ë=0x00)

	)

30 
	#CALL
(
x
Ë(((*(c⁄° *)(x)Ë& 0xf0Ë=0x20)

	)

32 
	#IF_REG
(
x
Ë((*(c⁄° *)(x))&0x1f)

	)

33 
	#ITER_TYPE
(
x
Ë((*(c⁄° *)(x))&0x3f)

	)

34 
	#ITER_MATCH_END
(
x
Ë(((*(c⁄° *)((x)+1))&0xc0Ë=0x80)

	)

35 
	#ITER_MATCH_NONE
(
x
Ë(((*(c⁄° *)((x)+1))&0xc0Ë=0xc0)

	)

36 
	#ITER_MATCH_OFF
(
x
Ë(((*(c⁄° *)(x))&0xf0Ë>> 4)

	)

37 
	#ITER_MATCH_LEN
(
x
Ë(((*(c⁄° *)(x))&0x0f))

	)

38 
	#ITER_MATCH_VAL
(
x
Ë(((*(c⁄° *)((x)+1))&0x3f))

	)

39 
	#SEND_MSG
(
x
) ((((*(const *)(x))&0x3) << 3) | \

40 (((*(c⁄° *)((
x
)+1))&0xe0Ë>> 5))

	)

41 
	#SEND_DST
(
x
Ë((*(c⁄° *)((x)+1))&0x1f)

	)

42 
	#OP_ARG1
(
x
Ë((((*(c⁄° *)((x)+1))&0xfcË>> 2))

	)

43 
	#OP_ARG2
(
x
Ë(((*(c⁄° *)((x)+2))&0x3f))

	)

44 
	#OP_OP
(
x
) ((((*(const *)((x)+1))&0x3) << 2) | \

45 (((*(c⁄° *)((
x
)+2))&0xc0Ë>> 6))

	)

46 
	#OP_DST
(
x
Ë((*(c⁄° *)(x))&0x1f)

	)

47 
	#MOVE_SRC
(
x
) ((((*(const *)(x))&0xf) << 2) | \

48 (((*(c⁄° *)((
x
)+1))&0xc0Ë>> 6))

	)

49 
	#MOVE_DST
(
x
Ë(((*(c⁄° *)((x)+1))&0x3f))

	)

50 
	#ALLOC_TYPE
(
x
Ë((*(c⁄° *)(x))&0x3f)

	)

51 
	#ALLOC_DST
(
x
Ë((*(c⁄° *)((x)+1))&0x3f)

	)

53 
	#CALL_VAL
(
x
Ë(*(c⁄° *)(x))

	)

54 
	#CALL_DST
(
x
Ë((*(c⁄° *)((x)+1)Ë& 0x1f)

	)

55 
	#CALL_ID
(
x
) ((((*(const *)((x))) & 0x0f) << 3) | \

56 (((*(c⁄° *)((
x
)+1)Ë& 0xe0Ë>> 5))

	)

58 
	#CALL_ARGS
(
x
Ë(
exã∫_fun˘s_¨gs
[
	`CALL_ID
(x)])

	)

59 
	#CALL_FUNC
(
x
Ë(
exã∫_fun˘s
[
	`CALL_ID
(x)])

	)

61 
	#OP_NEQ
 0x0

	)

62 
	#OP_EQ
 0x1

	)

63 
	#OP_LESS
 0x2

	)

64 
	#OP_LESSEQ
 0x3

	)

65 
	#OP_GREATER
 0x4

	)

66 
	#OP_GREATEREQ
 0x5

	)

67 
	#OP_MODF
 0x6

	)

68 
	#OP_MODI
 0x7

	)

69 
	#OP_PLUSF
 0x8

	)

70 
	#OP_PLUSI
 0x9

	)

71 
	#OP_MINUSF
 0xa

	)

72 
	#OP_MINUSI
 0xb

	)

73 
	#OP_TIMESF
 0xc

	)

74 
	#OP_TIMESI
 0xd

	)

75 
	#OP_DIVF
 0xe

	)

76 
	#OP_DIVI
 0xf

	)

78 
	#VAL_IS_REG
(
x
Ë(((c⁄° )(x)Ë& 0x20)

	)

79 
	#VAL_IS_TUPLE
(
x
Ë(((c⁄° )(x)Ë=0x1f)

	)

80 
	#VAL_IS_FLOAT
(
x
Ë(((c⁄° )(x)Ë=0x00)

	)

81 
	#VAL_IS_INT
(
x
Ë(((c⁄° )(x)Ë=0x01)

	)

82 
	#VAL_IS_FIELD
(
x
Ë(((c⁄° )(x)Ë=0x02)

	)

84 
	#VAL_REG
(
x
Ë(((c⁄° )(x)Ë& 0x1f)

	)

85 
	#VAL_FIELD_OFF
(
x
Ë(((*(c⁄° *)(x)Ë& 0xf0Ë>> 4)

	)

86 
	#VAL_FIELD_LEN
(
x
Ë((*(c⁄° *)(x)Ë& 0x0f)

	)

87 
	#VAL_FIELD_REG
(
x
Ë((*(c⁄° *)((x)+1)Ë& 0x1f)

	)

90 
	#TYPE_DESCRIPTOR_SIZE
 4

	)

92 
	#TYPE_SIZE
(
x
Ë(
mñd_¥og
[1+
TYPE_DESCRIPTOR_SIZE
*(x)+2]+1)

	)

93 
	#TYPE_AGGREGATE
(
x
Ë(
mñd_¥og
[1+
TYPE_DESCRIPTOR_SIZE
*(x)+3])

	)

94 
	#TYPE_START
(
x
Ë(&
mñd_¥og
[*(*)&mñd_¥og[1+
TYPE_DESCRIPTOR_SIZE
*(x)]])

	)

97 
	#AGG_AGG
(
x
Ë(((xË& (0xf0)Ë>> 4)

	)

98 
	#AGG_FIELD
(
x
Ë((xË& 0x0f)

	)

100 
	#AGG_NONE
 0

	)

101 
	#AGG_FIRST
 1

	)

102 
	#AGG_MAX
 2

	)

103 
	#AGG_MIN
 3

	)

104 
	#AGG_SUM
 4

	)

106 
	#TYPE_NEIGHBOR
 0

	)

107 
	#TYPE_NEIGHBORCOUNT
 1

	)

108 
	#TYPE_VACANT
 2

	)

109 
	#TYPE_SETCOLOR
 3

	)

110 
	#TYPE_SETCOLOR2
 4

	)

112 
	#TUPLE_TYPE
(
x
Ë(*(*)(x))

	)

113 
	#TUPLE_FIELD
(
x
,
off
Ë((*)(((*)(x)Ë+ 1 + (off)))

	)

116 
	#NUM_TYPES
 (
mñd_¥og
[0])

	)

127 
¥o˚ss_tu∂e
(*
tu∂e
, c⁄° *
pc
, 
isNew
);

128 
h™dÀ_tu∂e
(*
tu∂e
, 
isNew
);

129 
£nd_tu∂e
(*
tu∂e
, 
isNew
);

132 
	$íqueue
(
tu∂e_íåy
 **
queue
, *
tu∂e
, 
ªc‹dTy≥
 
isNew
)

134 
tu∂e_íåy
 *
íåy
 = 
	`mÆloc
((tuple_entry));

136 
íåy
->
tu∂e
 =Åuple;

137 
íåy
->
ªc‹ds
 = 
isNew
;

139 
tu∂e_íåy
 **
•Ÿ
;

140 
•Ÿ
 = 
queue
;

141 *
•Ÿ
 !
NULL
;

142 
•Ÿ
 = &((*•Ÿ)->
√xt
));

143 *
•Ÿ
 = 
íåy
;

144 
íåy
->
√xt
 = 
NULL
;

145 
	}
}

147 *
	$dequeue
(
tu∂e_íåy
 **
queue
, *
isNew
)

149 i‡(*
queue
 =
NULL
)

150  
NULL
;

152 
tu∂e_íåy
 *
íåy
 = *
queue
;

153 *
queue
 = (*queue)->
√xt
;

155 i‡(
isNew
 !
NULL
)

156 *
isNew
 = 
íåy
->
ªc‹ds
.
cou¡
;

157 *
tu∂e
 = 
íåy
->tuple;

158 
	`‰ì
(
íåy
);

160  
tu∂e
;

161 
	}
}

163 
	$gëNeighb‹ID
(
Á˚
)

166 i‡(
Á˚
 =
T›
)

167  
	`ªad_f˙_t›
();

168 i‡(
Á˚
 =
Down
)

169  
	`ªad_f˙_bŸtom
();

170 i‡(
Á˚
 =
We°
)

171  
	`ªad_f˙_À·
();

172 i‡(
Á˚
 =
Ea°
)

173  
	`ªad_f˙_right
();

174 i‡(
Á˚
 =
N‹th
)

175  
	`ªad_f˙_‰⁄t
();

176 i‡(
Á˚
 =
South
)

177  
	`ªad_f˙_back
();

179 
	`as£π
(0);

182 
	}
}

184 
	$íqueueFa˚
(
√ighb‹
, 
Á˚
, 
isNew
)

186 *
tu∂e
 = 
NULL
;

188 i‡(
√ighb‹
 <= 0) {

189 
tu∂e
 = 
	`mÆloc
(
	`TYPE_SIZE
(
TYPE_VACANT
));

190 
	`TUPLE_TYPE
(
tu∂e
Ë
TYPE_VACANT
;

191 *(*)
	`TUPLE_FIELD
(
tu∂e
, 0Ë
BLOCK_ID
;

192 *(*)
	`TUPLE_FIELD
(
tu∂e
, ()Ë
Á˚
;

195 
tu∂e
 = 
	`mÆloc
(
	`TYPE_SIZE
(
TYPE_NEIGHBOR
));

196 
	`TUPLE_TYPE
(
tu∂e
Ë
TYPE_NEIGHBOR
;

197 *(*)
	`TUPLE_FIELD
(
tu∂e
, 0Ë
BLOCK_ID
;

198 *(*)
	`TUPLE_FIELD
(
tu∂e
, ()Ë
√ighb‹
;

199 *(*)
	`TUPLE_FIELD
(
tu∂e
, 2* ()Ë
Á˚
;

202 
	`íqueue
(& (
	`this
()->
√wTu∂es
Ë, 
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

203 
	}
}

205 
	$íqueueCou¡
(
cou¡
, 
isNew
)

207 *
tu∂e
 = 
	`mÆloc
(
	`TYPE_SIZE
(
TYPE_NEIGHBORCOUNT
));

208 
	`TUPLE_TYPE
(
tu∂e
Ë
TYPE_NEIGHBORCOUNT
;

209 *(*)
	`TUPLE_FIELD
(
tu∂e
, 0Ë
BLOCK_ID
;

210 *(*)
	`TUPLE_FIELD
(
tu∂e
, ()Ë
cou¡
;

211 
	`íqueue
(& (
	`this
()->
√wTu∂es
Ë, 
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

212 
	}
}

214 
	$blockProgøm
()

217 (
	`this
()->
tu∂es
Ë
	`ˇŒoc
(
NUM_TYPES
, (
tu∂e_íåy
 *));

218 (
	`this
()->
√wTu∂es
Ë
NULL
;

220 
	`£tLED
(128,0,128,32);

223 
√ighb‹s
[6];

224 
numNeighb‹s
 = 
	`gëNeighb‹Cou¡
();

226 
	`íqueueCou¡
(
numNeighb‹s
, 1);

228 
i
;

229 
i
 = 0; i < 
NumFa˚s
; i++) {

230 
√ighb‹s
[
i
] = 
	`gëNeighb‹ID
(i);

232 
	`íqueueFa˚
(
√ighb‹s
[
i
], i, 1);

239 
isNew
 = 0;

240 *
tu∂e
 = 
	`dequeue
(& (
	`this
()->
√wTu∂es
Ë, &
isNew
);

242 i‡(
tu∂e
 !
NULL
) {

243 
	`h™dÀ_tu∂e
(
tu∂e
, 
isNew
);

247 
	`¶ìp
(1);

249 
	`pﬁlFa˚s
();

254 
√wNumNeighb‹s
 = 
	`gëNeighb‹Cou¡
();

255 i‡(
√wNumNeighb‹s
 !
numNeighb‹s
) {

256 
	`íqueueCou¡
(
numNeighb‹s
, -1);

257 
numNeighb‹s
 = 
√wNumNeighb‹s
;

258 
	`íqueueCou¡
(
numNeighb‹s
, 1);

261 
i
 = 0; i < 
NumFa˚s
; i++) {

262 
√ighb‹
 = 
	`gëNeighb‹ID
(
i
);

264 i‡(
√ighb‹
 =
√ighb‹s
[
i
])

267 
	`íqueueFa˚
(
√ighb‹s
[
i
], i, -1);

268 
√ighb‹s
[
i
] = 
√ighb‹
;

269 
	`íqueueFa˚
(
√ighb‹s
[
i
], i, 1);

272 
	}
}

274 
ª˚ive_tu∂e
(
Fa˚
, 
tu∂e
, 
isNew
);

277 
	$ª˚ive_tu∂e
(
Fa˚
 
Á˚
, 
tu∂e
, 
isNew
)

280 
	`íqueue
(& (
	`this
()->
√wTu∂es
Ë, (*)
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

281 
	}
}

283 
	$£nd_tu∂e
(* 
tu∂e
, 
isNew
)

285 
èrgë
 = *(*)
	`TUPLE_FIELD
(
tu∂e
, 0);

286 i‡(
èrgë
 =
BLOCK_ID
) {

287 
	`íqueue
(& (
	`this
()->
√wTu∂es
Ë, 
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

290 
Á˚
 = -1;

292 i‡(
èrgë
 =
	`ªad_f˙_t›
())

293 
Á˚
 = 
T›
;

294 i‡(
èrgë
 =
	`ªad_f˙_bŸtom
())

295 
Á˚
 = 
Down
;

296 i‡(
èrgë
 =
	`ªad_f˙_À·
())

297 
Á˚
 = 
We°
;

298 i‡(
èrgë
 =
	`ªad_f˙_right
())

299 
Á˚
 = 
Ea°
;

300 i‡(
èrgë
 =
	`ªad_f˙_‰⁄t
())

301 
Á˚
 = 
N‹th
;

302 i‡(
èrgë
 =
	`ªad_f˙_back
())

303 
Á˚
 = 
South
;

305 i‡(
Á˚
 != -1)

306 
	`£nd2
(
Á˚
, 
MSGª˚ive_tu∂e
, ()
tu∂e
, 
isNew
);

309 
	}
}

311 
	$accumuœã
(
aggTy≥
, 
ﬁd
, 
√w
)

313 
aggTy≥
) {

314 
AGG_FIRST
:

317 
AGG_MAX
:

318 i‡(
√w
 > 
ﬁd
)

323 
AGG_MIN
:

324 i‡(
√w
 < 
ﬁd
)

329 
AGG_SUM
:

330  
√w
 + 
ﬁd
;

333 
	`as£π
(0);

335 
	}
}

337 
	$ªˇlcAggªg©e
(
tu∂e_íåy
 *
agg
)

339 
ty≥
 = 
	`TUPLE_TYPE
(
agg
->
tu∂e
);

341 
tu∂e_íåy
 *
cur
;

343 
accumuœt‹
 = *(*)
	`TUPLE_FIELD
(
agg
->
ªc‹ds
.
aggLi°
->
tu∂e
, (Ë* 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
)));

345 
cur
 = 
agg
->
ªc‹ds
.
aggLi°
->
√xt
; cu∏!
NULL
; cur = cur->next) {

346 
accumuœt‹
 = 
	`accumuœã
(
	`AGG_AGG
(
	`TYPE_AGGREGATE
(
ty≥
)),

347 
accumuœt‹
,

348 *(*)
	`TUPLE_FIELD
(
cur
->
tu∂e
, (Ë* 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
))));

351 i‡(*(*)
	`TUPLE_FIELD
(
agg
->
tu∂e
, (Ë* 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
))Ë!
accumuœt‹
) {

352 
	`¥o˚ss_tu∂e
(
agg
->
tu∂e
, 
	`TYPE_START
(
ty≥
), -1);

353 *(*)
	`TUPLE_FIELD
(
agg
->
tu∂e
, (Ë* 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
))Ë
accumuœt‹
;

354 
	`¥o˚ss_tu∂e
(
agg
->
tu∂e
, 
	`TYPE_START
(
ty≥
), 1);

356 
	}
}

359 
	$h™dÀ_tu∂e
(* 
tu∂e
, 
isNew
)

361 
ty≥
 = 
	`TUPLE_TYPE
(
tu∂e
);

363 
ty≥
) {

364 
TYPE_SETCOLOR
:

365 
	`£tLED
(*(
byã
 *)
	`TUPLE_FIELD
(
tu∂e
, 1),

366 *(
byã
 *)
	`TUPLE_FIELD
(
tu∂e
, 2),

367 *(
byã
 *)
	`TUPLE_FIELD
(
tu∂e
, 3),

368 *(
byã
 *)
	`TUPLE_FIELD
(
tu∂e
, 4));

369 
	`‰ì
(
tu∂e
);

373 
TYPE_SETCOLOR2
:

374 
	`£tCﬁ‹
((*(*)
	`TUPLE_FIELD
(
tu∂e
, 4)Ë% 
NUM_COLORS
);

375 
	`‰ì
(
tu∂e
);

379 i‡(
	`AGG_AGG
(
	`TYPE_AGGREGATE
(
ty≥
)Ë=
AGG_NONE
) {

380 
tu∂e_íåy
** 
cuºít
;

381 
cuºít
 = & (
	`this
()->
tu∂es
Ë[
ty≥
];

382 *
cuºít
 !
NULL
;

383 
cuºít
 = &(*cuºít)->
√xt
) {

385 i‡(
	`memcmp
((*
cuºít
)->
tu∂e
,

386 
tu∂e
,

387 
	`TYPE_SIZE
(
ty≥
)) == 0) {

388 (*
cuºít
)->
ªc‹ds
.
cou¡
 +
isNew
;

390 i‡((*
cuºít
)->
ªc‹ds
.
cou¡
 <= 0) {

391 
	`¥o˚ss_tu∂e
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
(tuple)), -1);

394 
tu∂e_íåy
 *
ﬁd
;

396 
ﬁd
 = *
cuºít
;

397 *
cuºít
 = (*cuºít)->
√xt
;

400 
	`‰ì
(
ﬁd
->
tu∂e
);

401 
	`‰ì
(
ﬁd
);

403 
	`‰ì
(
tu∂e
);

409 i‡(
isNew
 <= 0) {

410 
	`‰ì
(
tu∂e
);

414 
	`íqueue
(&–(
	`this
()->
tu∂es
Ë[
ty≥
]), 
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

415 
	`¥o˚ss_tu∂e
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
—u∂e)), 
isNew
);

418 
tu∂e_íåy
 **
cuºít
;

419 
cuºít
 = & (
	`this
()->
tu∂es
Ë[
ty≥
];

420 (*
cuºít
Ë!
NULL
;

421 
cuºít
 = &(*cuºít)->
√xt
) {

422 i‡(
	`memcmp
((*
cuºít
)->
tu∂e
,

423 
tu∂e
,

424 1+(Ë* 
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
))) == 0

426 (
	`memcmp
(((*)(*
cuºít
)->
tu∂e
Ë+ 1 + (Ë* (
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
))+1),

427 ((*)
tu∂e
Ë+ 1 + (Ë* (
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(
ty≥
))+1),

428 
	`TYPE_SIZE
(
ty≥
)-(1+(Ë* (
	`AGG_FIELD
(
	`TYPE_AGGREGATE
(type))+1))) == 0)) {

430 
tu∂e_íåy
** 
cuºít2
;

431 
cuºít2
 = &(*
cuºít
)->
ªc‹ds
.
aggLi°
;

432 *
cuºít2
 !
NULL
;

433 
cuºít2
 = &(*cuºít2)->
√xt
) {

434 i‡(
	`memcmp
((*
cuºít2
)->
tu∂e
,

435 
tu∂e
,

436 
	`TYPE_SIZE
(
ty≥
)) == 0) {

437 (*
cuºít2
)->
ªc‹ds
.
cou¡
 +
isNew
;

439 i‡((*
cuºít2
)->
ªc‹ds
.
cou¡
 <= 0) {

441 
	`‰ì
(
	`dequeue
(
cuºít2
, 
NULL
));

443 i‡((*
cuºít
)->
ªc‹ds
.
aggLi°
 !
NULL
)

444 
	`ªˇlcAggªg©e
(*
cuºít
);

446 
	`‰ì
(
	`dequeue
(
cuºít
, 
NULL
));

449 
	`‰ì
(
tu∂e
);

456 i‡(
isNew
 <= 0) {

457 
	`‰ì
(
tu∂e
);

461 
	`íqueue
(&((*
cuºít
)->
ªc‹ds
.
aggLi°
), 
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

463 
	`ªˇlcAggªg©e
(*
cuºít
);

469 i‡(
isNew
 <= 0) {

470 
	`‰ì
(
tu∂e
);

475 
tu∂e_íåy
 *
aggLi°
 = 
NULL
;

476 *
tu∂eCpy
 = 
	`mÆloc
(
	`TYPE_SIZE
(
ty≥
));

477 
	`mem˝y
(
tu∂eCpy
, 
tu∂e
, 
	`TYPE_SIZE
(
ty≥
));

479 
	`íqueue
(&
aggLi°
, 
tu∂e
, (
ªc‹dTy≥
Ë
isNew
);

480 
	`íqueue
(&–(
	`this
()->
tu∂es
Ë[
ty≥
]), 
tu∂eCpy
, (
ªc‹dTy≥
)
aggLi°
);

482 
	`¥o˚ss_tu∂e
(
tu∂e
, 
	`TYPE_START
(
	`TUPLE_TYPE
—u∂e)), 
isNew
);

487 
ty≥
 = 
tu∂e
[0];

488 
pc
 = *(*)&
mñd_¥og
[1+3*
ty≥
];

490 
	`bzîo
–(
	`this
()->
ªg
) , () * 32);

492 
ö°r
 = &
mñd_¥og
[
pc
];

494 
	}
}

496 c⁄° *
	$adv™˚
(c⁄° *
pc
) {

497 i‡(
	`SEND
(
pc
)) {

498  
pc
+2;

500 if(
	`OP
(
pc
)) {

501 
cou¡
 = 3;

503 i‡(
	`VAL_IS_FLOAT
(
	`OP_ARG1
(
pc
))) {

504 
cou¡
 += ();

506 i‡(
	`VAL_IS_FLOAT
(
	`OP_ARG2
(
pc
))) {

507 
cou¡
 += ();

510 i‡(
	`VAL_IS_INT
(
	`OP_ARG1
(
pc
))) {

511 
cou¡
 += ();

513 i‡(
	`VAL_IS_INT
(
	`OP_ARG2
(
pc
))) {

514 
cou¡
 += ();

517 i‡(
	`VAL_IS_FIELD
(
	`OP_ARG1
(
pc
))) {

518 
cou¡
 += 2;

520 i‡(
	`VAL_IS_FIELD
(
	`OP_ARG2
(
pc
))) {

521 
cou¡
 += 2;

524  
pc
+
cou¡
;

526 if(
	`MOVE
(
pc
)) {

527 
cou¡
 = 2;

529 i‡(
	`VAL_IS_FLOAT
(
	`MOVE_SRC
(
pc
))) {

530 
cou¡
 += ();

532 i‡(
	`VAL_IS_FLOAT
(
	`MOVE_DST
(
pc
))) {

533 
cou¡
 += ();

536 i‡(
	`VAL_IS_INT
(
	`MOVE_SRC
(
pc
))) {

537 
cou¡
 += ();

539 i‡(
	`VAL_IS_INT
(
	`MOVE_DST
(
pc
))) {

540 
cou¡
 += ();

543 i‡(
	`VAL_IS_FIELD
(
	`MOVE_SRC
(
pc
))) {

544 
cou¡
 += 2;

546 i‡(
	`VAL_IS_FIELD
(
	`MOVE_DST
(
pc
))) {

547 
cou¡
 += 2;

550  
pc
+
cou¡
;

552 if(
	`ITER
(
pc
)) {

553 
pc
++; !
	`ITER_MATCH_END
’cË&& !
	`ITER_MATCH_NONE
(pc);Öc+=2) {

554 i‡(
	`VAL_IS_FLOAT
(
	`ITER_MATCH_VAL
(
pc
))) {

555 
pc
 += ();

557 i‡(
	`VAL_IS_INT
(
	`ITER_MATCH_VAL
(
pc
))) {

558 
pc
 += ();

560 i‡(
	`VAL_IS_FIELD
(
	`ITER_MATCH_VAL
(
pc
))) {

561 
pc
 += 2;

565  
pc
;

567 i‡(
	`ALLOC
(
pc
)) {

568 
cou¡
 = 2;

570 i‡(
	`VAL_IS_INT
(
	`ALLOC_DST
(
pc
))) {

571 
cou¡
 += ();

573 i‡(
	`VAL_IS_FLOAT
(
	`ALLOC_DST
(
pc
))) {

574 
cou¡
 += ();

576 i‡(
	`VAL_IS_FIELD
(
	`ALLOC_DST
(
pc
))) {

577 
cou¡
 += 2;

580  
pc
+
cou¡
;

582 i‡(
	`CALL
(
pc
)) {

583 
numArgs
 = 
	`CALL_ARGS
(
pc
);

584 
i
;

585 
i
 = 0, 
pc
+=2; i < 
numArgs
; i++,Öc++) {

586 i‡(
	`VAL_IS_FLOAT
(
	`CALL_VAL
(
pc
))) {

587 
pc
 += ();

589 i‡(
	`VAL_IS_INT
(
	`CALL_VAL
(
pc
))) {

590 
pc
 += ();

592 i‡(
	`VAL_IS_FIELD
(
	`CALL_VAL
(
pc
))) {

593 
pc
 += 2;

596  
pc
;

599  
pc
+1;

601 
	}
}

604 *
	$evÆ
(c⁄° 
vÆue
, *
tu∂e
, c⁄° **
pc
) {

605 *
ªt
 = 
NULL
;

607 i‡(
	`VAL_IS_REG
(
vÆue
)) {

608 
ªt
 = & (
	`this
()->
ªg
Ë[
	`VAL_REG
(
vÆue
)];

609 } i‡(
	`VAL_IS_TUPLE
(
vÆue
)) {

610 
ªt
 = 
tu∂e
;

611 } i‡(
	`VAL_IS_FIELD
(
vÆue
)) {

614 
ªt
 = (*)–(
	`this
()->
ªg
Ë[
	`VAL_FIELD_REG
(*
pc
)] + 1 + 
	`VAL_FIELD_OFF
(*pc));

615 (*
pc
) += 2;

616 } i‡(
	`VAL_IS_INT
(
vÆue
)) {

617 
ªt
 = (*)(*
pc
);

618 (*
pc
) += ();

619 } i‡(
	`VAL_IS_FLOAT
(
vÆue
)) {

620 
ªt
 = (*)(*
pc
);

621 (*
pc
) += ();

623 
	`as£π
(0 );

626  
ªt
;

627 
	}
}

629 
	$¥o˚ss_tu∂e
(*
tu∂e
, c⁄° *
pc
, 
isNew
)

631 
goEl£
 = 0;

632 
goEndif
 = 0;

633 
goNext
 = 0;

635 ; !(
	`RETURN
(
pc
));Ö¯
	`adv™˚
(pc)) {

637 i‡(
goEndif
) {

638 i‡(
	`IF
(
pc
)) {

639 
goEndif
++;

641 i‡(
	`ENDIF
(
pc
)) {

642 
goEndif
--;

646 i‡(
goEl£
) {

647 i‡(
	`IF
(
pc
)) {

648 
goEndif
++;

649 } i‡(
	`ELSE
(
pc
)) {

650 
goEl£
--;

651 } i‡(
	`ENDIF
(
pc
)) {

652 
goEl£
--;

656 i‡(
goNext
) {

657 i‡(
	`IF
(
pc
)) {

658 
goEndif
++;

660 i‡(
	`NEXT
(
pc
)) {

661 
goNext
--;

663 i‡(
	`ITER
(
pc
)) {

664 
goNext
++;

670 i‡(
	`IF
(
pc
)) {

671 i‡(! (
	`this
()->
ªg
Ë[
	`IF_REG
(
pc
)]) {

672 
goEl£
++;

674 } i‡(
	`ELSE
(
pc
)) {

675 
goEndif
++;

676 } i‡(
	`ENDIF
(
pc
)) {

678 } i‡(
	`ITER
(
pc
)) {

680 
tu∂e_íåy
 *
√xt_tu∂e
 = (
	`this
()->
tu∂es
Ë[
	`ITER_TYPE
(
pc
)];

683 
√xt_tu∂e
 = (
	`this
()->
tu∂es
Ë[
	`ITER_TYPE
(
pc
)];

684 
√xt_tu∂e
 !
NULL
;

685 
√xt_tu∂e
 =Çext_tu∂e->
√xt
) {

687 
m©ched
 = 1;

690 c⁄° *
tmµc
;

691 
tmµc
 = 
pc
+1; !
	`ITER_MATCH_NONE
(tmppc);Åmppc+=2) {

693 c⁄° *
ﬁd_pc
 = 
tmµc
 + 2;

695 
m©ched
 = matched &&

696 (
	`memcmp
(
	`TUPLE_FIELD
(
√xt_tu∂e
->
tu∂e
, 
	`ITER_MATCH_OFF
(
tmµc
)),

697 
	`evÆ
(
	`ITER_MATCH_VAL
(
tmµc
), &
tu∂e
, &
ﬁd_pc
),

698 
	`ITER_MATCH_LEN
(
tmµc
)) == 0);

700 i‡(
	`ITER_MATCH_END
(
tmµc
)) ;

701 
tmµc
 = 
ﬁd_pc
 - 2;

704 i‡(
m©ched
)

705 
	`¥o˚ss_tu∂e
(
√xt_tu∂e
->
tu∂e
, 
	`adv™˚
(
pc
), 
isNew
);

710 
goNext
++;

712 } i‡(
	`NEXT
(
pc
)) {

714 } i‡(
	`SEND
(
pc
)) {

715 
	`£nd_tu∂e
((*Ë(
	`this
()->
ªg
Ë[
	`SEND_MSG
(
pc
)], 
isNew
);

716 } i‡(
	`OP
(
pc
)) {

717 c⁄° *
ﬁd_pc
 = 
pc
+3;

719 
¨g1
 = *(*)
	`evÆ
(
	`OP_ARG1
(
pc
), &
tu∂e
, &
ﬁd_pc
);

720 
¨g2
 = *(*)
	`evÆ
(
	`OP_ARG2
(
pc
), &
tu∂e
, &
ﬁd_pc
);

722 
	`OP_OP
(
pc
)) {

723 
OP_NEQ
:

724 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 !
¨g2
);

727 
OP_EQ
:

728 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 =
¨g2
);

731 
OP_LESS
:

732 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 < 
¨g2
);

735 
OP_LESSEQ
:

736 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 <
¨g2
);

739 
OP_GREATER
:

740 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 > 
¨g2
);

743 
OP_GREATEREQ
:

744 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 >
¨g2
);

747 
OP_MODF
:

749 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = ((()
¨g1
Ë% (()
¨g2
));

753 
OP_MODI
:

754 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 % 
¨g2
);

757 
OP_PLUSF
:

758 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = ((()
¨g1
Ë+ (()
¨g2
));

761 
OP_PLUSI
:

762 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 + 
¨g2
);

765 
OP_MINUSF
:

766 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = ((()
¨g1
Ë- (()
¨g2
));

769 
OP_MINUSI
:

770 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 - 
¨g2
);

773 
OP_TIMESF
:

774 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = ((()
¨g1
Ë* (()
¨g2
));

777 
OP_TIMESI
:

778 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 * 
¨g2
);

781 
OP_DIVF
:

782 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = ((()
¨g1
Ë/ (()
¨g2
));

785 
OP_DIVI
:

786 (
	`this
()->
ªg
Ë[
	`OP_DST
(
pc
)] = (
¨g1
 / 
¨g2
);

790 } i‡(
	`MOVE
(
pc
)) {

791 c⁄° *
ﬁd_pc
 = 
pc
+2;

793 *
§c
 = (*)
	`evÆ
(
	`MOVE_SRC
(
pc
), &
tu∂e
, &
ﬁd_pc
);

794 *
d°
 = (*)
	`evÆ
(
	`MOVE_DST
(
pc
), &
tu∂e
, &
ﬁd_pc
);

796 *
d°
 = *
§c
;

797 } i‡(
	`ALLOC
(
pc
)) {

798 c⁄° *
ﬁd_pc
 = 
pc
+2;

800 **
d°
 = (**)
	`evÆ
(
	`ALLOC_DST
(
pc
), &
tu∂e
, &
ﬁd_pc
);

801 *
d°
 = 
	`mÆloc
(
	`TYPE_SIZE
(
	`ALLOC_TYPE
(
pc
)));

802 
	`bzîo
(*
d°
, 
	`TYPE_SIZE
(
	`ALLOC_TYPE
(
pc
)));

803 
	`TUPLE_TYPE
(*
d°
Ë
	`ALLOC_TYPE
(
pc
);

804 } i‡(
	`CALL
(
pc
)) {

805 *
d°
 = & (
	`this
()->
ªg
Ë[
	`CALL_DST
(
pc
)];

806 
¨gs
[
	`CALL_ARGS
(
pc
)];

808 
	`as£π
(
	`CALL_ARGS
(
pc
) <= 5);

810 
i
;

811 c⁄° *
ﬁd_pc
 = 
pc
+2;

812 
i
 = 0; i < 
	`CALL_ARGS
(
pc
); i++) {

813 
vÆue
 = 
	`CALL_VAL
(
ﬁd_pc
);

814 
ﬁd_pc
++;

815 
¨gs
[
i
] = *(*)
	`evÆ
(
vÆue
, &
tu∂e
, &
ﬁd_pc
);

819 
	`CALL_ARGS
(
pc
)) {

824 *
d°
 = ()
	`CALL_FUNC
(
pc
)();

828 *
d°
 = ()
	`CALL_FUNC
(
pc
)(
¨gs
[0]);

832 *
d°
 = ()
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1]);

836 *
d°
 = ()
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2]);

840 *
d°
 = ()
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2],árgs[3]);

844 *
d°
 = ()
	`CALL_FUNC
(
pc
)(
¨gs
[0],árgs[1],árgs[2],árgs[3],árgs[4]);

851 
	}
}

	@runtime/accelerometer.c

2 
	~"ac˚Àromëî.h
"

4 
	$upd©eAc˚l
()

6 
	`±hªad_muãx_lock
(&
èpMuãx
);

7 i‡(
èpBuf„r
 > 0)

9 
èpSètus
 = 
åue
;

10 
èpBuf„r
--;

14 
èpSètus
 = 
Ál£
;

16 
	`±hªad_muãx_u∆ock
(&
èpMuãx
);

17 
	}
}

19 
boﬁ
 
	$gëT≠
()

21  
èpSètus
;

22 
	}
}

24 
	$öôAc˚l
()

26 
èpBuf„r
 = 0;

27 
èpSètus
 = 
Ál£
;

28 
	`±hªad_muãx_öô
(&
èpMuãx
, 
NULL
);

29 
	}
}

	@runtime/accelerometer.h

2 #i‚de‡
__ACCELEROMETER_H__


3 
	#__ACCELEROMETER_H__


	)

5 
	~"bb.h
"

6 
	~<°döt.h
>

7 
	~<±hªad.h
>

13 
upd©eAc˚l
();

14 
boﬁ
 
gëT≠
();

15 
öôAc˚l
();

	@runtime/block.h

2 #i‚de‡
_BLOCK_H_


3 
	#_BLOCK_H_


	)

5 
	~"ac˚Àromëî.h
"

6 
	~"í£mbÀ.h
"

7 
	~"Àd.h
"

8 
	~"utû.h
"

	@runtime/ensemble.c

2 
	~"bb.h
"

3 
	~"í£mbÀ.h
"

4 
	~<°döt.h
>

6 
öt16_t
 
	$ªad_f˙_t›
 (Ë{  
	`blockIdAtFa˚
(
	`this
(), 
T›
); 
	}
}

7 
	$wrôe_f˙_t›
 (
öt16_t
 
junk
Ë{ ; 
	}
}

9 
öt16_t
 
	$ªad_f˙_bŸtom
(Ë{  
	`blockIdAtFa˚
(
	`this
(), 
Down
); 
	}
}

10 
	$wrôe_f˙_bŸtom
 (
öt16_t
 
junk
Ë{ ; 
	}
}

12 
öt16_t
 
	$ªad_f˙_‰⁄t
 (Ë{  
	`blockIdAtFa˚
(
	`this
(), 
N‹th
); 
	}
}

13 
	$wrôe_f˙_‰⁄t
 (
öt16_t
 
junk
Ë{ ; 
	}
}

15 
öt16_t
 
	$ªad_f˙_back
 (Ë{  
	`blockIdAtFa˚
(
	`this
(), 
South
); 
	}
}

16 
	$wrôe_f˙_back
 (
öt16_t
 
junk
Ë{ ; 
	}
}

18 
öt16_t
 
	$ªad_f˙_À·
 (Ë{  
	`blockIdAtFa˚
(
	`this
(), 
We°
); 
	}
}

19 
	$wrôe_f˙_À·
 (
öt16_t
 
junk
Ë{ ; 
	}
}

21 
öt16_t
 
	$ªad_f˙_right
 (Ë{  
	`blockIdAtFa˚
(
	`this
(), 
Ea°
); 
	}
}

22 
	$wrôe_f˙_right
 (
öt16_t
 
junk
Ë{ ; 
	}
}

24 
öt16_t
 
	$ªad_f˙_√ighb‹s
 (Ë{  
	`gëNeighb‹Cou¡
(); 
	}
}

25 
	$wrôe_f˙_√ighb‹s
 (
öt16_t
 
junk
Ë{ ; 
	}
}

27 
öt16_t
 
	$ªad_f˙_id
(Ë{  
	`this
()->
id
; 
	}
}

28 
	$wrôe_f˙_id
(
öt16_t
 
junk
Ë{ ; 
	}
}

	@runtime/ensemble.h

2 #i‚de‡
_ENSEMBLE_H_


3 
	#_ENSEMBLE_H_


	)

5 
	~"bb.h
"

6 
	~<°döt.h
>

8 
öt16_t
 
ªad_f˙_t›
 ();

9 
wrôe_f˙_t›
 (
öt16_t
 
junk
);

11 
öt16_t
 
ªad_f˙_bŸtom
 ();

12 
wrôe_f˙_bŸtom
 (
öt16_t
 
junk
);

14 
öt16_t
 
ªad_f˙_‰⁄t
 ();

15 
wrôe_f˙_‰⁄t
 (
öt16_t
 
junk
);

17 
öt16_t
 
ªad_f˙_back
 ();

18 
wrôe_f˙_back
 (
öt16_t
 
junk
);

20 
öt16_t
 
ªad_f˙_À·
 ();

21 
wrôe_f˙_À·
 (
öt16_t
 
junk
);

23 
öt16_t
 
ªad_f˙_right
 ();

24 
wrôe_f˙_right
 (
öt16_t
 
junk
);

26 
öt16_t
 
ªad_f˙_√ighb‹s
 ();

27 
wrôe_f˙_√ighb‹s
 (
öt16_t
 
junk
);

29 
öt16_t
 
ªad_f˙_id
 ();

30 
wrôe_f˙_id
 (
öt16_t
 
junk
);

	@runtime/led.c

2 
	~"Àd.h
"

16 c⁄° 
uöt8_t
 
	gCﬁ‹s
[
NUM_COLORS
][3] = {

35 
Cﬁ‹
 
	$gëCﬁ‹
()

37  (
	`this
()->
cuºítCﬁ‹
) ;

38 
	}
}

40 
	$£tCﬁ‹
(
Cﬁ‹
 
c
)

42 if(
c
 < 
NUM_COLORS
)

44 (
	`this
()->
cuºítCﬁ‹
Ë
c
;

46 
	`£tLED
(
Cﬁ‹s
[
c
][0], Cﬁ‹s[c][1], Cﬁ‹s[c][2], (
	`this
()->
cuºítI¡ísôy
) );

48 
	}
}

50 
Cﬁ‹
 
	$£tNextCﬁ‹
()

52 (
	`this
()->
cuºítCﬁ‹
) ++;

54 if–(
	`this
()->
cuºítCﬁ‹
Ë>
NUM_COLORS
)

55 (
	`this
()->
cuºítCﬁ‹
) = 0;

57 
	`£tLED
(
Cﬁ‹s
[ (
	`this
()->
cuºítCﬁ‹
Ë][0], Cﬁ‹s[ (this()->cuºítCﬁ‹Ë][1], Cﬁ‹s[ (this()->cuºítCﬁ‹Ë][2], (this()->
cuºítI¡ísôy
) );

59  (
	`this
()->
cuºítCﬁ‹
) ;

60 
	}
}

62 
	$£tLED
(
uöt8_t
 
r
, uöt8_à
g
, uöt8_à
b
, 
I¡ísôy
 
i
)

64 
	`±hªad_muãx_lock
(& (
	`this
()->
LEDmuãx
) );

66 (
	`this
()->
cuºítLED
Ë.
r
 =Ñ;

67 (
	`this
()->
cuºítLED
Ë.
g
 = g;

68 (
	`this
()->
cuºítLED
Ë.
b
 = b;

69 (
	`this
()->
cuºítLED
Ë.
i
 = i;

71 
	`±hªad_muãx_u∆ock
(& (
	`this
()->
LEDmuãx
) );

72 
	}
}

74 
	$£tI¡ísôy
(
I¡ísôy
 
i
)

76 (
	`this
()->
cuºítI¡ísôy
Ë
i
;

78 
	`£tLED
–(
	`this
()->
cuºítLED
Ë.
r
, (this()->cuºítLEDË.
g
, (this()->cuºítLEDË.
b
, 
i
);

79 
	}
}

81 
I¡ísôy
 
	$gëI¡ísôy
()

83  (
	`this
()->
cuºítI¡ísôy
) ;

84 
	}
}

86 
	$öôLED
()

88 (
	`this
()->
cuºítLED
Ë.
r
 = 0;

89 (
	`this
()->
cuºítLED
Ë.
g
 = 0;

90 (
	`this
()->
cuºítLED
Ë.
b
 = 0;

91 (
	`this
()->
cuºítLED
Ë.
i
 = 0;

93 
	`±hªad_muãx_öô
(& (
	`this
()->
LEDmuãx
Ë, 
NULL
);

94 
	}
}

	@runtime/led.h

2 #i‚de‡
__LED_H__


3 
	#__LED_H__


	)

5 
	~"bb.h
"

6 
	~<°döt.h
>

7 
	~<±hªad.h
>

13 íum{
	mRED
, 
	mORANGE
, 
	mYELLOW
, 
	mGREEN
, 
	mAQUA
, 
	mBLUE
, 
	mWHITE
, 
	mPURPLE
, 
	mPINK
, 
	mNUM_COLORS
};

15 
Cﬁ‹
 
gëCﬁ‹
();

19 
£tCﬁ‹
(
Cﬁ‹
);

20 
Cﬁ‹
 
£tNextCﬁ‹
();

22 
£tI¡ísôy
(
I¡ísôy
);

23 
I¡ísôy
 
gëI¡ísôy
();

25 
£tLED
(
uöt8_t
, uöt8_t, uöt8_t, 
I¡ísôy
);

26 
öôLED
();

	@runtime/util.c

2 
	~"utû.h
"

4 
öt16_t
 
	$max
 (
öt16_t
 
a
, i¡16_à
b
)

6  (
a
 > 
b
)?a:b;

7 
	}
}

	@runtime/util.h

2 #i‚de‡
_UTIL_H_


3 
	#_UTIL_H_


	)

5 
	~<°döt.h
>

7 
öt16_t
 
max
 (öt16_à
a
, i¡16_à
b
);

	@sim/block.c

1 
	~<°dlib.h
>

3 
	~"block.h
"

5 
	g√xtBlockId
 = 1;

6 
BlockLi°
 
	gblockLi°
 = 
Q_STATIC_INIT
;

8 
Block
 *
	$¸óãBlock
(
x
, 
y
, 
z
)

10 
Block
* 
√wBlock
;

12 
√wBlock
 = 
	`ˇŒoc
((
Block
), 1);

13 i‡(
√wBlock
 =
NULL
)

14  
√wBlock
;

16 
√wBlock
->
id
 = 
√xtBlockId
++;

17 
√wBlock
->
x
 = x;

18 
√wBlock
->
y
 = y;

19 
√wBlock
->
z
 = z;

20 
√wBlock
->
de°royed
 = 0;

23 
	`±hªad_muãx_öô
–&(
√wBlock
->
èpMuãx
), 
NULL
);

27 
√wBlock
->
blockLök
.
¥ev
 = (&
blockLi°
)->
èû
;

28 
	`Q_INSERT_TAIL
(&
blockLi°
, 
√wBlock
, 
blockLök
);

30  
√wBlock
;

31 
	}
}

33 
	$de°royBlock
(
Block
 *
block
)

35 
	`Q_REMOVE
(&
blockLi°
, 
block
, 
blockLök
);

36 
block
->
de°royed
 = 1;

39 
	}
}

41 
BlockLi°
 *
	$gëBlockLi°
()

43  &
blockLi°
;

44 
	}
}

49 
	$nodeIDasSåög
(
NodeID
 
x
, * 
sid
)

51 
ssid
[10];

52 i‡(
sid
 =0Ësid = 
ssid
;

53 #ifde‡
BBSIM


54 
	`•rötf
(
sid
, "%ld", 
x
);

56 
	`•rötf
(
sid
, "%d", 
x
);

58  
sid
;

59 
	}
}

	@sim/block.h

1 #i‚de‡
_BLOCK_H_


2 
	#_BLOCK_H_


	)

4 
	~"v¨übÀ_queue.h
"

6 
	tboﬁ
;

7 
	#Ál£
 0

	)

8 
	#åue
 1

	)

10 * (*
	tBlockProgøm
)(*);

12 
_Block
 
	tBlock
;

14 
	~"w‹ld.h
"

17 
Q_NEW_HEAD
(
BlockLi°
, 
Block
);

19 
	~<±hªad.h
>

20 
	~<°döt.h
>

24 
	~"../sy°em/loˇldefs.h
"

26 
	~"../sy°em/loˇ…y≥s.h
"

28 
	s_Block


31 
NodeID
 
	mid
;

34 
	mx
;

35 
	my
;

36 
	mz
;

38 
	msimLEDr
, 
	msimLEDg
, 
	msimLEDb
, 
	msimLEDi
;

41 
±hªad_muãx_t
 
	m√ighb‹Muãx
;

42 
±hªad_muãx_t
 
	m£ndQueueMuãx
;

45 
	mblockRódy
;

47 
±hªad_muãx_t
 
	mèpMuãx
;

48 
	mèpBuf„r
;

51 
	mde°royed
;

54 
Q_NEW_LINK
(
Block
Ë
	mblockLök
;

57 
±hªad_t
 
	mthªadID
;

58 
±hªad_t
 
	mblockTickID
;

61 
	~"../sy°em/loˇlv¨s.h
"

64 
	~"block_di•©ch.h
"

66 
Block
 *
¸óãBlock
(
x
, 
y
, 
z
);

67 
de°royBlock
(
Block
 *
block
);

68 
°¨tBlock
(
Block
 *
block
);

69 
BlockLi°
 *
gëBlockLi°
();

71 * 
nodeIDasSåög
(
NodeID
 
x
, * 
sid
);

	@sim/block_dispatch.c

1 
	~<±hªad.h
>

3 
	~"../sy°em/myas£π.h
"

4 
	~"block.h
"

5 
	~"block_di•©ch.h
"

6 
	~"uni°d.h
"

8 
blockProgøm
();

9 
blockTick
();

10 
±hªad_muãx_t
 
¥ötmuãx
;

12 
±hªad_key_t
 
	gkey
;

13 
±hªad_⁄˚_t
 
	gkey_⁄˚
 = 
PTHREAD_ONCE_INIT
;

16 
makeKey
();

17 *
œunchBlockProgøm
(
Block
 *
b
);

20 
ö°ÆlThªad
(
Block
 *
b
);

22 
Block
 *
	$this
()

24 
Block
* 
±r
 = (Block *Ë
	`±hªad_gë•ecific
(
key
);

25 
	`as£π
(
±r
 !
NULL
);

27  
±r
;

28 
	}
}

30 
	$°¨tBlock
(
Block
 *
block
)

32 
±hªad_©å_t
 
©å
;

33 
	`±hªad_©å_öô
(&
©å
);

34 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_JOINABLE
);

36 
°©us
 = 
	`±hªad_¸óã
(&(
block
->
thªadID
), &
©å
,

37 (
BlockProgøm
Ë
œunchBlockProgøm
, 
block
);

38 
	`as£π
(
°©us
 == 0);

45 
	}
}

47 
	$makeKey
()

49 
	`as£π
(
	`±hªad_key_¸óã
(&
key
, 
NULL
)==0);

50 
	}
}

52 
	$ö°ÆlThªad
(
Block
 *
b
)

54 
Block
** 
±r
;

55 
	`±hªad_⁄˚
(&
key_⁄˚
, 
makeKey
);

56 
±r
 = 
	`±hªad_gë•ecific
(
key
);

58 
	`as£π
(
±r
 =
NULL
 && 
	`±hªad_£t•ecific
(
key
, 
b
) == 0);

59 
	}
}

61 * 
	$œunchBlockProgøm
(
Block
 *
b
)

63 
	`ö°ÆlThªad
(
b
);

65 
	`±hªad_muãx_lock
(&
¥ötmuãx
);

66 
	`Ârötf
(
°dîr
, "Block id: %s\n", 
	`nodeIDasSåög
(
b
->
id
, 0));

67 
	`±hªad_muãx_u∆ock
(&
¥ötmuãx
);

70 
x
 = 
	`blockProgøm
();

72 
	`±hªad_exô
((*Ë
x
);

74 
	}
}

	@sim/block_dispatch.h

1 #i‚de‡
_BLOCK_DISPATCH_H_


2 
	#_BLOCK_DISPATCH_H_


	)

4 
	~"block.h
"

6 
Block
 *
this
();

7 
°¨tBlock
(
Block
 *
block
);

	@sim/click.c

2 
	~<GL/gl.h
>

3 
	~<GL/glu.h
>

4 
	~<GL/glut.h
>

6 
	~"˛ick.h
"

7 
	~"ªndî.h
"

9 
	#BUFFER_SIZE
 512

	)

11 
Block
* 
	$¥o˚ssHôs
 (
GLöt
 
hôs
, 
GLuöt
 
buf„r
[], *
Á˚
)

13 
GLuöt
 
dïth
;

14 
GLöt
 
choo£
, 
bIndex
;

15 
ödex
;

16 
Block
 *
block
;

18 i‡(
hôs
 == 0)

19  
NULL
;

21 
dïth
 = (
GLuöt
)
buf„r
[1];

22 
choo£
 = (
GLöt
)
buf„r
[3];

24 
ödex
 = 1; index < 
hôs
; index++)

26 i‡(
buf„r
[
ödex
*4+1] < 
dïth
)

28 
choo£
 = (
GLöt
)
buf„r
[
ödex
*4+3];

29 
dïth
 = (
GLuöt
)
buf„r
[
ödex
*4+1];

33 
bIndex
 = 
	`DECODE_INDEX
(
choo£
);

34 i‡(
Á˚
 !
NULL
)

35 *
Á˚
 = 
	`DECODE_FACE
(
choo£
);

39 
	`Q_FOREACH
(
block
, 
	`gëBlockLi°
(), 
blockLök
)

41 i‡(
block
->
id
 =
bIndex
)

42  
block
;

45  
NULL
;

46 
	}
}

48 
Block
 *
	$˛ick
(
x
, 
y
, *
Á˚
)

50 
GLuöt
 
buf„r
[
BUFFER_SIZE
];

51 
GLöt
 
võwp‹t
[4];

52 
GLöt
 
hôs
;

54 
	`glGëI¡egîv
(
GL_VIEWPORT
, 
võwp‹t
);

55 
	`glSñe˘Buf„r
(
BUFFER_SIZE
, 
buf„r
);

57 
	`glRídîMode
(
GL_SELECT
);

59 
	`glM©rixMode
(
GL_PROJECTION
);

60 
	`glPushM©rix
();

61 
	`glLﬂdIdítôy
();

63 
	`gluPickM©rix
((
GLdoubÀ
Ë
x
, (GLdoubÀË(
võwp‹t
[3]-
y
), 1.0f, 1.0f, viewport);

65 
	`gluPî•e˘ive
(
FOV
, (
GLÊﬂt
Ë(
WINDOW_WIDTH
/
WINDOW_HEIGHT
), 
Z_NEAR
, 
Z_FAR
);

66 
	`glM©rixMode
(
GL_MODELVIEW
);

67 
	`ªdøw_w‹ld
();

68 
	`glM©rixMode
(
GL_PROJECTION
);

69 
	`glP›M©rix
();

71 
	`glM©rixMode
(
GL_MODELVIEW
);

72 
hôs
=
	`glRídîMode
(
GL_RENDER
);

74  
	`¥o˚ssHôs
(
hôs
, 
buf„r
, 
Á˚
);

75 
	}
}

	@sim/click.h

1 #i‚de‡
_CLICK_H_


2 
	#_CLICK_H_


	)

4 
	~"block.h
"

5 
	~"ªndî.h
"

7 
Block
 *
˛ick
(
x
, 
y
, *
Á˚
);

	@sim/config.c

1 
	~"../sy°em/myas£π.h
"

2 
	~"block.h
"

3 
	~"c⁄fig.h
"

4 
	~"sim.h
"

5 
	~<time.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	$øndomC⁄fig
(
maxcou¡
)

11 
boﬁ
 
grid
[11][11][11];

12 
Block
* 
°ack
[11*11*11];

13 
°ack_idx
 = 0;

14 
Block
 *
b
, *
cuº
;

15 
x
, 
y
, 
z
, 
i
;

16 
cou¡
 = 1;

17 
¥ob
 = 30;

19 
	`mem£t
(
grid
, 0, (grid));

21 i‡(
maxcou¡
 == 0) maxcount = 25;

22 
b
 = 
	`¸óãBlock
(0, 0, 0);

23 
grid
[5][5][5] = 
åue
;

25 
	`§™d
–
	`time
(
NULL
) );

27 
°ack
[
°ack_idx
++] = 
b
;

29 
°ack_idx
 > 0 && 
cou¡
 < 
maxcou¡
)

31 
°ack_idx
--;

32 
cuº
 = 
°ack
[
°ack_idx
];

33 
i
 = 0; i < 6; i++)

35 
x
 = 
cuº
->x;

36 
y
 = 
cuº
->y;

37 
z
 = 
cuº
->z;

38 i‡(
	`ønd
(Ë% 100 > 
¥ob
)

40 
i
)

42 
N‹th
:

43 
z
--;

45 
Ea°
:

46 
x
++;

48 
South
:

49 
z
++;

51 
We°
:

52 
x
--;

54 
T›
:

55 
y
++;

57 
Down
:

58 
y
--;

63 i‡(
x
 < -5 || 
y
 < -5 || 
z
 < -5 ||

64 
x
 > 5 || 
y
 > 5 || 
z
 > 5)

66 i‡(
grid
[5+
x
][5+
y
][5+
z
])

69 
grid
[5+
x
][5+
y
][5+
z
] = 
åue
;

70 
b
 = 
	`¸óãBlock
(
x
, 
y
, 
z
);

72 
cou¡
++;

73 
°ack
[
°ack_idx
] = 
b
;

74 
°ack_idx
++;

75 i‡(
¥ob
 > 16)Örob--;

79 
	}
}

81 
	$ªadC⁄fig
(* 
«me
)

83 
FILE
* 
f
 = 
	`f›í
(
«me
, "r");

84 i‡(
f
 =
NULL
)

85 
	`îr
("C™'à›í %†f‹Ñódög", 
«me
, 0, 0);

87 
löe
 = 1;

88 !
	`„of
(
f
))

90 
buf„r
[256];

91 * 
p
 = 
	`fgës
(
buf„r
, 256, 
f
);

92 i‡(
p
 =
NULL
)

95 
x
, 
y
, 
z
, 
dú
;

96 
num
 = 
	`ssˇnf
(
buf„r
, "%d, %d, %d, %d", &
x
, &
y
, &
z
, &
dú
);

97 
	`as£π
(
num
 == 4);

99 
	`¸óãBlock
(
x
, 
y
, 
z
);

101 
löe
++;

103 
	`f˛o£
(
f
);

104 
	}
}

	@sim/config.h

1 #i‚de‡
_CONFIG_H_


2 
	#_CONFIG_H_


	)

4 
øndomC⁄fig
();

5 
ªadC⁄fig
(*
«me
);

	@sim/menu.c

10 
	~<GL/gl.h
>

11 
	~<GL/glu.h
>

12 
	~<GL/glut.h
>

14 
	~<°dlib.h
>

17 
	~"míu.h
"

20 
	~"ªndî.h
"

23 íum {
	mM_EXIT
, 
	mM_SIZE
} 
	tmíu_íåy
;

24 *
	gmíu
[] = {"Exit"};

27 íum {
	mD_VERTEX
=0, 
	mD_WIREFRAME
, 
	mD_SOLID
, 
	mD_SIZE
} 
	tdi•œy_íåy
;

28 *
	gdi•œy_míu
[] = {"Vertices", "Wireframe", "Solid"};

35 
	$di•œy_míu_func
(
vÆue
)

37 
vÆue
)

39 
D_VERTEX
:

40 
	`£t_di•œy_mode
(
GL_POINT
);

42 
D_WIREFRAME
:

43 
	`£t_di•œy_mode
(
GL_LINE
);

45 
D_SOLID
:

46 
	`£t_di•œy_mode
(
GL_FILL
);

51 
	}
}

58 
	$míu_func
(
vÆue
)

60 
vÆue
)

62 
M_EXIT
:

63 
	`exô
(0);

68 
	}
}

74 
	$míu_öô
 ()

77 
g_di•œyMíuID
 = 
	`glutCª©eMíu
(
di•œy_míu_func
);

79 
di•œy_íåy
 
d
;

80 
d
 = 0; d < 
D_SIZE
; d++)

81 
	`glutAddMíuE¡ry
(
di•œy_míu
[
d
], d);

86 
g_iMíuId
 = 
	`glutCª©eMíu
(
míu_func
);

87 
	`glutSëMíu
(
g_iMíuId
);

89 
	`glutAddSubMíu
("Di•œy", 
g_di•œyMíuID
);

91 
míu_íåy
 
m
;

92 
m
 = 0; m < 
M_SIZE
; m++)

93 
	`glutAddMíuE¡ry
(
míu
[
m
], m);

96 
	}
}

	@sim/menu.h

10 #i‚de‡
__MENU_H_


11 
	#__MENU_H_


	)

13 
di•œy_míu_func
(
vÆue
);

14 
míu_func
(
vÆue
);

15 
míu_öô
();

	@sim/render.c

10 
	~<GL/gl.h
>

11 
	~<GL/glu.h
>

12 
	~<GL/glut.h
>

15 
	~<m©h.h
>

16 
	~<°dlib.h
>

19 
	~"ªndî.h
"

22 
	~<±hªad.h
>

23 
	~<î∫o.h
>

25 
	~"block.h
"

26 
	~"v¨übÀ_queue.h
"

29 
GLÊﬂt
 
	glight_ambõ¡
[] = {0.2f, 0.2f, 0.2f, 1.0f};

30 
GLÊﬂt
 
	glight_diffu£
[] = {0.5f, 0.5f, 0.5f, 0.5f};

31 
GLÊﬂt
 
	glight_pos
[] = {2.0f, 2.0f, 0.0f, 0.0f};

32 
GLÊﬂt
 
	glight_•ecuœr
[] = {0.5f, 0.5f, 0.5f, 0.5f};

35 
GLÊﬂt
 
	gm©_shööess
[1] = {0.0f};

36 
GLÊﬂt
 
	gm©_•ecuœr
[4] = {0.0f, 0.0f, 0.0f, 0.0f};

38 
GLUquadricObj
 *
	gquad
;

40 
	#BLOCK_SIZE
 1.0f

	)

42 
	#PRONG_WIDTH
 .2f

	)

43 
	#PRONG_SLICES
 4

	)

44 
	#PRONG_STACKS
 4

	)

45 
	#PRONG_LOOPS
 4

	)

46 
	#PRONG_HEIGHT
 .15f

	)

47 
	#PRONG_OFFSET
 .25f

	)

55 
	$light_öô
 ()

58 
	`glLightfv
(
GL_LIGHT0
, 
GL_AMBIENT
, 
light_ambõ¡
);

59 
	`glLightfv
(
GL_LIGHT0
, 
GL_DIFFUSE
, 
light_diffu£
);

60 
	`glLightfv
(
GL_LIGHT0
, 
GL_POSITION
, 
light_pos
);

61 
	`glLightfv
(
GL_LIGHT0
, 
GL_SPECULAR
, 
light_•ecuœr
);

63 
	`glE«bÀ
(
GL_LIGHTING
);

64 
	`glE«bÀ
(
GL_LIGHT0
);

65 
	}
}

74 
	$m©îül_öô
 ()

76 
	`glM©îülfv
(
GL_FRONT
, 
GL_SPECULAR
, 
m©_•ecuœr
);

77 
	`glM©îülfv
(
GL_FRONT
, 
GL_SHININESS
, 
m©_shööess
);

79 
	`glCﬁ‹M©îül
(
GL_FRONT
, 
GL_AMBIENT_AND_DIFFUSE
);

80 
	`glE«bÀ
(
GL_COLOR_MATERIAL
);

82 
	`glShadeModñ
(
GL_SMOOTH
);

84 
quad
 = 
	`gluNewQuadric
();

85 
	`gluQuadricN‹mÆs
(
quad
, 
GLU_SMOOTH
);

86 
	}
}

95 
	$≥r•e˘ive_öô
 (
wödow_width
, 
wödow_height
)

97 
	`glM©rixMode
(
GL_PROJECTION
);

99 
	`glLﬂdIdítôy
();

100 
	`glVõwp‹t
(0, 0, 
wödow_width
, 
wödow_height
);

101 
	`gluPî•e˘ive
(
FOV
, (()
wödow_width
 / ()
wödow_height
),

102 
Z_NEAR
, 
Z_FAR
);

105 
	`glM©rixMode
(
GL_MODELVIEW
);

108 
	`glE«bÀ
(
GL_CULL_FACE
);

109 
	`glCuŒFa˚
(
GL_BACK
);

112 
	`glDïthFunc
(
GL_LEQUAL
);

113 
	`glE«bÀ
(
GL_DEPTH_TEST
);

114 
	}
}

124 
	$w‹ld_öô
 ()

127 
	`glE«bÀ
(
GL_NORMALIZE
);

128 
	`glE«bÀ
(
GL_RESCALE_NORMAL
);

129 
	}
}

136 
	$£t_di•œy_mode
 (
GLíum
 
di•_mode
)

138 
	`glPﬁyg⁄Mode
(
GL_FRONT_AND_BACK
, 
di•_mode
);

139 
	}
}

145 
	$ªdøw_w‹ld
 ()

147 
Block
 *
block
;

149 
	`glInôNames
();

150 
	`glPushName
(-1);

151 
	`Q_FOREACH
(
block
, 
	`gëBlockLi°
(), 
blockLök
)

153 
	`døw_block
(
block
);

155 
	}
}

163 
	$døw_block_t›
(
GLÊﬂt
 
x_off
, GLÊﬂà
z_off
)

165 
	`glPushM©rix
();

166 
	`glTøn¶©ef
(
x_off
, (
BLOCK_SIZE
/2Ë+ 
PRONG_HEIGHT
, 
z_off
);

168 
	`glRŸ©ef
(90.0f, 1.0f, 0.0f, 0.0f);

169 
	`glRŸ©ef
(45.0f, 0.0f, 0.0f, 1.0f);

170 
	`gluQuadricOrõ¡©i⁄
(
quad
, 
GLU_OUTSIDE
);

171 
	`gluCylödî
(
quad
, 
PRONG_WIDTH
, PRONG_WIDTH, 0.15f, 
PRONG_SLICES
, 
PRONG_STACKS
);

172 
	`gluQuadricOrõ¡©i⁄
(
quad
, 
GLU_INSIDE
);

173 
	`gluDisk
(
quad
, 0, 
PRONG_WIDTH
, 
PRONG_SLICES
, 
PRONG_LOOPS
);

174 
	`glP›M©rix
();

175 
	}
}

182 
	$døw_block_body
(
GLuöt
 
«me
)

185 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
T›
));

186 
	`glBegö
(
GL_QUADS
);

187 
	`glN‹mÆ3f
( 0.0, 1.0, 0.0 );

188 
	`glVîãx3f
–
BLOCK_SIZE
/2, BLOCK_SIZE/2,-BLOCK_SIZE/2);

189 
	`glVîãx3f
(-
BLOCK_SIZE
/2, BLOCK_SIZE/2,-BLOCK_SIZE/2);

190 
	`glVîãx3f
(-
BLOCK_SIZE
/2, BLOCK_SIZE/2, BLOCK_SIZE/2);

191 
	`glVîãx3f
–
BLOCK_SIZE
/2, BLOCK_SIZE/2, BLOCK_SIZE/2);

192 
	`glEnd
();

195 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
Down
));

196 
	`glBegö
(
GL_QUADS
);

197 
	`glN‹mÆ3f
( 0.0,-1.0, 0.0 );

198 
	`glVîãx3f
–
BLOCK_SIZE
/2,-BLOCK_SIZE/2, BLOCK_SIZE/2);

199 
	`glVîãx3f
(-
BLOCK_SIZE
/2,-BLOCK_SIZE/2, BLOCK_SIZE/2);

200 
	`glVîãx3f
(-
BLOCK_SIZE
/2,-BLOCK_SIZE/2,-BLOCK_SIZE/2);

201 
	`glVîãx3f
–
BLOCK_SIZE
/2,-BLOCK_SIZE/2,-BLOCK_SIZE/2);

202 
	`glEnd
();

205 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
N‹th
));

206 
	`glBegö
(
GL_QUADS
);

207 
	`glN‹mÆ3f
( 0.0, 0.0, 1.0 );

208 
	`glVîãx3f
–
BLOCK_SIZE
/2, BLOCK_SIZE/2, BLOCK_SIZE/2);

209 
	`glVîãx3f
(-
BLOCK_SIZE
/2, BLOCK_SIZE/2, BLOCK_SIZE/2);

210 
	`glVîãx3f
(-
BLOCK_SIZE
/2,-BLOCK_SIZE/2, BLOCK_SIZE/2);

211 
	`glVîãx3f
–
BLOCK_SIZE
/2,-BLOCK_SIZE/2, BLOCK_SIZE/2);

212 
	`glEnd
();

215 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
South
));

216 
	`glBegö
(
GL_QUADS
);

217 
	`glN‹mÆ3f
( 0.0, 0.0,-1.0 );

218 
	`glVîãx3f
–
BLOCK_SIZE
/2,-BLOCK_SIZE/2,-BLOCK_SIZE/2);

219 
	`glVîãx3f
(-
BLOCK_SIZE
/2,-BLOCK_SIZE/2,-BLOCK_SIZE/2);

220 
	`glVîãx3f
(-
BLOCK_SIZE
/2, BLOCK_SIZE/2,-BLOCK_SIZE/2);

221 
	`glVîãx3f
–
BLOCK_SIZE
/2, BLOCK_SIZE/2,-BLOCK_SIZE/2);

222 
	`glEnd
();

225 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
We°
));

226 
	`glBegö
(
GL_QUADS
);

227 
	`glN‹mÆ3f
( 1.0, 0.0, 0.0 );

228 
	`glVîãx3f
–
BLOCK_SIZE
/2, BLOCK_SIZE/2,-BLOCK_SIZE/2);

229 
	`glVîãx3f
–
BLOCK_SIZE
/2, BLOCK_SIZE/2, BLOCK_SIZE/2);

230 
	`glVîãx3f
–
BLOCK_SIZE
/2,-BLOCK_SIZE/2, BLOCK_SIZE/2);

231 
	`glVîãx3f
–
BLOCK_SIZE
/2,-BLOCK_SIZE/2,-BLOCK_SIZE/2);

232 
	`glEnd
();

235 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
Ea°
));

236 
	`glBegö
(
GL_QUADS
);

237 
	`glN‹mÆ3f
(-1.0, 0.0, 0.0 );

238 
	`glVîãx3f
(-
BLOCK_SIZE
/2, BLOCK_SIZE/2, BLOCK_SIZE/2);

239 
	`glVîãx3f
(-
BLOCK_SIZE
/2, BLOCK_SIZE/2,-BLOCK_SIZE/2);

240 
	`glVîãx3f
(-
BLOCK_SIZE
/2,-BLOCK_SIZE/2,-BLOCK_SIZE/2);

241 
	`glVîãx3f
(-
BLOCK_SIZE
/2,-BLOCK_SIZE/2, BLOCK_SIZE/2);

242 
	`glEnd
();

243 
	}
}

249 
	$døw_block_modñ
(
GLuöt
 
«me
)

251 
	`døw_block_body
(
«me
);

254 
	`glLﬂdName
(
	`ENCODE_NAME
(
«me
, 
T›
));

255 
	`døw_block_t›
(
PRONG_OFFSET
, PRONG_OFFSET);

256 
	`døw_block_t›
(-
PRONG_OFFSET
, PRONG_OFFSET);

257 
	`døw_block_t›
(
PRONG_OFFSET
, -PRONG_OFFSET);

258 
	`døw_block_t›
(-
PRONG_OFFSET
, -PRONG_OFFSET);

259 
	}
}

266 
	$døw_block
 (
Block
 *
block
)

286 
	`glPushM©rix
();

287 
	`glTøn¶©ef
(
block
->
x
, block->
y
, block->
z
);

290 
	`glCﬁ‹4f
(()
block
->
simLEDr
 /255.0,

291 ()
block
->
simLEDg
 /255.0,

292 ()
block
->
simLEDb
 /255.0,

293 ()
block
->
simLEDi
 /255.0);

295 
	`døw_block_modñ
(
block
->
id
);

297 
	`glP›M©rix
();

298 
	}
}

306 
	$˛ór_s¸ìn
 ()

309 
	`glCÀ¨Cﬁ‹
(0.0, 0.0, 0.0, 0.0);

312 
	`glCÀ¨Dïth
(
CLEAR_DEPTH
);

314 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
 | 
GL_DEPTH_BUFFER_BIT
);

315 
	}
}

325 
	$£t_å™sf‹m
 (
vL™dRŸ©e
[], 
vL™dTøn¶©e
[])

328 
	`glLﬂdIdítôy
();

330 
	`glTøn¶©ef
(
vL™dTøn¶©e
[0], vLandTranslate[1], vLandTranslate[2]);

332 
	`glRŸ©ef
(
vL™dRŸ©e
[0], 1.0, 0.0, 0.0);

333 
	`glRŸ©ef
(
vL™dRŸ©e
[1], 0.0, 1.0, 0.0);

334 
	`glRŸ©ef
(
vL™dRŸ©e
[2], 0.0, 0.0, 1.0);

335 
	}
}

	@sim/render.h

9 #i‚de‡
__RENDER_H_


10 
	#__RENDER_H_


	)

13 
	~<GL/gl.h
>

14 
	~<GL/glu.h
>

15 
	~<GL/glut.h
>

18 
	~"block.h
"

21 
	#CLEAR_DEPTH
 1.0

	)

24 
	#FOV
 60.0f

	)

25 
	#Z_NEAR
 0.5f

	)

26 
	#Z_FAR
 500.0f

	)

29 
	#WINDOW_WIDTH
 640

	)

30 
	#WINDOW_HEIGHT
 480

	)

33 
	#ENCODE_NAME
(
ödex
, 
Á˚
Ë((ödexË<< 3 | (Á˚))

	)

34 
	#DECODE_INDEX
(
«me
Ë(“ameË>> 3)

	)

35 
	#DECODE_FACE
(
«me
Ë(“ameË& 0x7)

	)

38 
light_öô
 ();

39 
m©îül_öô
 ();

40 
≥r•e˘ive_öô
 (
wödow_width
, 
wödow_height
);

43 
w‹ld_öô
 ();

46 
døw_block
(
Block
 *
block
);

47 
£t_di•œy_mode
(
GLíum
 
di•_mode
);

48 
ªdøw_w‹ld
 ();

49 
˛ór_s¸ìn
 ();

50 
£t_å™sf‹m
 (
vL™dRŸ©e
[], 
vL™dTøn¶©e
[]);

	@sim/sim.c

1 
	#DEFINE_GLOBALS


	)

3 
	~<sig«l.h
>

4 
	~<°d¨g.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

8 
	~"block.h
"

9 
	~"block_di•©ch.h
"

10 
	~"võwî.h
"

11 
	~"sim.h
"

12 
	~"c⁄fig.h
"

13 
	~"v¨übÀ_queue.h
"

17 * 
	g¥og«me
;

18 * 
	gc⁄fig«me
 = 0;

19 
	gnumbîOfRobŸs
 = 0;

20 
boﬁ
 
	gdebug
 = 
Ál£
;

22 
BlockLi°
 
	gblockLi°
 = 
Q_STATIC_INIT
;

23 
	gœ°BlockId
 = 0;

25 
	$__myas£π
(* 
fûe
, 
löe
, * 
exp
)

27 
	`Ârötf
(
°dîr
, "%s:%d: ASSERTION FAILED: %s\n", 
fûe
, 
löe
, 
exp
);

29 
	`exô
(-1);

30 
	}
}

32 
	$îr
(* 
¥om±
, ...)

34 
va_li°
 
≠
;

35 
	`va_°¨t
(
≠
,
¥om±
);

37 
	`Ârötf
(
°dîr
, "%s: Eº‹: ", 
¥og«me
);

38 
	`vÂrötf
(
°dîr
, 
¥om±
, 
≠
);

39 
	`Ârötf
(
°dîr
, "\n");

40 
	`exô
(-1);

41 
	}
}

43 
	$hñp
()

45 
	`Ârötf
(
°dîr
, "%s: simuœã blocks\n", 
¥og«me
);

46 
	`Ârötf
(
°dîr
, "\t-c <name>:\tfile with initial configuration\n");

47 
	`Ârötf
(
°dîr
, "\t-r generatesáÑandom block configuration\n");

48 
	`Ârötf
(
°dîr
, "\t-d debug statementsÉnabled\n");

49 
	`Ârötf
(
°dîr
, "\t-n disables graphics\n");

51 
	`exô
(0);

52 
	}
}

54 
±hªad_muãx_t
 
	gvmöômuãx
;

55 
±hªad_muãx_t
 
	g¥ötmuãx
;

56 
±hªad_muãx_t
 
	gdebugmuãx
;

57 
±hªad_muãx_t
 
	g£ndmuãx
;

58 
±hªad_muãx_t
 
	gcheckmuãx
;

59 
±hªad_muãx_t
 
	gde°roymuãx
;

60 
±hªad_c⁄d_t
 
	gde°royc⁄d
 = 
PTHREAD_COND_INITIALIZER
;

62 
	$block¥öt
(
FILE
* 
f
, * 
fmt
, ...)

64 
va_li°
 
≠
;

65 
buf„r
[128];

67 
	`va_°¨t
(
≠
,
fmt
);

68 
	`±hªad_muãx_lock
(&
¥ötmuãx
);

70 
	`Ârötf
(
f
, "%s:(%sË", 
	`nodeIDasSåög
(
	`this
()->
id
, 0), 
buf„r
);

71 
	`vÂrötf
(
f
, 
fmt
, 
≠
);

72 
	`fÊush
(
f
);

73 
	`±hªad_muãx_u∆ock
(&
¥ötmuãx
);

74 
	`va_íd
(
≠
);

75 
	}
}

77 
	$maö
(
¨gc
, ** 
¨gv
)

83 
boﬁ
 
c⁄figuªd
 = 
Ál£
;

84 
boﬁ
 
gøphics
 = 
åue
;

86 --
¨gc
;

87 
¥og«me
 = *
¨gv
++;

88 
¨gc
 > 0 && (
¨gv
[0][0] == '-')) {

89 
¨gv
[0][1]) {

91 i‡(
c⁄figuªd
)

92 
	`hñp
();

94 
	`ªadC⁄fig
(
¨gv
[1]);

95 
¨gc
--; 
¨gv
++;

96 
c⁄figuªd
 = 
åue
;

99 
debug
 = 
åue
;

102 
gøphics
 = 
Ál£
;

105 i‡(
c⁄figuªd
)

106 
	`hñp
();

107 
	`øndomC⁄fig
(0);

108 
c⁄figuªd
 = 
åue
;

111 i‡(
c⁄figuªd
)

112 
	`hñp
();

113 
¨gc
--; 
¨gv
++;

114 
num
 = 
	`©oi
(
¨gv
[0]);

115 
	`øndomC⁄fig
(
num
);

116 
c⁄figuªd
 = 
åue
;

119 
	`hñp
();

121 
¨gc
--; 
¨gv
++;

124 i‡(!
c⁄figuªd
)

125 
	`hñp
();

127 i‡(
debug
Ë
	`Ârötf
(
°dout
, "initial configuration\n");

133 
	`±hªad_muãx_öô
(&
¥ötmuãx
, 
NULL
);

134 
	`±hªad_muãx_öô
(&
vmöômuãx
, 
NULL
);

135 
	`±hªad_muãx_öô
(&
debugmuãx
, 
NULL
);

136 
	`±hªad_muãx_öô
(&
£ndmuãx
, 
NULL
);

137 
	`±hªad_muãx_öô
(&
checkmuãx
, 
NULL
);

138 
	`±hªad_muãx_öô
(&
de°roymuãx
, 
NULL
);

139 
	`±hªad_c⁄d_öô
(&
de°royc⁄d
, 
NULL
);

141 
Block
 *
block
;

143 
	`Q_FOREACH
(
block
, 
	`gëBlockLi°
(), 
blockLök
)

145 
	`Ârötf
(
°dîr
,"starting block\n");

146 
	`°¨tBlock
(
block
);

147 
	`Ârötf
(
°dîr
,"finishing block\n");

186 
	`±hªad_exô
(0);

188 
	}
}

190 
	$∑u£F‹evî
()

193 
	`±hªad_muãx_lock
(&
de°roymuãx
);

194 
	`±hªad_c⁄d_waô
(&
de°royc⁄d
, &
de°roymuãx
);

195 
	}
}

197 
	$ãŒNeighb‹sDe°royed
(
Block
 *
b
)

199 
i
;

200 
i
 = 0; i < 
NUM_PORTS
; ++i)

203 
Block
* 
d
 = 
	`£eIfNeighb‹At
(
b
, 
i
);

204 i‡(
d
 != 0) {

206 
j
;

207 
j
=0; j<
NUM_PORTS
; j++) {

208 i‡(
d
->
thisNeighb‹hood
.
n
[
j
] =
b
->
id
) {

209 
d
->
thisNeighb‹hood
.
n
[
j
] = 0;

210 
	`Ârötf
(
°dîr
, "%ldÇÿl⁄gî ha†%ld o¿p‹à%d\n", 
d
->
id
, 
b
->id, 
j
);

215 
	}
}

219 
	$ÆªadyExecuãd
(
íãr
)

221 
cou¡
 = 0;

222 
r
;

224 i‡(
íãr
 == 0) {

225 
	`±hªad_muãx_lock
(&
vmöômuãx
);

226 
r
 = 
cou¡
++;

227 i‡(
r
 == 0)  0;

229 
	`±hªad_muãx_u∆ock
(&
vmöômuãx
);

230  
r
;

233 
	`±hªad_muãx_u∆ock
(&
vmöômuãx
);

236 
	}
}

239 
	$yõldTû
(
Time
 
x
)

241 
	`sched_yõld
();

242 
	}
}

	@sim/sim.h

1 #i‚de‡
_SIM_H_


2 
	#_SIM_H_


	)

4 
îr
(*
¥om±
, ...);

	@sim/variable_queue.h

8 
	~<°dio.h
>

25 
	#Q_NEW_HEAD
(
Q_HEAD_TYPE
, 
Q_ELEM_TYPE
) \

26 
Q_HEAD_TYPE
 \

28 
Q_ELEM_TYPE
 *
hód
; \

29 
Q_ELEM_TYPE
 *
èû
; \

30 } 
	tQ_HEAD_TYPE


	)

48 
	tQ_NEW_LINK
(
	tQ_ELEM_TYPE
) \

51 
Q_ELEM_TYPE
 *
¥ev
; \

52 
Q_ELEM_TYPE
 *
√xt
; \

53 }

	)

61 
	tQ_INIT_HEAD
(
	tQ_HEAD
) \

63 (
Q_HEAD
)->
hód
 = 
NULL
; \

64 (
Q_HEAD
)->
èû
 = 
NULL
; \

65 }

	)

71 
	tQ_STATIC_INIT
 {
NULL
,NULL}

	)

84 
	tQ_INIT_ELEM
(
	tQ_ELEM
, 
	tLINK_NAME
) \

86 (
Q_ELEM
)->
LINK_NAME
.
√xt
 = 
NULL
; \

87 (
Q_ELEM
)->
LINK_NAME
.
¥ev
 = 
NULL
; \

88 }

	)

106 
	tQ_INSERT_FRONT
(
	tQ_HEAD
, 
	tQ_ELEM
, 
	tLINK_NAME
) \

108 (
Q_ELEM
)->
LINK_NAME
.
√xt
 = (
Q_HEAD
)->
hód
; \

109 (
Q_ELEM
)->
LINK_NAME
.
¥ev
 = 
NULL
; \

110 i‡((
Q_HEAD
)->
hód
 =
NULL
) \

111 (
Q_HEAD
)->
èû
 = 
Q_ELEM
; \

113 (
Q_HEAD
)->
hód
->
LINK_NAME
.
¥ev
 = 
Q_ELEM
; \

114 (
Q_HEAD
)->
hód
 = 
Q_ELEM
; \

115 }

	)

133 
	tQ_INSERT_TAIL
(
	tQ_HEAD
, 
	tQ_ELEM
, 
	tLINK_NAME
) \

135 (
Q_ELEM
)->
LINK_NAME
.
¥ev
 = (
Q_HEAD
)->
èû
; \

136 (
Q_ELEM
)->
LINK_NAME
.
√xt
 = 
NULL
; \

137 i‡((
Q_HEAD
)->
èû
 =
NULL
) \

138 (
Q_HEAD
)->
hód
 = 
Q_ELEM
; \

140 (
Q_HEAD
)->
èû
->
LINK_NAME
.
√xt
 = 
Q_ELEM
; \

141 (
Q_HEAD
)->
èû
 = 
Q_ELEM
; \

142 }

	)

153 
	tQ_GET_FRONT
(
	tQ_HEAD
) \

154 (
	tQ_HEAD
)->
	thód


	)

165 
	tQ_GET_TAIL
(
	tQ_HEAD
) \

166 (
	tQ_HEAD
)->
	tèû


	)

181 
	tQ_GET_NEXT
(
	tQ_ELEM
, 
	tLINK_NAME
) \

182 (
	tQ_ELEM
)->
	tLINK_NAME
.
	t√xt


	)

197 
	tQ_GET_PREV
(
	tQ_ELEM
, 
	tLINK_NAME
) \

198 (
	tQ_ELEM
)->
	tLINK_NAME
.
	t¥ev


	)

215 
	tQ_INSERT_AFTER
(
	tQ_HEAD
,
	tQ_INQ
,
	tQ_TOINSERT
,
	tLINK_NAME
) \

217 (
Q_TOINSERT
)->
LINK_NAME
.
¥ev
 = 
Q_INQ
; \

218 (
Q_TOINSERT
)->
LINK_NAME
.
√xt
 = (
Q_INQ
)->LINK_NAME.next; \

219 i‡((
Q_INQ
)->
LINK_NAME
.
√xt
 =
NULL
) \

220 (
Q_HEAD
)->
èû
 = 
Q_TOINSERT
; \

222 (
Q_TOINSERT
)->
LINK_NAME
.
√xt
->LINK_NAME.
¥ev
 = Q_TOINSERT; \

223 (
Q_INQ
)->
LINK_NAME
.
√xt
 = 
Q_TOINSERT
; \

224 }

	)

241 
	tQ_INSERT_BEFORE
(
	tQ_HEAD
,
	tQ_INQ
,
	tQ_TOINSERT
,
	tLINK_NAME
) \

243 (
Q_TOINSERT
)->
LINK_NAME
.
√xt
 = 
Q_INQ
; \

244 (
Q_TOINSERT
)->
LINK_NAME
.
¥ev
 = 
Q_INQ
->LINK_NAME.prev; \

245 i‡((
Q_INQ
)->
LINK_NAME
.
¥ev
 =
NULL
) \

246 (
Q_HEAD
)->
hód
 = 
Q_TOINSERT
; \

248 (
Q_TOINSERT
)->
LINK_NAME
.
¥ev
->LINK_NAME.
√xt
 = Q_TOINSERT; \

249 (
Q_INQ
)->
LINK_NAME
.
¥ev
 = 
Q_TOINSERT
; \

250 }

	)

271 
	tQ_REMOVE
(
	tQ_HEAD
,
	tQ_ELEM
,
	tLINK_NAME
) \

273 i‡((
Q_ELEM
)->
LINK_NAME
.
¥ev
 =
NULL
) \

274 (
Q_HEAD
)->
hód
 = (
Q_ELEM
)->
LINK_NAME
.
√xt
; \

276 (
Q_ELEM
)->
LINK_NAME
.
¥ev
->LINK_NAME.
√xt
 = \

277 (
Q_ELEM
)->
LINK_NAME
.
√xt
; \

279 i‡((
Q_ELEM
)->
LINK_NAME
.
√xt
 =
NULL
) \

280 (
Q_HEAD
)->
èû
 = (
Q_ELEM
)->
LINK_NAME
.
¥ev
; \

282 (
Q_ELEM
)->
LINK_NAME
.
√xt
->LINK_NAME.
¥ev
 = \

283 (
Q_ELEM
)->
LINK_NAME
.
¥ev
; \

285 (
Q_ELEM
)->
LINK_NAME
.
√xt
 = 
NULL
; \

286 (
Q_ELEM
)->
LINK_NAME
.
¥ev
 = 
NULL
; \

287 }

	)

318 
	tQ_FOREACH
(
	tCURRENT_ELEM
,
	tQ_HEAD
,
	tLINK_NAME
) \

319 
	tCURRENT_ELEM
 = (
	tQ_HEAD
)->
	thód
; 
CURRENT_ELEM
 !
NULL
; \

320 
CURRENT_ELEM
 = CURRENT_ELEM->
LINK_NAME
.
√xt
)

	)

335 
	#Q_JOIN
(
Q_HEAD_1
,
Q_HEAD_2
,
LINK_NAME
) \

337 i‡((
Q_HEAD_2
)->
hód
 !
NULL
) \

339 (
Q_HEAD_2
)->
hód
->
LINK_NAME
.
¥ev
 = (
Q_HEAD_1
)->
èû
; \

340 i‡((
Q_HEAD_1
)->
èû
 !
NULL
) \

341 (
Q_HEAD_1
)->
èû
->
LINK_NAME
.
√xt
 = (
Q_HEAD_2
)->
hód
; \

342 (
Q_HEAD_2
)->
hód
 = 
NULL
; \

343 (
Q_HEAD_2
)->
èû
 = 
NULL
; \

345 }

	)

354 
	#Q_SHALLOW_COPY
(
Q_HEAD_1
,
Q_HEAD_2
) \

356 (
Q_HEAD_2
)->
hód
 = (
Q_HEAD_1
)->head; \

357 (
Q_HEAD_2
)->
èû
 = (
Q_HEAD_1
)->tail; \

359 

	)

366 
	#Q_IS_EMPTY
(
Q_HEAD
Ë((Q_HEAD)->
hód
 =
NULL
)

	)

	@sim/viewer.c

11 
	~<GL/gl.h
>

12 
	~<GL/glu.h
>

13 
	~<GL/glut.h
>

16 
	~<m©h.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

21 
	~"ªndî.h
"

24 
	~"míu.h
"

27 
	~"˛ick.h
"

30 
	~"block.h
"

32 
	#ACCEL_LOCK_KEY
 'z'

	)

33 
	#VIEW_RESET_KEY
 'x'

	)

36 
	gg_vMou£Pos
[2] = {0, 0};

37 
	gg_iLe·Mou£Buâ⁄
 = 0;

38 
	gg_iMiddÀMou£Buâ⁄
 = 0;

39 
	gg_iRightMou£Buâ⁄
 = 0;

42 íum { 
	mROTATE
, 
	mTRANSLATE
 } 
	tCONTROLSTATE
;

44 
CONTROLSTATE
 
	gg_C⁄åﬁSèã
 = 
ROTATE
;

45 
	gac˚lA˘ive
 = 0;

48 
	gg_vL™dRŸ©e
[3] = {0.0, 0.0, 0.0};

49 
	gg_vL™dTøn¶©e
[3] = {0.0, 0.0, -10.0};

52 
di•œy
 ();

53 
do_idÀ
 ();

54 
wödow_öô
 ();

55 
ˇŒback_öô
 ();

56 
mou£_døg
 ();

57 
mou£_idÀ
 ();

58 
mou£_buâ⁄
 ();

59 
¥o˚ss_èp
(
x
, 
y
);

60 
add_block
 (
s¸ìnX
, 
s¸ìnY
);

61 
ªmove_block
 (
s¸ìnX
, 
s¸ìnY
);

67 
	$di•œy
()

69 
	`˛ór_s¸ìn
();

70 
	`£t_å™sf‹m
(
g_vL™dRŸ©e
, 
g_vL™dTøn¶©e
);

71 
	`ªdøw_w‹ld
();

72 
	`glutSw≠Buf„rs
();

73 
	}
}

81 
	$do_idÀ
()

83 
	`glutPo°Redi•œy
();

84 
	}
}

95 
	$mou£_døg
(
x
, 
y
)

97 
vMou£Dñè
[2] = {
x
-
g_vMou£Pos
[0], 
y
-g_vMousePos[1]};

99 
g_C⁄åﬁSèã
)

101 
ROTATE
:

102 i‡(
g_iLe·Mou£Buâ⁄
)

104 
g_vL™dRŸ©e
[0] +
vMou£Dñè
[1];

105 
g_vL™dRŸ©e
[1] +
vMou£Dñè
[0];

107 i‡(
g_iMiddÀMou£Buâ⁄
)

109 
g_vL™dRŸ©e
[2] +
vMou£Dñè
[1];

112 
TRANSLATE
:

113 i‡(
g_iLe·Mou£Buâ⁄
)

115 
g_vL™dTøn¶©e
[0] +
vMou£Dñè
[0]*0.01;

116 
g_vL™dTøn¶©e
[1] -
vMou£Dñè
[1]*0.01;

119 i‡(
g_iMiddÀMou£Buâ⁄
)

121 
g_vL™dTøn¶©e
[2] +
vMou£Dñè
[1]*0.01;

128 
g_vMou£Pos
[0] = 
x
;

129 
g_vMou£Pos
[1] = 
y
;

130 
	}
}

141 
	$mou£_idÀ
(
x
, 
y
)

143 
g_vMou£Pos
[0] = 
x
;

144 
g_vMou£Pos
[1] = 
y
;

145 
	}
}

159 
	$mou£_buâ⁄
(
buâ⁄
, 
°©e
, 
x
, 
y
)

161 
buâ⁄
)

163 
GLUT_LEFT_BUTTON
:

164 
g_iLe·Mou£Buâ⁄
 = (
°©e
==
GLUT_DOWN
);

166 
GLUT_MIDDLE_BUTTON
:

167 
g_iMiddÀMou£Buâ⁄
 = (
°©e
==
GLUT_DOWN
);

169 
GLUT_RIGHT_BUTTON
:

170 
g_iRightMou£Buâ⁄
 = (
°©e
==
GLUT_DOWN
);

174 
	`glutGëModifõrs
())

176 
GLUT_ACTIVE_CTRL
:

177 
g_C⁄åﬁSèã
 = 
TRANSLATE
;

180 
g_C⁄åﬁSèã
 = 
ROTATE
;

184 i‡(
g_iLe·Mou£Buâ⁄
)

185 
	`¥o˚ss_èp
(
x
, 
y
);

186 i‡((
g_iRightMou£Buâ⁄
Ë&& 
g_C⁄åﬁSèã
 =
ROTATE
)

187 
	`add_block
(
x
, 
y
);

188 i‡((
g_iRightMou£Buâ⁄
Ë&& 
g_C⁄åﬁSèã
 =
TRANSLATE
)

189 
	`ªmove_block
(
x
, 
y
);

191 
g_vMou£Pos
[0] = 
x
;

192 
g_vMou£Pos
[1] = 
y
;

193 
	}
}

202 
	$key_buâ⁄
 (
key
, 
x
, 
y
)

204 
key
)

206 
ACCEL_LOCK_KEY
:

207 
ac˚lA˘ive
 = !accelActive;

209 
VIEW_RESET_KEY
:

210 
g_vL™dRŸ©e
[0] = 0.0;

211 
g_vL™dRŸ©e
[1] = 0.0;

212 
g_vL™dRŸ©e
[2] = 0.0;

213 
g_vL™dTøn¶©e
[0] = 0.0;

214 
g_vL™dTøn¶©e
[1] = 0.0;

215 
g_vL™dTøn¶©e
[2] = -10.0;

220 
	}
}

228 
	$¥o˚ss_èp
(
x
, 
y
)

230 
Block
 *
block
;

232 
block
 = 
	`˛ick
(
x
,
y
, 
NULL
);

233 i‡(
block
 =
NULL
)

236 
	`±hªad_muãx_lock
(&
block
->
èpMuãx
);

237 
	`Ârötf
(
°dîr
, "%ldÅ≠≥d\n", 
block
->
id
);

238 
block
->
èpBuf„r
++;

239 
	`±hªad_muãx_u∆ock
(&
block
->
èpMuãx
);

241 
	}
}

249 
	$add_block
 (
s¸ìnX
, 
s¸ìnY
)

251 
Block
 *
block
, *
√wBlock
;

252 
Á˚
;

253 
x
, 
y
, 
z
;

255 
Á˚
 = -1;

256 
block
 = 
	`˛ick
(
s¸ìnX
, 
s¸ìnY
, &
Á˚
);

257 i‡(
block
 =
NULL
 || 
Á˚
 == -1)

260 
	`Ârötf
(
°dîr
, "add block @ %†Á˚ %d\r\n", 
	`nodeIDasSåög
(
block
->
id
, 0), 
Á˚
);

262 
x
 = 0;

263 
y
 = 0;

264 
z
 = 0;

265 
	`gëPoötInDúe˘i⁄
(
block
->
x
, block->
y
, block->
z
,

266 
Á˚
, &
x
, &
y
, &
z
);

273 
√wBlock
 = 
	`¸óãBlock
(
x
, 
y
, 
z
);

274 i‡(
√wBlock
 =
NULL
)

276 
	`Ârötf
(
°dîr
, "CouldÇotáddÇew block - out of memory\r\n");

281 
	`°¨tBlock
(
√wBlock
);

283 
	`Ârötf
(
°dîr
, "°¨ãd block @ %†Á˚ %d\r\n", 
	`nodeIDasSåög
(
block
->
id
, 0), 
Á˚
);

284 
	}
}

286 
	$show°©us
()

288 
Block
 *
block
;

289 
i
;

291 
	`Q_FOREACH
(
block
, 
	`gëBlockLi°
(), 
blockLök
)

293 
	`Ârötf
(
°dîr
, "block:%ld has: (", 
block
->
id
);

294 
cou¡
;

295 
cou¡
 = 0, 
i
 = 0; i < 
NUM_PORTS
; ++i)

296 if(
block
->
thisNeighb‹hood
.
n
[
i
] !0Ë
	`Ârötf
(
°dîr
, "%d ", i);

297 
	`Ârötf
(
°dîr
, "\n");

299 
	}
}

308 
	$ªmove_block
 (
s¸ìnX
, 
s¸ìnY
)

310 
Block
 *
block
;

311 
Á˚
;

313 
	`Ârötf
(
°dîr
, "\n------------Ñemoving\n");

314 
	`show°©us
();

316 
Á˚
 = -1;

317 
block
 = 
	`˛ick
(
s¸ìnX
, 
s¸ìnY
, &
Á˚
);

318 i‡(
block
 =
NULL
)

321 
	`Ârötf
(
°dîr
, "ªmovêblock @ %†Á˚ %d\n", 
	`nodeIDasSåög
(
block
->
id
, 0), 
Á˚
);

322 
	`de°royBlock
(
block
);

324 
	`show°©us
();

325 
	}
}

333 
	$¥o˚ss_ac˚l
 (
vMou£Dñè
[])

335 
vAc˚lF‹˚
[3] = {0, 0, 0};

337 
g_C⁄åﬁSèã
)

339 
ROTATE
:

350 
TRANSLATE
:

351 i‡(
g_iLe·Mou£Buâ⁄
)

353 
vAc˚lF‹˚
[0] +
vMou£Dñè
[0]*0.01;

354 
vAc˚lF‹˚
[1] -
vMou£Dñè
[1]*0.01;

356 i‡(
g_iMiddÀMou£Buâ⁄
)

358 
vAc˚lF‹˚
[2] +
vMou£Dñè
[1]*0.01;

365 
	}
}

376 
	$võwî_öô
 (
¨gc
, ** 
¨gv
)

378 
	`glutInô
(&
¨gc
,
¨gv
);

381 
	`wödow_öô
();

382 
	`míu_öô
();

383 
	`ˇŒback_öô
();

386 
	`≥r•e˘ive_öô
(
WINDOW_WIDTH
, 
WINDOW_HEIGHT
);

387 
	`m©îül_öô
();

388 
	`light_öô
();

390 
	`˛ór_s¸ìn
();

392 
	`w‹ld_öô
();

395 
	}
}

401 
	$evít_lo›
()

403 
	`glutMaöLo›
();

404 
	}
}

410 
	$wödow_öô
 ()

413 
	`glutInôDi•œyMode
(
GLUT_DEPTH
 | 
GLUT_RGBA
 | 
GLUT_DOUBLE
);

416 
	`glutInôWödowSize
(
WINDOW_WIDTH
, 
WINDOW_HEIGHT
);

417 
	`glutInôWödowPosôi⁄
(0, 0);

418 
	`glutCª©eWödow
("Blinky Blocks Simulator");

419 
	}
}

427 
	$ˇŒback_öô
 ()

430 
	`glutDi•œyFunc
(
di•œy
);

433 
	`glutIdÀFunc
(
do_idÀ
);

436 
	`glutMŸi⁄Func
(
mou£_døg
);

439 
	`glutPassiveMŸi⁄Func
(
mou£_idÀ
);

442 
	`glutMou£Func
(
mou£_buâ⁄
);

445 
	`glutKeybﬂrdFunc
(
key_buâ⁄
);

446 
	}
}

	@sim/viewer.h

9 #i‚de‡
__VIEWER_H_


10 
	#__VIEWER_H_


	)

12 
	~"block.h
"

14 
võwî_öô
 (
¨gc
, ** 
¨gv
);

15 
evít_lo›
 ();

	@sim/world.c

1 
	~"block.h
"

2 
	~"w‹ld.h
"

4 
Block
* 
	$£eIfNeighb‹At
(
Block
 *
b
, 
Fa˚
 
Á˚
)

6 
x
, 
y
, 
z
;

9 
	`gëPoötInDúe˘i⁄
(
b
->
x
, b->
y
, b->
z
, 
Á˚
, &x, &y, &z);

13 
Block
 *
block
;

14 
	`Q_FOREACH
(
block
, 
	`gëBlockLi°
(), 
blockLök
)

16 i‡((
block
->
x
 == x) &&

17 (
block
->
y
 == y) &&

18 (
block
->
z
 == z))

19  
block
;

23 
	}
}

26 
Fa˚
 
	$dëîmöeDúe˘i⁄
(
sx
, 
sy
, 
sz
, 
dx
, 
dy
, 
dz
)

28 i‡((
dz
 - 
sz
) != 0)

30 i‡(
dz
 > 
sz
)

31  
N‹th
;

32  
South
;

34 i‡((
dx
 - 
sx
) != 0)

36 i‡(
dx
 > 
sx
)

37  
We°
;

38  
Ea°
;

40 i‡((
dy
 - 
sy
) != 0)

42 i‡(
dy
 > 
sy
)

43  
T›
;

44  
Down
;

47 
	}
}

49 
	$dëîmöeFa˚Tow¨ds
(
Block
 *
§c
, Block *
de°
)

51  
	`dëîmöeDúe˘i⁄
(
§c
->
x
, src->
y
, src->
z
, 
de°
->x, dest->y, dest->z);

52 
	}
}

54 
	$gëPoötInDúe˘i⁄
(
sx
, 
sy
, 
sz
, 
Fa˚
 
i
, * 
dx
, * 
dy
, * 
dz
)

56 *
dx
 = 
sx
;

57 *
dy
 = 
sy
;

58 *
dz
 = 
sz
;

59 
i
)

61 
T›
:

62 *
dy
 = 
sy
 + 1;

64 
Down
:

65 *
dy
 = 
sy
 - 1;

67 
N‹th
:

68 *
dz
 = 
sz
 + 1;

70 
South
:

71 *
dz
 = 
sz
 - 1;

73 
Ea°
:

74 *
dx
 = 
sx
 - 1;

76 
We°
:

77 *
dx
 = 
sx
 + 1;

79 
NumFa˚s
:

83 
	}
}

85 *
	$Á˚ToSåög
(
Fa˚
 
Á˚
)

87 
Á˚
)

89 
T›
:

91 
Down
:

93 
N‹th
:

95 
South
:

97 
Ea°
:

99 
We°
:

101 
NumFa˚s
:

105 
	}
}

	@sim/world.h

1 #i‚de‡
_WORLD_H_


2 
	#_WORLD_H_


	)

4 
	~"block.h
"

6 íum { 
	mDown
, 
	mN‹th
, 
	mEa°
, 
	mWe°
, 
	mSouth
, 
	mT›
, 
	mNumFa˚s
 } 
	tFa˚
;

8 
Block
* 
£eIfNeighb‹At
(Block *
b
, 
Fa˚
 
Á˚
);

9 
Fa˚
 
dëîmöeDúe˘i⁄
(
sx
, 
sy
, 
sz
, 
dx
, 
dy
, 
dz
);

10 
dëîmöeFa˚Tow¨ds
(
Block
 *
§c
, Block *
de°
);

11 
gëPoötInDúe˘i⁄
(
sx
, 
sy
, 
sz
, 
Fa˚
 
i
, * 
dx
, * 
dy
, * 
dz
);

12 *
Á˚ToSåög
(
Fa˚
 
Á˚
);

	@system/myassert.h

1 #i‚de‡
_MYASSERT_H_


2 
	#_MYASSERT_H_


	)

3 #ifde‡
as£π


4 #unde‡
as£π


7 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__myas£π
(
__FILE__
, 
__LINE__
, #e))

	)

8 
__myas£π
(* 
fûe
, 
löe
, * 
exp
);

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

40 #i‡!
deföed
(
__SCITECH_SNAP__
)

42 #i‡
deföed
(
__BEOS__
)

43 
	~<°dlib.h
>

46 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
NeXT
Ë|| deföed(
NeXT_PDO
))

47 
	#OPENSTEP


	)

50 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

51 
	#__WIN32__


	)

54 #i‡!
deföed
(
OPENSTEP
Ë&& (deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
))

55 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

56 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

57 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#GLAPI
 

	)

62 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

63 
	#GLAPIENTRY


	)

65 
	#GLAPIENTRY
 
__°dˇŒ


	)

67 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

68 
	#GLAPI
 

	)

69 
	#GLAPIENTRY
 
__°dˇŒ


	)

70 #ñi‡
deföed
(
__GNUC__
Ë&& (__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303

71 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

72 
	#GLAPIENTRY


	)

75 #i‡(
deföed
(
__BEOS__
Ë&& deföed(
__POWERPC__
)Ë|| deföed(
__QUICKDRAW__
)

76 
	#PRAGMA_EXPORT_SUPPORTED
 1

	)

87 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

88 
	#WIN32_LEAN_AND_MEAN
 1

	)

89 
	~<wödows.h
>

92 #i‡
deföed
(
_WIN32
Ë&& !deföed(
_WINGDI_
Ë&& !deföed(
_WIN32_WCE
) \

93 && !
deföed
(
_GNU_H_WINDOWS32_DEFINES
Ë&& !deföed(
OPENSTEP
) \

94 && !
deföed
(
__CYGWIN__
Ë|| 
	$deföed
(
__MINGW32__
)

95 
	~<GL/meß_wgl.h
>

98 #i‡
	`deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


99 #¥agm®
imp‹t
 
⁄


102 #i‚de‡
GLAPI


103 
	#GLAPI
 

	)

106 #i‚de‡
GLAPIENTRY


107 
	#GLAPIENTRY


	)

110 #i‚de‡
APIENTRY


111 
	#APIENTRY
 
GLAPIENTRY


	)

115 #i‚de‡
APIENTRYP


116 
	#APIENTRYP
 
APIENTRY
 *

	)

119 #i‚de‡
GLAPIENTRYP


120 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

123 #ifde‡
CENTERLINE_CLPP


124 sig√d

	)

127 #i‡
	`deföed
(
PRAGMA_EXPORT_SUPPORTED
)

128 #¥agm®
exp‹t
 
⁄


138 #ifde‡
__˝lu•lus


144 
	#GL_VERSION_1_1
 1

	)

145 
	#GL_VERSION_1_2
 1

	)

146 
	#GL_VERSION_1_3
 1

	)

147 
	#GL_ARB_imagög
 1

	)

153 
	tGLíum
;

154 
	tGLboﬁón
;

155 
	tGLbôfõld
;

156 
	tGLvoid
;

157 sig√d 
	tGLbyã
;

158 
	tGLsh‹t
;

159 
	tGLöt
;

160 
	tGLubyã
;

161 
	tGLush‹t
;

162 
	tGLuöt
;

163 
	tGLsizei
;

164 
	tGLÊﬂt
;

165 
	tGL˛ampf
;

166 
	tGLdoubÀ
;

167 
	tGL˛ampd
;

176 
	#GL_FALSE
 0x0

	)

177 
	#GL_TRUE
 0x1

	)

180 
	#GL_BYTE
 0x1400

	)

181 
	#GL_UNSIGNED_BYTE
 0x1401

	)

182 
	#GL_SHORT
 0x1402

	)

183 
	#GL_UNSIGNED_SHORT
 0x1403

	)

184 
	#GL_INT
 0x1404

	)

185 
	#GL_UNSIGNED_INT
 0x1405

	)

186 
	#GL_FLOAT
 0x1406

	)

187 
	#GL_2_BYTES
 0x1407

	)

188 
	#GL_3_BYTES
 0x1408

	)

189 
	#GL_4_BYTES
 0x1409

	)

190 
	#GL_DOUBLE
 0x140A

	)

193 
	#GL_POINTS
 0x0000

	)

194 
	#GL_LINES
 0x0001

	)

195 
	#GL_LINE_LOOP
 0x0002

	)

196 
	#GL_LINE_STRIP
 0x0003

	)

197 
	#GL_TRIANGLES
 0x0004

	)

198 
	#GL_TRIANGLE_STRIP
 0x0005

	)

199 
	#GL_TRIANGLE_FAN
 0x0006

	)

200 
	#GL_QUADS
 0x0007

	)

201 
	#GL_QUAD_STRIP
 0x0008

	)

202 
	#GL_POLYGON
 0x0009

	)

205 
	#GL_VERTEX_ARRAY
 0x8074

	)

206 
	#GL_NORMAL_ARRAY
 0x8075

	)

207 
	#GL_COLOR_ARRAY
 0x8076

	)

208 
	#GL_INDEX_ARRAY
 0x8077

	)

209 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

210 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

211 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

212 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

213 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

214 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

215 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

216 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

217 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

218 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

219 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

220 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

221 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

222 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

223 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

224 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

225 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

226 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

227 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

228 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

229 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

230 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

231 
	#GL_V2F
 0x2A20

	)

232 
	#GL_V3F
 0x2A21

	)

233 
	#GL_C4UB_V2F
 0x2A22

	)

234 
	#GL_C4UB_V3F
 0x2A23

	)

235 
	#GL_C3F_V3F
 0x2A24

	)

236 
	#GL_N3F_V3F
 0x2A25

	)

237 
	#GL_C4F_N3F_V3F
 0x2A26

	)

238 
	#GL_T2F_V3F
 0x2A27

	)

239 
	#GL_T4F_V4F
 0x2A28

	)

240 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

241 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

242 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

243 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

244 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

247 
	#GL_MATRIX_MODE
 0x0BA0

	)

248 
	#GL_MODELVIEW
 0x1700

	)

249 
	#GL_PROJECTION
 0x1701

	)

250 
	#GL_TEXTURE
 0x1702

	)

253 
	#GL_POINT_SMOOTH
 0x0B10

	)

254 
	#GL_POINT_SIZE
 0x0B11

	)

255 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

256 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

259 
	#GL_LINE_SMOOTH
 0x0B20

	)

260 
	#GL_LINE_STIPPLE
 0x0B24

	)

261 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

262 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

263 
	#GL_LINE_WIDTH
 0x0B21

	)

264 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

265 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

268 
	#GL_POINT
 0x1B00

	)

269 
	#GL_LINE
 0x1B01

	)

270 
	#GL_FILL
 0x1B02

	)

271 
	#GL_CW
 0x0900

	)

272 
	#GL_CCW
 0x0901

	)

273 
	#GL_FRONT
 0x0404

	)

274 
	#GL_BACK
 0x0405

	)

275 
	#GL_POLYGON_MODE
 0x0B40

	)

276 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

277 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

278 
	#GL_EDGE_FLAG
 0x0B43

	)

279 
	#GL_CULL_FACE
 0x0B44

	)

280 
	#GL_CULL_FACE_MODE
 0x0B45

	)

281 
	#GL_FRONT_FACE
 0x0B46

	)

282 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

283 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

284 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

285 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

286 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

289 
	#GL_COMPILE
 0x1300

	)

290 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

291 
	#GL_LIST_BASE
 0x0B32

	)

292 
	#GL_LIST_INDEX
 0x0B33

	)

293 
	#GL_LIST_MODE
 0x0B30

	)

296 
	#GL_NEVER
 0x0200

	)

297 
	#GL_LESS
 0x0201

	)

298 
	#GL_EQUAL
 0x0202

	)

299 
	#GL_LEQUAL
 0x0203

	)

300 
	#GL_GREATER
 0x0204

	)

301 
	#GL_NOTEQUAL
 0x0205

	)

302 
	#GL_GEQUAL
 0x0206

	)

303 
	#GL_ALWAYS
 0x0207

	)

304 
	#GL_DEPTH_TEST
 0x0B71

	)

305 
	#GL_DEPTH_BITS
 0x0D56

	)

306 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

307 
	#GL_DEPTH_FUNC
 0x0B74

	)

308 
	#GL_DEPTH_RANGE
 0x0B70

	)

309 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

310 
	#GL_DEPTH_COMPONENT
 0x1902

	)

313 
	#GL_LIGHTING
 0x0B50

	)

314 
	#GL_LIGHT0
 0x4000

	)

315 
	#GL_LIGHT1
 0x4001

	)

316 
	#GL_LIGHT2
 0x4002

	)

317 
	#GL_LIGHT3
 0x4003

	)

318 
	#GL_LIGHT4
 0x4004

	)

319 
	#GL_LIGHT5
 0x4005

	)

320 
	#GL_LIGHT6
 0x4006

	)

321 
	#GL_LIGHT7
 0x4007

	)

322 
	#GL_SPOT_EXPONENT
 0x1205

	)

323 
	#GL_SPOT_CUTOFF
 0x1206

	)

324 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

325 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

326 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

327 
	#GL_AMBIENT
 0x1200

	)

328 
	#GL_DIFFUSE
 0x1201

	)

329 
	#GL_SPECULAR
 0x1202

	)

330 
	#GL_SHININESS
 0x1601

	)

331 
	#GL_EMISSION
 0x1600

	)

332 
	#GL_POSITION
 0x1203

	)

333 
	#GL_SPOT_DIRECTION
 0x1204

	)

334 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

335 
	#GL_COLOR_INDEXES
 0x1603

	)

336 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

337 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

338 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

339 
	#GL_FRONT_AND_BACK
 0x0408

	)

340 
	#GL_SHADE_MODEL
 0x0B54

	)

341 
	#GL_FLAT
 0x1D00

	)

342 
	#GL_SMOOTH
 0x1D01

	)

343 
	#GL_COLOR_MATERIAL
 0x0B57

	)

344 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

345 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

346 
	#GL_NORMALIZE
 0x0BA1

	)

349 
	#GL_CLIP_PLANE0
 0x3000

	)

350 
	#GL_CLIP_PLANE1
 0x3001

	)

351 
	#GL_CLIP_PLANE2
 0x3002

	)

352 
	#GL_CLIP_PLANE3
 0x3003

	)

353 
	#GL_CLIP_PLANE4
 0x3004

	)

354 
	#GL_CLIP_PLANE5
 0x3005

	)

357 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

358 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

359 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

360 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

361 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

362 
	#GL_ACCUM
 0x0100

	)

363 
	#GL_ADD
 0x0104

	)

364 
	#GL_LOAD
 0x0101

	)

365 
	#GL_MULT
 0x0103

	)

366 
	#GL_RETURN
 0x0102

	)

369 
	#GL_ALPHA_TEST
 0x0BC0

	)

370 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

371 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

374 
	#GL_BLEND
 0x0BE2

	)

375 
	#GL_BLEND_SRC
 0x0BE1

	)

376 
	#GL_BLEND_DST
 0x0BE0

	)

377 
	#GL_ZERO
 0x0

	)

378 
	#GL_ONE
 0x1

	)

379 
	#GL_SRC_COLOR
 0x0300

	)

380 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

381 
	#GL_SRC_ALPHA
 0x0302

	)

382 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

383 
	#GL_DST_ALPHA
 0x0304

	)

384 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

385 
	#GL_DST_COLOR
 0x0306

	)

386 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

387 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

390 
	#GL_FEEDBACK
 0x1C01

	)

391 
	#GL_RENDER
 0x1C00

	)

392 
	#GL_SELECT
 0x1C02

	)

395 
	#GL_2D
 0x0600

	)

396 
	#GL_3D
 0x0601

	)

397 
	#GL_3D_COLOR
 0x0602

	)

398 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

399 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

400 
	#GL_POINT_TOKEN
 0x0701

	)

401 
	#GL_LINE_TOKEN
 0x0702

	)

402 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

403 
	#GL_POLYGON_TOKEN
 0x0703

	)

404 
	#GL_BITMAP_TOKEN
 0x0704

	)

405 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

406 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

407 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

408 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

409 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

410 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

413 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

414 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

417 
	#GL_FOG
 0x0B60

	)

418 
	#GL_FOG_MODE
 0x0B65

	)

419 
	#GL_FOG_DENSITY
 0x0B62

	)

420 
	#GL_FOG_COLOR
 0x0B66

	)

421 
	#GL_FOG_INDEX
 0x0B61

	)

422 
	#GL_FOG_START
 0x0B63

	)

423 
	#GL_FOG_END
 0x0B64

	)

424 
	#GL_LINEAR
 0x2601

	)

425 
	#GL_EXP
 0x0800

	)

426 
	#GL_EXP2
 0x0801

	)

429 
	#GL_LOGIC_OP
 0x0BF1

	)

430 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

431 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

432 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

433 
	#GL_CLEAR
 0x1500

	)

434 
	#GL_SET
 0x150F

	)

435 
	#GL_COPY
 0x1503

	)

436 
	#GL_COPY_INVERTED
 0x150C

	)

437 
	#GL_NOOP
 0x1505

	)

438 
	#GL_INVERT
 0x150A

	)

439 
	#GL_AND
 0x1501

	)

440 
	#GL_NAND
 0x150E

	)

441 
	#GL_OR
 0x1507

	)

442 
	#GL_NOR
 0x1508

	)

443 
	#GL_XOR
 0x1506

	)

444 
	#GL_EQUIV
 0x1509

	)

445 
	#GL_AND_REVERSE
 0x1502

	)

446 
	#GL_AND_INVERTED
 0x1504

	)

447 
	#GL_OR_REVERSE
 0x150B

	)

448 
	#GL_OR_INVERTED
 0x150D

	)

451 
	#GL_STENCIL_BITS
 0x0D57

	)

452 
	#GL_STENCIL_TEST
 0x0B90

	)

453 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

454 
	#GL_STENCIL_FUNC
 0x0B92

	)

455 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

456 
	#GL_STENCIL_FAIL
 0x0B94

	)

457 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

458 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

459 
	#GL_STENCIL_REF
 0x0B97

	)

460 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

461 
	#GL_STENCIL_INDEX
 0x1901

	)

462 
	#GL_KEEP
 0x1E00

	)

463 
	#GL_REPLACE
 0x1E01

	)

464 
	#GL_INCR
 0x1E02

	)

465 
	#GL_DECR
 0x1E03

	)

468 
	#GL_NONE
 0x0

	)

469 
	#GL_LEFT
 0x0406

	)

470 
	#GL_RIGHT
 0x0407

	)

474 
	#GL_FRONT_LEFT
 0x0400

	)

475 
	#GL_FRONT_RIGHT
 0x0401

	)

476 
	#GL_BACK_LEFT
 0x0402

	)

477 
	#GL_BACK_RIGHT
 0x0403

	)

478 
	#GL_AUX0
 0x0409

	)

479 
	#GL_AUX1
 0x040A

	)

480 
	#GL_AUX2
 0x040B

	)

481 
	#GL_AUX3
 0x040C

	)

482 
	#GL_COLOR_INDEX
 0x1900

	)

483 
	#GL_RED
 0x1903

	)

484 
	#GL_GREEN
 0x1904

	)

485 
	#GL_BLUE
 0x1905

	)

486 
	#GL_ALPHA
 0x1906

	)

487 
	#GL_LUMINANCE
 0x1909

	)

488 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

489 
	#GL_ALPHA_BITS
 0x0D55

	)

490 
	#GL_RED_BITS
 0x0D52

	)

491 
	#GL_GREEN_BITS
 0x0D53

	)

492 
	#GL_BLUE_BITS
 0x0D54

	)

493 
	#GL_INDEX_BITS
 0x0D51

	)

494 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

495 
	#GL_AUX_BUFFERS
 0x0C00

	)

496 
	#GL_READ_BUFFER
 0x0C02

	)

497 
	#GL_DRAW_BUFFER
 0x0C01

	)

498 
	#GL_DOUBLEBUFFER
 0x0C32

	)

499 
	#GL_STEREO
 0x0C33

	)

500 
	#GL_BITMAP
 0x1A00

	)

501 
	#GL_COLOR
 0x1800

	)

502 
	#GL_DEPTH
 0x1801

	)

503 
	#GL_STENCIL
 0x1802

	)

504 
	#GL_DITHER
 0x0BD0

	)

505 
	#GL_RGB
 0x1907

	)

506 
	#GL_RGBA
 0x1908

	)

509 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

510 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

511 
	#GL_MAX_LIGHTS
 0x0D31

	)

512 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

513 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

514 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

515 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

516 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

517 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

518 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

519 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

520 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

521 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

524 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

525 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

526 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

527 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

528 
	#GL_CURRENT_INDEX
 0x0B01

	)

529 
	#GL_CURRENT_COLOR
 0x0B00

	)

530 
	#GL_CURRENT_NORMAL
 0x0B02

	)

531 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

532 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

533 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

534 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

535 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

536 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

537 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

538 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

539 
	#GL_INDEX_MODE
 0x0C30

	)

540 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

541 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

542 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

543 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

544 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

545 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

546 
	#GL_RENDER_MODE
 0x0C40

	)

547 
	#GL_RGBA_MODE
 0x0C31

	)

548 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

549 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

550 
	#GL_VIEWPORT
 0x0BA2

	)

553 
	#GL_AUTO_NORMAL
 0x0D80

	)

554 
	#GL_MAP1_COLOR_4
 0x0D90

	)

555 
	#GL_MAP1_INDEX
 0x0D91

	)

556 
	#GL_MAP1_NORMAL
 0x0D92

	)

557 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

558 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

559 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

560 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

561 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

562 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

563 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

564 
	#GL_MAP2_INDEX
 0x0DB1

	)

565 
	#GL_MAP2_NORMAL
 0x0DB2

	)

566 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

567 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

568 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

569 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

570 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

571 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

572 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

573 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

574 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

575 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

576 
	#GL_COEFF
 0x0A00

	)

577 
	#GL_ORDER
 0x0A01

	)

578 
	#GL_DOMAIN
 0x0A02

	)

581 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

582 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

583 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

584 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

585 
	#GL_FOG_HINT
 0x0C54

	)

586 
	#GL_DONT_CARE
 0x1100

	)

587 
	#GL_FASTEST
 0x1101

	)

588 
	#GL_NICEST
 0x1102

	)

591 
	#GL_SCISSOR_BOX
 0x0C10

	)

592 
	#GL_SCISSOR_TEST
 0x0C11

	)

595 
	#GL_MAP_COLOR
 0x0D10

	)

596 
	#GL_MAP_STENCIL
 0x0D11

	)

597 
	#GL_INDEX_SHIFT
 0x0D12

	)

598 
	#GL_INDEX_OFFSET
 0x0D13

	)

599 
	#GL_RED_SCALE
 0x0D14

	)

600 
	#GL_RED_BIAS
 0x0D15

	)

601 
	#GL_GREEN_SCALE
 0x0D18

	)

602 
	#GL_GREEN_BIAS
 0x0D19

	)

603 
	#GL_BLUE_SCALE
 0x0D1A

	)

604 
	#GL_BLUE_BIAS
 0x0D1B

	)

605 
	#GL_ALPHA_SCALE
 0x0D1C

	)

606 
	#GL_ALPHA_BIAS
 0x0D1D

	)

607 
	#GL_DEPTH_SCALE
 0x0D1E

	)

608 
	#GL_DEPTH_BIAS
 0x0D1F

	)

609 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

610 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

611 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

612 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

613 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

614 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

615 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

616 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

617 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

618 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

619 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

620 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

621 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

622 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

623 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

624 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

625 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

626 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

627 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

628 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

629 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

630 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

631 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

632 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

633 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

634 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

635 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

636 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

637 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

638 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

639 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

640 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

641 
	#GL_ZOOM_X
 0x0D16

	)

642 
	#GL_ZOOM_Y
 0x0D17

	)

645 
	#GL_TEXTURE_ENV
 0x2300

	)

646 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

647 
	#GL_TEXTURE_1D
 0x0DE0

	)

648 
	#GL_TEXTURE_2D
 0x0DE1

	)

649 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

650 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

651 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

652 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

653 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

654 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

655 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

656 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

657 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

658 
	#GL_TEXTURE_WIDTH
 0x1000

	)

659 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

660 
	#GL_TEXTURE_BORDER
 0x1005

	)

661 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

662 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

663 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

664 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

665 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

666 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

667 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

668 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

669 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

670 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

671 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

672 
	#GL_OBJECT_LINEAR
 0x2401

	)

673 
	#GL_OBJECT_PLANE
 0x2501

	)

674 
	#GL_EYE_LINEAR
 0x2400

	)

675 
	#GL_EYE_PLANE
 0x2502

	)

676 
	#GL_SPHERE_MAP
 0x2402

	)

677 
	#GL_DECAL
 0x2101

	)

678 
	#GL_MODULATE
 0x2100

	)

679 
	#GL_NEAREST
 0x2600

	)

680 
	#GL_REPEAT
 0x2901

	)

681 
	#GL_CLAMP
 0x2900

	)

682 
	#GL_S
 0x2000

	)

683 
	#GL_T
 0x2001

	)

684 
	#GL_R
 0x2002

	)

685 
	#GL_Q
 0x2003

	)

686 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

687 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

690 
	#GL_VENDOR
 0x1F00

	)

691 
	#GL_RENDERER
 0x1F01

	)

692 
	#GL_VERSION
 0x1F02

	)

693 
	#GL_EXTENSIONS
 0x1F03

	)

696 
	#GL_NO_ERROR
 0x0

	)

697 
	#GL_INVALID_ENUM
 0x0500

	)

698 
	#GL_INVALID_VALUE
 0x0501

	)

699 
	#GL_INVALID_OPERATION
 0x0502

	)

700 
	#GL_STACK_OVERFLOW
 0x0503

	)

701 
	#GL_STACK_UNDERFLOW
 0x0504

	)

702 
	#GL_OUT_OF_MEMORY
 0x0505

	)

705 
	#GL_CURRENT_BIT
 0x00000001

	)

706 
	#GL_POINT_BIT
 0x00000002

	)

707 
	#GL_LINE_BIT
 0x00000004

	)

708 
	#GL_POLYGON_BIT
 0x00000008

	)

709 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

710 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

711 
	#GL_LIGHTING_BIT
 0x00000040

	)

712 
	#GL_FOG_BIT
 0x00000080

	)

713 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

714 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

715 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

716 
	#GL_VIEWPORT_BIT
 0x00000800

	)

717 
	#GL_TRANSFORM_BIT
 0x00001000

	)

718 
	#GL_ENABLE_BIT
 0x00002000

	)

719 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

720 
	#GL_HINT_BIT
 0x00008000

	)

721 
	#GL_EVAL_BIT
 0x00010000

	)

722 
	#GL_LIST_BIT
 0x00020000

	)

723 
	#GL_TEXTURE_BIT
 0x00040000

	)

724 
	#GL_SCISSOR_BIT
 0x00080000

	)

725 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

729 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

730 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

731 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

732 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

733 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

734 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

735 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

736 
	#GL_ALPHA4
 0x803B

	)

737 
	#GL_ALPHA8
 0x803C

	)

738 
	#GL_ALPHA12
 0x803D

	)

739 
	#GL_ALPHA16
 0x803E

	)

740 
	#GL_LUMINANCE4
 0x803F

	)

741 
	#GL_LUMINANCE8
 0x8040

	)

742 
	#GL_LUMINANCE12
 0x8041

	)

743 
	#GL_LUMINANCE16
 0x8042

	)

744 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

745 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

746 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

747 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

748 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

749 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

750 
	#GL_INTENSITY
 0x8049

	)

751 
	#GL_INTENSITY4
 0x804A

	)

752 
	#GL_INTENSITY8
 0x804B

	)

753 
	#GL_INTENSITY12
 0x804C

	)

754 
	#GL_INTENSITY16
 0x804D

	)

755 
	#GL_R3_G3_B2
 0x2A10

	)

756 
	#GL_RGB4
 0x804F

	)

757 
	#GL_RGB5
 0x8050

	)

758 
	#GL_RGB8
 0x8051

	)

759 
	#GL_RGB10
 0x8052

	)

760 
	#GL_RGB12
 0x8053

	)

761 
	#GL_RGB16
 0x8054

	)

762 
	#GL_RGBA2
 0x8055

	)

763 
	#GL_RGBA4
 0x8056

	)

764 
	#GL_RGB5_A1
 0x8057

	)

765 
	#GL_RGBA8
 0x8058

	)

766 
	#GL_RGB10_A2
 0x8059

	)

767 
	#GL_RGBA12
 0x805A

	)

768 
	#GL_RGBA16
 0x805B

	)

769 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

770 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

771 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

772 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

780 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Index
–
GLÊﬂt
 
c
 );

782 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

784 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨
–
GLbôfõld
 
mask
 );

786 
GLAPI
 
GLAPIENTRY
 
	`glIndexMask
–
GLuöt
 
mask
 );

788 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

790 
GLAPI
 
GLAPIENTRY
 
	`glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

792 
GLAPI
 
GLAPIENTRY
 
	`glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

794 
GLAPI
 
GLAPIENTRY
 
	`glLogicOp
–
GLíum
 
›code
 );

796 
GLAPI
 
GLAPIENTRY
 
	`glCuŒFa˚
–
GLíum
 
mode
 );

798 
GLAPI
 
GLAPIENTRY
 
	`glFr⁄tFa˚
–
GLíum
 
mode
 );

800 
GLAPI
 
GLAPIENTRY
 
	`glPoötSize
–
GLÊﬂt
 
size
 );

802 
GLAPI
 
GLAPIENTRY
 
	`glLöeWidth
–
GLÊﬂt
 
width
 );

804 
GLAPI
 
GLAPIENTRY
 
	`glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

806 
GLAPI
 
GLAPIENTRY
 
	`glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

808 
GLAPI
 
GLAPIENTRY
 
	`glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

810 
GLAPI
 
GLAPIENTRY
 
	`glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

812 
GLAPI
 
GLAPIENTRY
 
	`glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

814 
GLAPI
 
GLAPIENTRY
 
	`glEdgeFœg
–
GLboﬁón
 
Êag
 );

816 
GLAPI
 
GLAPIENTRY
 
	`glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

818 
GLAPI
 
GLAPIENTRY
 
	`glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

820 
GLAPI
 
GLAPIENTRY
 
	`glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

822 
GLAPI
 
GLAPIENTRY
 
	`glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

824 
GLAPI
 
GLAPIENTRY
 
	`glDøwBuf„r
–
GLíum
 
mode
 );

826 
GLAPI
 
GLAPIENTRY
 
	`glRódBuf„r
–
GLíum
 
mode
 );

828 
GLAPI
 
GLAPIENTRY
 
	`glE«bÀ
–
GLíum
 
ˇp
 );

830 
GLAPI
 
GLAPIENTRY
 
	`glDißbÀ
–
GLíum
 
ˇp
 );

832 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glIsE«bÀd
–
GLíum
 
ˇp
 );

835 
GLAPI
 
GLAPIENTRY
 
	`glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

837 
GLAPI
 
GLAPIENTRY
 
	`glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

840 
GLAPI
 
GLAPIENTRY
 
	`glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

842 
GLAPI
 
GLAPIENTRY
 
	`glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

844 
GLAPI
 
GLAPIENTRY
 
	`glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

846 
GLAPI
 
GLAPIENTRY
 
	`glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

849 
GLAPI
 
GLAPIENTRY
 
	`glPushAârib
–
GLbôfõld
 
mask
 );

851 
GLAPI
 
GLAPIENTRY
 
	`glP›Aârib
( );

854 
GLAPI
 
GLAPIENTRY
 
	`glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

856 
GLAPI
 
GLAPIENTRY
 
	`glP›Clõ¡Aârib
( );

859 
GLAPI
 
GLöt
 
GLAPIENTRY
 
	`glRídîMode
–
GLíum
 
mode
 );

861 
GLAPI
 
GLíum
 
GLAPIENTRY
 
	`glGëEº‹
( );

863 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
	`glGëSåög
–
GLíum
 
«me
 );

865 
GLAPI
 
GLAPIENTRY
 
	`glFöish
( );

867 
GLAPI
 
GLAPIENTRY
 
	`glFlush
( );

869 
GLAPI
 
GLAPIENTRY
 
	`glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

876 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

878 
GLAPI
 
GLAPIENTRY
 
	`glDïthFunc
–
GLíum
 
func
 );

880 
GLAPI
 
GLAPIENTRY
 
	`glDïthMask
–
GLboﬁón
 
Êag
 );

882 
GLAPI
 
GLAPIENTRY
 
	`glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

889 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

891 
GLAPI
 
GLAPIENTRY
 
	`glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

898 
GLAPI
 
GLAPIENTRY
 
	`glM©rixMode
–
GLíum
 
mode
 );

900 
GLAPI
 
GLAPIENTRY
 
	`glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

901 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

902 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

904 
GLAPI
 
GLAPIENTRY
 
	`glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

905 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

906 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

908 
GLAPI
 
GLAPIENTRY
 
	`glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

909 
GLsizei
 
width
, GLsizeò
height
 );

911 
GLAPI
 
GLAPIENTRY
 
	`glPushM©rix
( );

913 
GLAPI
 
GLAPIENTRY
 
	`glP›M©rix
( );

915 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdIdítôy
( );

917 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

918 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

920 
GLAPI
 
GLAPIENTRY
 
	`glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

921 
GLAPI
 
GLAPIENTRY
 
	`glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

923 
GLAPI
 
GLAPIENTRY
 
	`glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

924 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

925 
GLAPI
 
GLAPIENTRY
 
	`glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

926 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

928 
GLAPI
 
GLAPIENTRY
 
	`glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

929 
GLAPI
 
GLAPIENTRY
 
	`glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

931 
GLAPI
 
GLAPIENTRY
 
	`glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

932 
GLAPI
 
GLAPIENTRY
 
	`glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

939 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glIsLi°
–
GLuöt
 
li°
 );

941 
GLAPI
 
GLAPIENTRY
 
	`glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

943 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
	`glGíLi°s
–
GLsizei
 
ønge
 );

945 
GLAPI
 
GLAPIENTRY
 
	`glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

947 
GLAPI
 
GLAPIENTRY
 
	`glEndLi°
( );

949 
GLAPI
 
GLAPIENTRY
 
	`glCÆlLi°
–
GLuöt
 
li°
 );

951 
GLAPI
 
GLAPIENTRY
 
	`glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

952 c⁄° 
GLvoid
 *
li°s
 );

954 
GLAPI
 
GLAPIENTRY
 
	`glLi°Ba£
–
GLuöt
 
ba£
 );

961 
GLAPI
 
GLAPIENTRY
 
	`glBegö
–
GLíum
 
mode
 );

963 
GLAPI
 
GLAPIENTRY
 
	`glEnd
( );

966 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

967 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

968 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

969 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

971 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

972 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

973 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

974 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

976 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

977 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

978 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

979 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

981 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

982 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

983 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

984 
GLAPI
 
GLAPIENTRY
 
	`glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

986 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

987 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

988 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

989 
GLAPI
 
GLAPIENTRY
 
	`glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

991 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

992 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

993 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

994 
GLAPI
 
GLAPIENTRY
 
	`glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

997 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

998 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

999 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

1000 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

1001 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

1003 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

1004 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1005 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1006 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

1007 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

1010 
GLAPI
 
GLAPIENTRY
 
	`glIndexd
–
GLdoubÀ
 
c
 );

1011 
GLAPI
 
GLAPIENTRY
 
	`glIndexf
–
GLÊﬂt
 
c
 );

1012 
GLAPI
 
GLAPIENTRY
 
	`glIndexi
–
GLöt
 
c
 );

1013 
GLAPI
 
GLAPIENTRY
 
	`glIndexs
–
GLsh‹t
 
c
 );

1014 
GLAPI
 
GLAPIENTRY
 
	`glIndexub
–
GLubyã
 
c
 );

1016 
GLAPI
 
GLAPIENTRY
 
	`glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

1017 
GLAPI
 
GLAPIENTRY
 
	`glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

1018 
GLAPI
 
GLAPIENTRY
 
	`glIndexiv
–c⁄° 
GLöt
 *
c
 );

1019 
GLAPI
 
GLAPIENTRY
 
	`glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

1020 
GLAPI
 
GLAPIENTRY
 
	`glIndexubv
–c⁄° 
GLubyã
 *
c
 );

1022 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

1023 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

1024 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

1025 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

1026 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

1027 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1028 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1029 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1031 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1032 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1033 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1034 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1035 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1036 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1037 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1038 
GLöt
 
blue
, GLöà
Æpha
 );

1039 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1040 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1041 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1042 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1043 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1044 
GLuöt
 
blue
, GLuöà
Æpha
 );

1045 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1046 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1049 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1050 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1051 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1052 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1053 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1054 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1055 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1056 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1058 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1059 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1060 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1063 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1064 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1065 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1068 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1069 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1070 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1i
–
GLöt
 
s
 );

1071 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1s
–
GLsh‹t
 
s
 );

1073 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1074 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1075 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1076 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1078 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1079 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1080 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1081 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1083 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1084 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1085 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1086 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1088 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1089 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1090 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1091 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1093 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1094 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1095 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1096 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1100 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1101 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1104 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1105 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1106 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1109 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1110 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1111 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1112 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1114 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1115 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1116 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1117 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1119 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1120 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1121 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1122 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1124 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1125 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1126 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1127 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1129 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1130 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1131 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1132 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1134 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1135 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1136 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1137 
GLAPI
 
GLAPIENTRY
 
	`glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1140 
GLAPI
 
GLAPIENTRY
 
	`glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1141 
GLAPI
 
GLAPIENTRY
 
	`glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1142 
GLAPI
 
GLAPIENTRY
 
	`glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1143 
GLAPI
 
GLAPIENTRY
 
	`glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1146 
GLAPI
 
GLAPIENTRY
 
	`glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1147 
GLAPI
 
GLAPIENTRY
 
	`glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1148 
GLAPI
 
GLAPIENTRY
 
	`glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1149 
GLAPI
 
GLAPIENTRY
 
	`glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1156 
GLAPI
 
GLAPIENTRY
 
	`glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1157 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1159 
GLAPI
 
GLAPIENTRY
 
	`glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1160 c⁄° 
GLvoid
 *
±r
 );

1162 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1163 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1165 
GLAPI
 
GLAPIENTRY
 
	`glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1166 c⁄° 
GLvoid
 *
±r
 );

1168 
GLAPI
 
GLAPIENTRY
 
	`glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1169 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1171 
GLAPI
 
GLAPIENTRY
 
	`glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1173 
GLAPI
 
GLAPIENTRY
 
	`glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1175 
GLAPI
 
GLAPIENTRY
 
	`glAºayEÀmít
–
GLöt
 
i
 );

1177 
GLAPI
 
GLAPIENTRY
 
	`glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1179 
GLAPI
 
GLAPIENTRY
 
	`glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1180 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1182 
GLAPI
 
GLAPIENTRY
 
	`glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1183 c⁄° 
GLvoid
 *
poöãr
 );

1189 
GLAPI
 
GLAPIENTRY
 
	`glShadeModñ
–
GLíum
 
mode
 );

1191 
GLAPI
 
GLAPIENTRY
 
	`glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1192 
GLAPI
 
GLAPIENTRY
 
	`glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1193 
GLAPI
 
GLAPIENTRY
 
	`glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1194 c⁄° 
GLÊﬂt
 *
∑øms
 );

1195 
GLAPI
 
GLAPIENTRY
 
	`glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1196 c⁄° 
GLöt
 *
∑øms
 );

1198 
GLAPI
 
GLAPIENTRY
 
	`glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1199 
GLÊﬂt
 *
∑øms
 );

1200 
GLAPI
 
GLAPIENTRY
 
	`glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1201 
GLöt
 *
∑øms
 );

1203 
GLAPI
 
GLAPIENTRY
 
	`glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1204 
GLAPI
 
GLAPIENTRY
 
	`glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1205 
GLAPI
 
GLAPIENTRY
 
	`glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1206 
GLAPI
 
GLAPIENTRY
 
	`glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1208 
GLAPI
 
GLAPIENTRY
 
	`glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1209 
GLAPI
 
GLAPIENTRY
 
	`glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1210 
GLAPI
 
GLAPIENTRY
 
	`glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1211 
GLAPI
 
GLAPIENTRY
 
	`glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1213 
GLAPI
 
GLAPIENTRY
 
	`glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1214 
GLAPI
 
GLAPIENTRY
 
	`glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1216 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1223 
GLAPI
 
GLAPIENTRY
 
	`glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1225 
GLAPI
 
GLAPIENTRY
 
	`glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1226 
GLAPI
 
GLAPIENTRY
 
	`glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1228 
GLAPI
 
GLAPIENTRY
 
	`glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1229 
GLAPI
 
GLAPIENTRY
 
	`glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1231 
GLAPI
 
GLAPIENTRY
 
	`glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1232 c⁄° 
GLÊﬂt
 *
vÆues
 );

1233 
GLAPI
 
GLAPIENTRY
 
	`glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1234 c⁄° 
GLuöt
 *
vÆues
 );

1235 
GLAPI
 
GLAPIENTRY
 
	`glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1236 c⁄° 
GLush‹t
 *
vÆues
 );

1238 
GLAPI
 
GLAPIENTRY
 
	`glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1239 
GLAPI
 
GLAPIENTRY
 
	`glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1240 
GLAPI
 
GLAPIENTRY
 
	`glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1242 
GLAPI
 
GLAPIENTRY
 
	`glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1243 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1244 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1245 c⁄° 
GLubyã
 *
bôm≠
 );

1247 
GLAPI
 
GLAPIENTRY
 
	`glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1248 
GLsizei
 
width
, GLsizeò
height
,

1249 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1250 
GLvoid
 *
pixñs
 );

1252 
GLAPI
 
GLAPIENTRY
 
	`glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1253 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1254 c⁄° 
GLvoid
 *
pixñs
 );

1256 
GLAPI
 
GLAPIENTRY
 
	`glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1257 
GLsizei
 
width
, GLsizeò
height
,

1258 
GLíum
 
ty≥
 );

1264 
GLAPI
 
GLAPIENTRY
 
	`glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1266 
GLAPI
 
GLAPIENTRY
 
	`glSãncûMask
–
GLuöt
 
mask
 );

1268 
GLAPI
 
GLAPIENTRY
 
	`glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1270 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨Sãncû
–
GLöt
 
s
 );

1278 
GLAPI
 
GLAPIENTRY
 
	`glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1279 
GLAPI
 
GLAPIENTRY
 
	`glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1280 
GLAPI
 
GLAPIENTRY
 
	`glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1282 
GLAPI
 
GLAPIENTRY
 
	`glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1283 
GLAPI
 
GLAPIENTRY
 
	`glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1284 
GLAPI
 
GLAPIENTRY
 
	`glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1286 
GLAPI
 
GLAPIENTRY
 
	`glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1287 
GLAPI
 
GLAPIENTRY
 
	`glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1288 
GLAPI
 
GLAPIENTRY
 
	`glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1291 
GLAPI
 
GLAPIENTRY
 
	`glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1292 
GLAPI
 
GLAPIENTRY
 
	`glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1294 
GLAPI
 
GLAPIENTRY
 
	`glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1295 
GLAPI
 
GLAPIENTRY
 
	`glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1297 
GLAPI
 
GLAPIENTRY
 
	`glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1298 
GLAPI
 
GLAPIENTRY
 
	`glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1301 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1302 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1304 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1305 c⁄° 
GLÊﬂt
 *
∑øms
 );

1306 
GLAPI
 
GLAPIENTRY
 
	`glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1307 c⁄° 
GLöt
 *
∑øms
 );

1309 
GLAPI
 
GLAPIENTRY
 
	`glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1310 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1311 
GLAPI
 
GLAPIENTRY
 
	`glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1312 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1314 
GLAPI
 
GLAPIENTRY
 
	`glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1315 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1316 
GLAPI
 
GLAPIENTRY
 
	`glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1317 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1320 
GLAPI
 
GLAPIENTRY
 
	`glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1321 
GLöt
 
öã∫ÆF‹m©
,

1322 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1323 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1324 c⁄° 
GLvoid
 *
pixñs
 );

1326 
GLAPI
 
GLAPIENTRY
 
	`glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1327 
GLöt
 
öã∫ÆF‹m©
,

1328 
GLsizei
 
width
, GLsizeò
height
,

1329 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1330 c⁄° 
GLvoid
 *
pixñs
 );

1332 
GLAPI
 
GLAPIENTRY
 
	`glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1333 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1334 
GLvoid
 *
pixñs
 );

1339 
GLAPI
 
GLAPIENTRY
 
	`glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1341 
GLAPI
 
GLAPIENTRY
 
	`glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1343 
GLAPI
 
GLAPIENTRY
 
	`glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1345 
GLAPI
 
GLAPIENTRY
 
	`glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1346 c⁄° 
GLuöt
 *
ãxtuªs
,

1347 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1349 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glAªTextuªsResidít
–
GLsizei
 
n
,

1350 c⁄° 
GLuöt
 *
ãxtuªs
,

1351 
GLboﬁón
 *
ªsidí˚s
 );

1353 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
	`glIsTextuª
–
GLuöt
 
ãxtuª
 );

1356 
GLAPI
 
GLAPIENTRY
 
	`glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1357 
GLöt
 
xoff£t
,

1358 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1359 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1362 
GLAPI
 
GLAPIENTRY
 
	`glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1363 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1364 
GLsizei
 
width
, GLsizeò
height
,

1365 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1366 c⁄° 
GLvoid
 *
pixñs
 );

1369 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1370 
GLíum
 
öã∫Æf‹m©
,

1371 
GLöt
 
x
, GLöà
y
,

1372 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1375 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1376 
GLíum
 
öã∫Æf‹m©
,

1377 
GLöt
 
x
, GLöà
y
,

1378 
GLsizei
 
width
, GLsizeò
height
,

1379 
GLöt
 
b‹dî
 );

1382 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1383 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1384 
GLsizei
 
width
 );

1387 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1388 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1389 
GLöt
 
x
, GLöà
y
,

1390 
GLsizei
 
width
, GLsizeò
height
 );

1397 
GLAPI
 
GLAPIENTRY
 
	`glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1398 
GLöt
 
°ride
,

1399 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1400 
GLAPI
 
GLAPIENTRY
 
	`glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1401 
GLöt
 
°ride
,

1402 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1404 
GLAPI
 
GLAPIENTRY
 
	`glM≠2d
–
GLíum
 
èrgë
,

1405 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1406 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1407 c⁄° 
GLdoubÀ
 *
poöts
 );

1408 
GLAPI
 
GLAPIENTRY
 
	`glM≠2f
–
GLíum
 
èrgë
,

1409 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1410 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1411 c⁄° 
GLÊﬂt
 *
poöts
 );

1413 
GLAPI
 
GLAPIENTRY
 
	`glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1414 
GLAPI
 
GLAPIENTRY
 
	`glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1415 
GLAPI
 
GLAPIENTRY
 
	`glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1417 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1418 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1420 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1421 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1423 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1424 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1426 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1427 
GLAPI
 
GLAPIENTRY
 
	`glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1429 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1430 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1432 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1433 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1434 
GLAPI
 
GLAPIENTRY
 
	`glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1435 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1437 
GLAPI
 
GLAPIENTRY
 
	`glEvÆPoöt1
–
GLöt
 
i
 );

1439 
GLAPI
 
GLAPIENTRY
 
	`glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1441 
GLAPI
 
GLAPIENTRY
 
	`glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1443 
GLAPI
 
GLAPIENTRY
 
	`glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1450 
GLAPI
 
GLAPIENTRY
 
	`glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1452 
GLAPI
 
GLAPIENTRY
 
	`glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1454 
GLAPI
 
GLAPIENTRY
 
	`glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1456 
GLAPI
 
GLAPIENTRY
 
	`glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1463 
GLAPI
 
GLAPIENTRY
 
	`glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1465 
GLAPI
 
GLAPIENTRY
 
	`glPassThrough
–
GLÊﬂt
 
tokí
 );

1467 
GLAPI
 
GLAPIENTRY
 
	`glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1469 
GLAPI
 
GLAPIENTRY
 
	`glInôNames
( );

1471 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdName
–
GLuöt
 
«me
 );

1473 
GLAPI
 
GLAPIENTRY
 
	`glPushName
–
GLuöt
 
«me
 );

1475 
GLAPI
 
GLAPIENTRY
 
	`glP›Name
( );

1483 
	#GL_RESCALE_NORMAL
 0x803A

	)

1484 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1485 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1486 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1487 
	#GL_BGR
 0x80E0

	)

1488 
	#GL_BGRA
 0x80E1

	)

1489 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1490 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1491 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1492 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1493 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1494 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1495 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1496 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1497 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1498 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1499 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1500 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1501 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1502 
	#GL_SINGLE_COLOR
 0x81F9

	)

1503 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1504 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1505 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1506 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1507 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1508 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1509 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1510 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1511 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1512 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1513 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1514 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1515 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1516 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1517 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1518 
	#GL_TEXTURE_3D
 0x806F

	)

1519 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1520 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1521 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1522 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1523 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1525 
GLAPI
 
GLAPIENTRY
 
	`glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1526 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1528 
GLAPI
 
GLAPIENTRY
 
	`glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1529 
GLöt
 
öã∫ÆF‹m©
,

1530 
GLsizei
 
width
, GLsizeò
height
,

1531 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1532 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1533 c⁄° 
GLvoid
 *
pixñs
 );

1535 
GLAPI
 
GLAPIENTRY
 
	`glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1536 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1537 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1538 
GLsizei
 
height
, GLsizeò
dïth
,

1539 
GLíum
 
f‹m©
,

1540 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1542 
GLAPI
 
GLAPIENTRY
 
	`glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1543 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1544 
GLöt
 
zoff£t
, GLöà
x
,

1545 
GLöt
 
y
, 
GLsizei
 
width
,

1546 
GLsizei
 
height
 );

1548 (
	tAPIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1549 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1550 (
	tAPIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1551 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1558 
	#GL_CONSTANT_COLOR
 0x8001

	)

1559 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1560 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1561 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1562 
	#GL_COLOR_TABLE
 0x80D0

	)

1563 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1564 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1565 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1566 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1567 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1568 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1569 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1570 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1571 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1572 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1573 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1574 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1575 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1576 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1577 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1578 
	#GL_CONVOLUTION_1D
 0x8010

	)

1579 
	#GL_CONVOLUTION_2D
 0x8011

	)

1580 
	#GL_SEPARABLE_2D
 0x8012

	)

1581 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1582 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1583 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1584 
	#GL_REDUCE
 0x8016

	)

1585 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1586 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1587 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1588 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1589 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1590 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1591 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1592 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1593 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1594 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1595 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1596 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1597 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1598 
	#GL_CONSTANT_BORDER
 0x8151

	)

1599 
	#GL_REPLICATE_BORDER
 0x8153

	)

1600 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1601 
	#GL_COLOR_MATRIX
 0x80B1

	)

1602 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1603 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1604 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1605 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1606 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1607 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1608 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1609 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1610 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1611 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1612 
	#GL_HISTOGRAM
 0x8024

	)

1613 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1614 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1615 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1616 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1617 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1618 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1619 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1620 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1621 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1622 
	#GL_MINMAX
 0x802E

	)

1623 
	#GL_MINMAX_FORMAT
 0x802F

	)

1624 
	#GL_MINMAX_SINK
 0x8030

	)

1625 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1626 
	#GL_BLEND_EQUATION
 0x8009

	)

1627 
	#GL_MIN
 0x8007

	)

1628 
	#GL_MAX
 0x8008

	)

1629 
	#GL_FUNC_ADD
 0x8006

	)

1630 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1631 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1632 
	#GL_BLEND_COLOR
 0x8005

	)

1635 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1636 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1637 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1639 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1640 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1641 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1642 c⁄° 
GLvoid
 *
d©a
 );

1644 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1645 c⁄° 
GLöt
 *
∑øms
);

1647 
GLAPI
 
GLAPIENTRY
 
	`glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1648 c⁄° 
GLÊﬂt
 *
∑øms
);

1650 
GLAPI
 
GLAPIENTRY
 
	`glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1651 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1653 
GLAPI
 
GLAPIENTRY
 
	`glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1654 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1656 
GLAPI
 
GLAPIENTRY
 
	`glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1657 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1659 
GLAPI
 
GLAPIENTRY
 
	`glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1660 
GLÊﬂt
 *
∑øms
 );

1662 
GLAPI
 
GLAPIENTRY
 
	`glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1663 
GLöt
 *
∑øms
 );

1665 
GLAPI
 
GLAPIENTRY
 
	`glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1667 
GLAPI
 
GLAPIENTRY
 
	`glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1668 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1670 
GLAPI
 
GLAPIENTRY
 
	`glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1671 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1673 
GLAPI
 
GLAPIENTRY
 
	`glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1675 
GLAPI
 
GLAPIENTRY
 
	`glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1676 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1677 
GLvoid
 *
vÆues
 );

1679 
GLAPI
 
GLAPIENTRY
 
	`glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1680 
GLÊﬂt
 *
∑øms
 );

1682 
GLAPI
 
GLAPIENTRY
 
	`glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1683 
GLöt
 *
∑øms
 );

1685 
GLAPI
 
GLAPIENTRY
 
	`glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1686 
GLboﬁón
 
sök
 );

1688 
GLAPI
 
GLAPIENTRY
 
	`glRe£tMömax
–
GLíum
 
èrgë
 );

1690 
GLAPI
 
GLAPIENTRY
 
	`glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1691 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1692 
GLvoid
 *
vÆues
 );

1694 
GLAPI
 
GLAPIENTRY
 
	`glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1695 
GLÊﬂt
 *
∑øms
 );

1697 
GLAPI
 
GLAPIENTRY
 
	`glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1698 
GLöt
 *
∑øms
 );

1700 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1701 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1702 c⁄° 
GLvoid
 *
image
 );

1704 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1705 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1706 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1708 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1709 
GLÊﬂt
 
∑øms
 );

1711 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1712 c⁄° 
GLÊﬂt
 *
∑øms
 );

1714 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1715 
GLöt
 
∑øms
 );

1717 
GLAPI
 
GLAPIENTRY
 
	`glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1718 c⁄° 
GLöt
 *
∑øms
 );

1720 
GLAPI
 
GLAPIENTRY
 
	`glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1721 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1723 
GLAPI
 
GLAPIENTRY
 
	`glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1724 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1725 
GLsizei
 
height
);

1727 
GLAPI
 
GLAPIENTRY
 
	`glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1728 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1730 
GLAPI
 
GLAPIENTRY
 
	`glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1731 
GLÊﬂt
 *
∑øms
 );

1733 
GLAPI
 
GLAPIENTRY
 
	`glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1734 
GLöt
 *
∑øms
 );

1736 
GLAPI
 
GLAPIENTRY
 
	`glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1737 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1738 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1740 
GLAPI
 
GLAPIENTRY
 
	`glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1741 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1743 (
	tAPIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1744 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1753 
	#GL_TEXTURE0
 0x84C0

	)

1754 
	#GL_TEXTURE1
 0x84C1

	)

1755 
	#GL_TEXTURE2
 0x84C2

	)

1756 
	#GL_TEXTURE3
 0x84C3

	)

1757 
	#GL_TEXTURE4
 0x84C4

	)

1758 
	#GL_TEXTURE5
 0x84C5

	)

1759 
	#GL_TEXTURE6
 0x84C6

	)

1760 
	#GL_TEXTURE7
 0x84C7

	)

1761 
	#GL_TEXTURE8
 0x84C8

	)

1762 
	#GL_TEXTURE9
 0x84C9

	)

1763 
	#GL_TEXTURE10
 0x84CA

	)

1764 
	#GL_TEXTURE11
 0x84CB

	)

1765 
	#GL_TEXTURE12
 0x84CC

	)

1766 
	#GL_TEXTURE13
 0x84CD

	)

1767 
	#GL_TEXTURE14
 0x84CE

	)

1768 
	#GL_TEXTURE15
 0x84CF

	)

1769 
	#GL_TEXTURE16
 0x84D0

	)

1770 
	#GL_TEXTURE17
 0x84D1

	)

1771 
	#GL_TEXTURE18
 0x84D2

	)

1772 
	#GL_TEXTURE19
 0x84D3

	)

1773 
	#GL_TEXTURE20
 0x84D4

	)

1774 
	#GL_TEXTURE21
 0x84D5

	)

1775 
	#GL_TEXTURE22
 0x84D6

	)

1776 
	#GL_TEXTURE23
 0x84D7

	)

1777 
	#GL_TEXTURE24
 0x84D8

	)

1778 
	#GL_TEXTURE25
 0x84D9

	)

1779 
	#GL_TEXTURE26
 0x84DA

	)

1780 
	#GL_TEXTURE27
 0x84DB

	)

1781 
	#GL_TEXTURE28
 0x84DC

	)

1782 
	#GL_TEXTURE29
 0x84DD

	)

1783 
	#GL_TEXTURE30
 0x84DE

	)

1784 
	#GL_TEXTURE31
 0x84DF

	)

1785 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1786 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1787 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1789 
	#GL_NORMAL_MAP
 0x8511

	)

1790 
	#GL_REFLECTION_MAP
 0x8512

	)

1791 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1792 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1793 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1794 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1795 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1796 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1797 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1798 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1799 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1800 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1802 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1803 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1804 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1805 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1806 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1807 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1808 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1809 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1810 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1811 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1812 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1814 
	#GL_MULTISAMPLE
 0x809D

	)

1815 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1816 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1817 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1818 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1819 
	#GL_SAMPLES
 0x80A9

	)

1820 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1821 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1822 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1824 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1825 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1826 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1827 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1829 
	#GL_COMBINE
 0x8570

	)

1830 
	#GL_COMBINE_RGB
 0x8571

	)

1831 
	#GL_COMBINE_ALPHA
 0x8572

	)

1832 
	#GL_SOURCE0_RGB
 0x8580

	)

1833 
	#GL_SOURCE1_RGB
 0x8581

	)

1834 
	#GL_SOURCE2_RGB
 0x8582

	)

1835 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1836 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1837 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1838 
	#GL_OPERAND0_RGB
 0x8590

	)

1839 
	#GL_OPERAND1_RGB
 0x8591

	)

1840 
	#GL_OPERAND2_RGB
 0x8592

	)

1841 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1842 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1843 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1844 
	#GL_RGB_SCALE
 0x8573

	)

1845 
	#GL_ADD_SIGNED
 0x8574

	)

1846 
	#GL_INTERPOLATE
 0x8575

	)

1847 
	#GL_SUBTRACT
 0x84E7

	)

1848 
	#GL_CONSTANT
 0x8576

	)

1849 
	#GL_PRIMARY_COLOR
 0x8577

	)

1850 
	#GL_PREVIOUS
 0x8578

	)

1852 
	#GL_DOT3_RGB
 0x86AE

	)

1853 
	#GL_DOT3_RGBA
 0x86AF

	)

1855 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1857 
GLAPI
 
GLAPIENTRY
 
	`glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1859 
GLAPI
 
GLAPIENTRY
 
	`glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1861 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1863 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1865 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1867 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1869 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1871 
GLAPI
 
GLAPIENTRY
 
	`glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1873 
GLAPI
 
GLAPIENTRY
 
	`glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1875 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1877 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1879 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1881 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1883 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1885 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1887 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1889 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1891 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1893 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1895 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1897 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1899 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1901 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1903 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1905 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1907 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1909 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1911 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1913 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1915 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1917 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1919 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1921 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1923 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1925 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1927 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1929 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1931 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1933 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1935 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1937 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1940 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1942 
GLAPI
 
GLAPIENTRY
 
	`glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1944 
GLAPI
 
GLAPIENTRY
 
	`glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1946 
GLAPI
 
GLAPIENTRY
 
	`glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1948 
GLAPI
 
GLAPIENTRY
 
	`glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1951 (
	tAPIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1952 (
	tAPIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1953 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1954 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1955 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1956 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1957 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1958 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1959 (
	tAPIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1966 #i‚de‡
GL_ARB_mu…ôextuª


1967 
	#GL_ARB_mu…ôextuª
 1

	)

1969 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1970 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1971 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1972 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1973 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1974 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1975 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1976 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1977 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1978 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1979 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1980 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1981 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1982 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1983 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1984 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1985 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1986 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1987 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1988 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1989 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1990 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1991 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1992 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1993 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1994 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1995 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1996 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1997 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1998 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1999 
	#GL_TEXTURE30_ARB
 0x84DE

	)

2000 
	#GL_TEXTURE31_ARB
 0x84DF

	)

2001 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

2002 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

2003 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

2005 
GLAPI
 
GLAPIENTRY
 
	`glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2006 
GLAPI
 
GLAPIENTRY
 
	`glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2007 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

2008 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2009 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

2010 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2011 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

2012 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2013 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

2014 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2015 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

2016 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2017 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

2018 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2019 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

2020 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2021 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

2022 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2023 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

2024 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2025 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

2026 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2027 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

2028 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2029 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2030 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2031 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2032 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2033 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2034 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2035 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2036 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2037 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2038 
GLAPI
 
GLAPIENTRY
 
	`glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2040 (
	tAPIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2041 (
	tAPIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2042 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2043 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2044 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2045 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2046 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2047 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2048 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2049 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2050 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2051 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2052 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2053 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2054 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2055 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2056 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2057 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2058 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2059 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2060 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2061 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2062 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2063 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2064 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2065 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2066 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2067 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2068 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2069 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2070 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2071 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2072 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2073 (
	tAPIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2083 #i‡
	`deföed
(
GL_GLEXT_LEGACY
)

2089 
	~<GL/gÀxt.h
>

2095 #i‡
GL_ARB_shadî_obje˘s


2097 #i‚de‡
GL_MESA_shadî_debug


2098 
	#GL_MESA_shadî_debug
 1

	)

2100 
	#GL_DEBUG_OBJECT_MESA
 0x8759

	)

2101 
	#GL_DEBUG_PRINT_MESA
 0x875A

	)

2102 
	#GL_DEBUG_ASSERT_MESA
 0x875B

	)

2104 
GLAPI
 
GLh™dÀARB
 
GLAPIENTRY
 
	`glCª©eDebugObje˘MESA
 ();

2105 
GLAPI
 
GLAPIENTRY
 
	`glCÀ¨DebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2106 
GLAPI
 
GLAPIENTRY
 
	`glGëDebugLogMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
, 
GLsizei
 
maxLígth
,

2107 
GLsizei
 *
Àngth
, 
GLch¨ARB
 *
debugLog
);

2108 
GLAPI
 
GLsizei
 
GLAPIENTRY
 
	`glGëDebugLogLígthMESA
 (
GLh™dÀARB
 
obj
, 
GLíum
 
logTy≥
, GLíum 
shadîTy≥
);

2119 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2120 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2122 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2123 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2124 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2125 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2126 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2131 #i‚de‡
GL_MESA_¥ogøm_debug


2132 
	#GL_MESA_¥ogøm_debug
 1

	)

2134 
	#GL_FRAGMENT_PROGRAM_POSITION_MESA
 0x8bb0

	)

2135 
	#GL_FRAGMENT_PROGRAM_CALLBACK_MESA
 0x8bb1

	)

2136 
	#GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb2

	)

2137 
	#GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA
 0x8bb3

	)

2138 
	#GL_VERTEX_PROGRAM_POSITION_MESA
 0x8bb4

	)

2139 
	#GL_VERTEX_PROGRAM_CALLBACK_MESA
 0x8bb5

	)

2140 
	#GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA
 0x8bb6

	)

2141 
	#GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA
 0x8bb7

	)

2143 (*
	tGL¥ogømˇŒbackMESA
)(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 *
	td©a
);

2145 
GLAPI
 
GLAPIENTRY
 
	`glProgømCÆlbackMESA
(
GLíum
 
èrgë
, 
GL¥ogømˇŒbackMESA
 
ˇŒback
, 
GLvoid
 *
d©a
);

2147 
GLAPI
 
GLAPIENTRY
 
	`glGëProgømRegi°îfvMESA
(
GLíum
 
èrgë
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
v
);

2152 #i‚de‡
GL_MESA_ãxtuª_¨øy


2153 
	#GL_MESA_ãxtuª_¨øy
 1

	)

2157 #i‚de‡
GL_EXT_ãxtuª_¨øy


2159 #ifde‡
GL_GLEXT_PROTOTYPES


2160 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuªLayîEXT
(
GLíum
 
èrgë
,

2161 
GLíum
 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2168 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
,

2169 
	tGLíum
 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2172 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

2173 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

2174 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

2175 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

2176 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

2177 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

2178 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

2179 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

2185 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2186 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2188 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2190 
GLAPI
 
GLAPIENTRY
 
	`glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2191 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2208 #i‡
	`deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2209 #¥agm®
exp‹t
 
off


2212 #i‡
	`deföed
(
macötosh
Ë&& 
PRAGMA_IMPORT_SUPPORTED


2213 #¥agm®
imp‹t
 
off


2220 #ifde‡
__˝lu•lus


2221 
	}
}

	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/usr/include/GL/glut.h

1 #i‚de‡ 
__GLUT_H__


2 
	#__GLUT_H__


	)

17 
	~"‰ìglut_°d.h
"

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/menu.h

35 #i‚de‡
ETI_MENU


36 
	#ETI_MENU


	)

38 #ifde‡
AMIGA


39 
	#TEXT
 
TEXT_ncur£s


	)

42 
	~<cur£s.h
>

43 
	~<ëi.h
>

45 #ifde‡
__˝lu•lus


49 
	tMíu_O±i⁄s
;

50 
	tIãm_O±i⁄s
;

53 
	#O_ONEVALUE
 (0x01)

	)

54 
	#O_SHOWDESC
 (0x02)

	)

55 
	#O_ROWMAJOR
 (0x04)

	)

56 
	#O_IGNORECASE
 (0x08)

	)

57 
	#O_SHOWMATCH
 (0x10)

	)

58 
	#O_NONCYCLIC
 (0x20)

	)

61 
	#O_SELECTABLE
 (0x01)

	)

65 c⁄° * 
°r
;

66 
Àngth
;

67 } 
	tTEXT
;

69 
	sègITEM


71 
TEXT
 
«me
;

72 
TEXT
 
des¸ùti⁄
;

73 
ègMENU
 *
imíu
;

74 *
u£Ωå
;

75 
Iãm_O±i⁄s
 
›t
;

76 
ödex
;

77 
y
;

78 
x
;

79 
boﬁ
 
vÆue
;

81 
ègITEM
 *
À·
;

82 
ègITEM
 *
right
;

83 
ègITEM
 *
up
;

84 
ègITEM
 *
down
;

86 } 
	tITEM
;

88 (*
Míu_Hook
)(
	tègMENU
 *);

90 
	sègMENU


92 
height
;

93 
width
;

94 
rows
;

95 
cﬁs
;

96 
‰ows
;

97 
fcﬁs
;

98 
¨ows
;

99 
«mñí
;

100 
des˛í
;

101 
m¨kÀn
;

102 
ôemÀn
;

103 
•c_desc
;

104 
•c_cﬁs
;

105 
•c_rows
;

106 *
∑âîn
;

107 
pödex
;

108 
WINDOW
 *
wö
;

109 
WINDOW
 *
sub
;

110 
WINDOW
 *
u£rwö
;

111 
WINDOW
 *
u£rsub
;

112 
ITEM
 **
ôems
;

113 
nôems
;

114 
ITEM
 *
curôem
;

115 
t›row
;

116 
chty≥
 
f‹e
;

117 
chty≥
 
back
;

118 
chty≥
 
gªy
;

119 
∑d
;

121 
Míu_Hook
 
míuöô
;

122 
Míu_Hook
 
míuãrm
;

123 
Míu_Hook
 
ôemöô
;

124 
Míu_Hook
 
ôemãrm
;

126 *
u£Ωå
;

127 *
m¨k
;

129 
Míu_O±i⁄s
 
›t
;

130 
°©us
;

132 } 
	tMENU
;

137 
	#REQ_LEFT_ITEM
 (
KEY_MAX
 + 1)

	)

138 
	#REQ_RIGHT_ITEM
 (
KEY_MAX
 + 2)

	)

139 
	#REQ_UP_ITEM
 (
KEY_MAX
 + 3)

	)

140 
	#REQ_DOWN_ITEM
 (
KEY_MAX
 + 4)

	)

141 
	#REQ_SCR_ULINE
 (
KEY_MAX
 + 5)

	)

142 
	#REQ_SCR_DLINE
 (
KEY_MAX
 + 6)

	)

143 
	#REQ_SCR_DPAGE
 (
KEY_MAX
 + 7)

	)

144 
	#REQ_SCR_UPAGE
 (
KEY_MAX
 + 8)

	)

145 
	#REQ_FIRST_ITEM
 (
KEY_MAX
 + 9)

	)

146 
	#REQ_LAST_ITEM
 (
KEY_MAX
 + 10)

	)

147 
	#REQ_NEXT_ITEM
 (
KEY_MAX
 + 11)

	)

148 
	#REQ_PREV_ITEM
 (
KEY_MAX
 + 12)

	)

149 
	#REQ_TOGGLE_ITEM
 (
KEY_MAX
 + 13)

	)

150 
	#REQ_CLEAR_PATTERN
 (
KEY_MAX
 + 14)

	)

151 
	#REQ_BACK_PATTERN
 (
KEY_MAX
 + 15)

	)

152 
	#REQ_NEXT_MATCH
 (
KEY_MAX
 + 16)

	)

153 
	#REQ_PREV_MATCH
 (
KEY_MAX
 + 17)

	)

155 
	#MIN_MENU_COMMAND
 (
KEY_MAX
 + 1)

	)

156 
	#MAX_MENU_COMMAND
 (
KEY_MAX
 + 17)

	)

162 #i‡
deföed
(
MAX_COMMAND
)

163 #i‡(
MAX_MENU_COMMAND
 > 
MAX_COMMAND
)

164 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_MENU_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


165 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

166 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

169 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

175 
NCURSES_EXPORT
(
ITEM
 **Ë
míu_ôems
 (c⁄° 
MENU
 *);

176 
NCURSES_EXPORT
(
ITEM
 *Ë
cuºít_ôem
 (c⁄° 
MENU
 *);

177 
NCURSES_EXPORT
(
ITEM
 *Ë
√w_ôem
 (const *,const *);

179 
NCURSES_EXPORT
(
MENU
 *Ë
√w_míu
 (
ITEM
 **);

181 
NCURSES_EXPORT
(
Iãm_O±i⁄s
Ë
ôem_›ts
 (c⁄° 
ITEM
 *);

182 
NCURSES_EXPORT
(
Míu_O±i⁄s
Ë
míu_›ts
 (c⁄° 
MENU
 *);

184 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_öô
 (c⁄° 
MENU
 *);

185 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_ãrm
 (c⁄° 
MENU
 *);

186 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_öô
 (c⁄° 
MENU
 *);

187 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_ãrm
 (c⁄° 
MENU
 *);

189 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_sub
 (c⁄° 
MENU
 *);

190 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_wö
 (c⁄° 
MENU
 *);

192 
NCURSES_EXPORT
(c⁄° *Ë
ôem_des¸ùti⁄
 (c⁄° 
ITEM
 *);

193 
NCURSES_EXPORT
(c⁄° *Ë
ôem_«me
 (c⁄° 
ITEM
 *);

194 
NCURSES_EXPORT
(c⁄° *Ë
míu_m¨k
 (c⁄° 
MENU
 *);

195 
NCURSES_EXPORT
(c⁄° *Ë
míu_ªque°_«me
 ();

197 
NCURSES_EXPORT
(*Ë
míu_∑âîn
 (c⁄° 
MENU
 *);

199 
NCURSES_EXPORT
(*Ë
míu_u£Ωå
 (c⁄° 
MENU
 *);

200 
NCURSES_EXPORT
(*Ë
ôem_u£Ωå
 (c⁄° 
ITEM
 *);

202 
NCURSES_EXPORT
(
chty≥
Ë
míu_back
 (c⁄° 
MENU
 *);

203 
NCURSES_EXPORT
(
chty≥
Ë
míu_f‹e
 (c⁄° 
MENU
 *);

204 
NCURSES_EXPORT
(
chty≥
Ë
míu_gªy
 (c⁄° 
MENU
 *);

206 
NCURSES_EXPORT
(Ë
‰ì_ôem
 (
ITEM
 *);

207 
NCURSES_EXPORT
(Ë
‰ì_míu
 (
MENU
 *);

208 
NCURSES_EXPORT
(Ë
ôem_cou¡
 (c⁄° 
MENU
 *);

209 
NCURSES_EXPORT
(Ë
ôem_ödex
 (c⁄° 
ITEM
 *);

210 
NCURSES_EXPORT
(Ë
ôem_›ts_off
 (
ITEM
 *,
Iãm_O±i⁄s
);

211 
NCURSES_EXPORT
(Ë
ôem_›ts_⁄
 (
ITEM
 *,
Iãm_O±i⁄s
);

212 
NCURSES_EXPORT
(Ë
míu_drivî
 (
MENU
 *,);

213 
NCURSES_EXPORT
(Ë
míu_›ts_off
 (
MENU
 *,
Míu_O±i⁄s
);

214 
NCURSES_EXPORT
(Ë
míu_›ts_⁄
 (
MENU
 *,
Míu_O±i⁄s
);

215 
NCURSES_EXPORT
(Ë
míu_∑d
 (c⁄° 
MENU
 *);

216 
NCURSES_EXPORT
(Ë
pos_míu_curs‹
 (c⁄° 
MENU
 *);

217 
NCURSES_EXPORT
(Ë
po°_míu
 (
MENU
 *);

218 
NCURSES_EXPORT
(Ë
sˇÀ_míu
 (c⁄° 
MENU
 *,*,*);

219 
NCURSES_EXPORT
(Ë
£t_cuºít_ôem
 (
MENU
 *
míu
,
ITEM
 *
ôem
);

220 
NCURSES_EXPORT
(Ë
£t_ôem_öô
 (
MENU
 *, 
Míu_Hook
);

221 
NCURSES_EXPORT
(Ë
£t_ôem_›ts
 (
ITEM
 *,
Iãm_O±i⁄s
);

222 
NCURSES_EXPORT
(Ë
£t_ôem_ãrm
 (
MENU
 *, 
Míu_Hook
);

223 
NCURSES_EXPORT
(Ë
£t_ôem_u£Ωå
 (
ITEM
 *, *);

224 
NCURSES_EXPORT
(Ë
£t_ôem_vÆue
 (
ITEM
 *,
boﬁ
);

225 
NCURSES_EXPORT
(Ë
£t_míu_back
 (
MENU
 *,
chty≥
);

226 
NCURSES_EXPORT
(Ë
£t_míu_f‹e
 (
MENU
 *,
chty≥
);

227 
NCURSES_EXPORT
(Ë
£t_míu_f‹m©
 (
MENU
 *,,);

228 
NCURSES_EXPORT
(Ë
£t_míu_gªy
 (
MENU
 *,
chty≥
);

229 
NCURSES_EXPORT
(Ë
£t_míu_öô
 (
MENU
 *, 
Míu_Hook
);

230 
NCURSES_EXPORT
(Ë
£t_míu_ôems
 (
MENU
 *,
ITEM
 **);

231 
NCURSES_EXPORT
(Ë
£t_míu_m¨k
 (
MENU
 *, const *);

232 
NCURSES_EXPORT
(Ë
£t_míu_›ts
 (
MENU
 *,
Míu_O±i⁄s
);

233 
NCURSES_EXPORT
(Ë
£t_míu_∑d
 (
MENU
 *,);

234 
NCURSES_EXPORT
(Ë
£t_míu_∑âîn
 (
MENU
 *,const *);

235 
NCURSES_EXPORT
(Ë
£t_míu_sub
 (
MENU
 *,
WINDOW
 *);

236 
NCURSES_EXPORT
(Ë
£t_míu_ãrm
 (
MENU
 *, 
Míu_Hook
);

237 
NCURSES_EXPORT
(Ë
£t_míu_u£Ωå
 (
MENU
 *,*);

238 
NCURSES_EXPORT
(Ë
£t_míu_wö
 (
MENU
 *,
WINDOW
 *);

239 
NCURSES_EXPORT
(Ë
£t_t›_row
 (
MENU
 *,);

240 
NCURSES_EXPORT
(Ë
t›_row
 (c⁄° 
MENU
 *);

241 
NCURSES_EXPORT
(Ë
u≈o°_míu
 (
MENU
 *);

242 
NCURSES_EXPORT
(Ë
míu_ªque°_by_«me
 (const *);

243 
NCURSES_EXPORT
(Ë
£t_míu_•acög
 (
MENU
 *,,,);

244 
NCURSES_EXPORT
(Ë
míu_•acög
 (c⁄° 
MENU
 *,*,*,*);

247 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_vÆue
 (c⁄° 
ITEM
 *);

248 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_visibÀ
 (c⁄° 
ITEM
 *);

250 
NCURSES_EXPORT
(Ë
míu_f‹m©
 (c⁄° 
MENU
 *,*,*);

252 #i‡
NCURSES_SP_FUNCS


253 
NCURSES_EXPORT
(
MENU
 *Ë
NCURSES_SP_NAME
(
√w_míu
Ë(
SCREEN
*, 
ITEM
 **);

256 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/timeb.h

19 #i‚de‡
_SYS_TIMEB_H


20 
	#_SYS_TIMEB_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

28 
__BEGIN_DECLS


32 
	stimeb


34 
time_t
 
	mtime
;

35 
	mmûlôm
;

36 
	mtimez⁄e
;

37 
	md°Êag
;

42 
·ime
 (
timeb
 *
__timebuf
);

44 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #ifde‡
__USE_UNIX98


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

4 #ifde‡
__˝lu•lus


34 
	#GL_GLEXT_VERSION
 56

	)

38 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

39 
	#WIN32_LEAN_AND_MEAN
 1

	)

40 
	~<wödows.h
>

43 #i‚de‡
APIENTRY


44 
	#APIENTRY


	)

46 #i‚de‡
APIENTRYP


47 
	#APIENTRYP
 
APIENTRY
 *

	)

49 #i‚de‡
GLAPI


50 
	#GLAPI
 

	)

55 #i‚de‡
GL_VERSION_1_2


56 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

57 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

58 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

59 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

60 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

61 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

62 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

63 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

64 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

65 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

66 
	#GL_TEXTURE_3D
 0x806F

	)

67 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

68 
	#GL_TEXTURE_DEPTH
 0x8071

	)

69 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

70 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

71 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

72 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

73 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

74 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

75 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

76 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

77 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

78 
	#GL_BGR
 0x80E0

	)

79 
	#GL_BGRA
 0x80E1

	)

80 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

81 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

82 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

83 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

84 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

85 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

86 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

87 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

88 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

89 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

90 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

91 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

94 #i‚de‡
GL_VERSION_1_2_DEPRECATED


95 
	#GL_RESCALE_NORMAL
 0x803A

	)

96 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

97 
	#GL_SINGLE_COLOR
 0x81F9

	)

98 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

99 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

102 #i‚de‡
GL_ARB_imagög


103 
	#GL_CONSTANT_COLOR
 0x8001

	)

104 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

105 
	#GL_CONSTANT_ALPHA
 0x8003

	)

106 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

107 
	#GL_BLEND_COLOR
 0x8005

	)

108 
	#GL_FUNC_ADD
 0x8006

	)

109 
	#GL_MIN
 0x8007

	)

110 
	#GL_MAX
 0x8008

	)

111 
	#GL_BLEND_EQUATION
 0x8009

	)

112 
	#GL_FUNC_SUBTRACT
 0x800A

	)

113 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

116 #i‚de‡
GL_ARB_imagög_DEPRECATED


117 
	#GL_CONVOLUTION_1D
 0x8010

	)

118 
	#GL_CONVOLUTION_2D
 0x8011

	)

119 
	#GL_SEPARABLE_2D
 0x8012

	)

120 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

121 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

122 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

123 
	#GL_REDUCE
 0x8016

	)

124 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

125 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

126 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

127 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

128 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

129 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

130 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

131 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

132 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

133 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

134 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

135 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

136 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

137 
	#GL_HISTOGRAM
 0x8024

	)

138 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

139 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

140 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

141 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

142 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

143 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

144 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

145 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

146 
	#GL_HISTOGRAM_SINK
 0x802D

	)

147 
	#GL_MINMAX
 0x802E

	)

148 
	#GL_MINMAX_FORMAT
 0x802F

	)

149 
	#GL_MINMAX_SINK
 0x8030

	)

150 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

151 
	#GL_COLOR_MATRIX
 0x80B1

	)

152 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

153 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

154 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

155 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

156 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

157 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

158 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

159 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

160 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

161 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

162 
	#GL_COLOR_TABLE
 0x80D0

	)

163 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

164 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

165 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

166 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

167 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

168 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

169 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

170 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

171 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

172 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

173 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

174 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

175 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

176 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

177 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

178 
	#GL_CONSTANT_BORDER
 0x8151

	)

179 
	#GL_REPLICATE_BORDER
 0x8153

	)

180 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

183 #i‚de‡
GL_VERSION_1_3


184 
	#GL_TEXTURE0
 0x84C0

	)

185 
	#GL_TEXTURE1
 0x84C1

	)

186 
	#GL_TEXTURE2
 0x84C2

	)

187 
	#GL_TEXTURE3
 0x84C3

	)

188 
	#GL_TEXTURE4
 0x84C4

	)

189 
	#GL_TEXTURE5
 0x84C5

	)

190 
	#GL_TEXTURE6
 0x84C6

	)

191 
	#GL_TEXTURE7
 0x84C7

	)

192 
	#GL_TEXTURE8
 0x84C8

	)

193 
	#GL_TEXTURE9
 0x84C9

	)

194 
	#GL_TEXTURE10
 0x84CA

	)

195 
	#GL_TEXTURE11
 0x84CB

	)

196 
	#GL_TEXTURE12
 0x84CC

	)

197 
	#GL_TEXTURE13
 0x84CD

	)

198 
	#GL_TEXTURE14
 0x84CE

	)

199 
	#GL_TEXTURE15
 0x84CF

	)

200 
	#GL_TEXTURE16
 0x84D0

	)

201 
	#GL_TEXTURE17
 0x84D1

	)

202 
	#GL_TEXTURE18
 0x84D2

	)

203 
	#GL_TEXTURE19
 0x84D3

	)

204 
	#GL_TEXTURE20
 0x84D4

	)

205 
	#GL_TEXTURE21
 0x84D5

	)

206 
	#GL_TEXTURE22
 0x84D6

	)

207 
	#GL_TEXTURE23
 0x84D7

	)

208 
	#GL_TEXTURE24
 0x84D8

	)

209 
	#GL_TEXTURE25
 0x84D9

	)

210 
	#GL_TEXTURE26
 0x84DA

	)

211 
	#GL_TEXTURE27
 0x84DB

	)

212 
	#GL_TEXTURE28
 0x84DC

	)

213 
	#GL_TEXTURE29
 0x84DD

	)

214 
	#GL_TEXTURE30
 0x84DE

	)

215 
	#GL_TEXTURE31
 0x84DF

	)

216 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

217 
	#GL_MULTISAMPLE
 0x809D

	)

218 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

219 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

220 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

221 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

222 
	#GL_SAMPLES
 0x80A9

	)

223 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

224 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

225 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

226 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

227 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

228 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

229 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

230 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

231 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

232 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

233 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

234 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

235 
	#GL_COMPRESSED_RGB
 0x84ED

	)

236 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

237 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

238 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

239 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

240 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

241 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

242 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

245 #i‚de‡
GL_VERSION_1_3_DEPRECATED


246 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

247 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

248 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

249 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

250 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

251 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

252 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

253 
	#GL_NORMAL_MAP
 0x8511

	)

254 
	#GL_REFLECTION_MAP
 0x8512

	)

255 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

256 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

257 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

258 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

259 
	#GL_COMBINE
 0x8570

	)

260 
	#GL_COMBINE_RGB
 0x8571

	)

261 
	#GL_COMBINE_ALPHA
 0x8572

	)

262 
	#GL_SOURCE0_RGB
 0x8580

	)

263 
	#GL_SOURCE1_RGB
 0x8581

	)

264 
	#GL_SOURCE2_RGB
 0x8582

	)

265 
	#GL_SOURCE0_ALPHA
 0x8588

	)

266 
	#GL_SOURCE1_ALPHA
 0x8589

	)

267 
	#GL_SOURCE2_ALPHA
 0x858A

	)

268 
	#GL_OPERAND0_RGB
 0x8590

	)

269 
	#GL_OPERAND1_RGB
 0x8591

	)

270 
	#GL_OPERAND2_RGB
 0x8592

	)

271 
	#GL_OPERAND0_ALPHA
 0x8598

	)

272 
	#GL_OPERAND1_ALPHA
 0x8599

	)

273 
	#GL_OPERAND2_ALPHA
 0x859A

	)

274 
	#GL_RGB_SCALE
 0x8573

	)

275 
	#GL_ADD_SIGNED
 0x8574

	)

276 
	#GL_INTERPOLATE
 0x8575

	)

277 
	#GL_SUBTRACT
 0x84E7

	)

278 
	#GL_CONSTANT
 0x8576

	)

279 
	#GL_PRIMARY_COLOR
 0x8577

	)

280 
	#GL_PREVIOUS
 0x8578

	)

281 
	#GL_DOT3_RGB
 0x86AE

	)

282 
	#GL_DOT3_RGBA
 0x86AF

	)

285 #i‚de‡
GL_VERSION_1_4


286 
	#GL_BLEND_DST_RGB
 0x80C8

	)

287 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

288 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

289 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

290 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

291 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

292 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

293 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

294 
	#GL_MIRRORED_REPEAT
 0x8370

	)

295 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

296 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

297 
	#GL_INCR_WRAP
 0x8507

	)

298 
	#GL_DECR_WRAP
 0x8508

	)

299 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

300 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

301 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

304 #i‚de‡
GL_VERSION_1_4_DEPRECATED


305 
	#GL_POINT_SIZE_MIN
 0x8126

	)

306 
	#GL_POINT_SIZE_MAX
 0x8127

	)

307 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

308 
	#GL_GENERATE_MIPMAP
 0x8191

	)

309 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

310 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

311 
	#GL_FOG_COORDINATE
 0x8451

	)

312 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

313 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

314 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

315 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

316 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

317 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

318 
	#GL_COLOR_SUM
 0x8458

	)

319 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

320 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

321 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

322 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

323 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

324 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

325 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

326 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

327 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

330 #i‚de‡
GL_VERSION_1_5


331 
	#GL_BUFFER_SIZE
 0x8764

	)

332 
	#GL_BUFFER_USAGE
 0x8765

	)

333 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

334 
	#GL_CURRENT_QUERY
 0x8865

	)

335 
	#GL_QUERY_RESULT
 0x8866

	)

336 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

337 
	#GL_ARRAY_BUFFER
 0x8892

	)

338 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

339 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

340 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

341 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

342 
	#GL_READ_ONLY
 0x88B8

	)

343 
	#GL_WRITE_ONLY
 0x88B9

	)

344 
	#GL_READ_WRITE
 0x88BA

	)

345 
	#GL_BUFFER_ACCESS
 0x88BB

	)

346 
	#GL_BUFFER_MAPPED
 0x88BC

	)

347 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

348 
	#GL_STREAM_DRAW
 0x88E0

	)

349 
	#GL_STREAM_READ
 0x88E1

	)

350 
	#GL_STREAM_COPY
 0x88E2

	)

351 
	#GL_STATIC_DRAW
 0x88E4

	)

352 
	#GL_STATIC_READ
 0x88E5

	)

353 
	#GL_STATIC_COPY
 0x88E6

	)

354 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

355 
	#GL_DYNAMIC_READ
 0x88E9

	)

356 
	#GL_DYNAMIC_COPY
 0x88EA

	)

357 
	#GL_SAMPLES_PASSED
 0x8914

	)

360 #i‚de‡
GL_VERSION_1_5_DEPRECATED


361 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

362 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

363 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

364 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

365 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

366 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

367 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

368 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

369 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

370 
	#GL_FOG_COORD_SRC
 0x8450

	)

371 
	#GL_FOG_COORD
 0x8451

	)

372 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

373 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

374 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

375 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

376 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

377 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

378 
	#GL_SRC0_RGB
 0x8580

	)

379 
	#GL_SRC1_RGB
 0x8581

	)

380 
	#GL_SRC2_RGB
 0x8582

	)

381 
	#GL_SRC0_ALPHA
 0x8588

	)

382 
	#GL_SRC1_ALPHA
 0x8589

	)

383 
	#GL_SRC2_ALPHA
 0x858A

	)

386 #i‚de‡
GL_VERSION_2_0


387 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

388 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

389 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

390 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

391 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

392 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

393 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

394 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

395 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

396 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

397 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

398 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

399 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

400 
	#GL_DRAW_BUFFER0
 0x8825

	)

401 
	#GL_DRAW_BUFFER1
 0x8826

	)

402 
	#GL_DRAW_BUFFER2
 0x8827

	)

403 
	#GL_DRAW_BUFFER3
 0x8828

	)

404 
	#GL_DRAW_BUFFER4
 0x8829

	)

405 
	#GL_DRAW_BUFFER5
 0x882A

	)

406 
	#GL_DRAW_BUFFER6
 0x882B

	)

407 
	#GL_DRAW_BUFFER7
 0x882C

	)

408 
	#GL_DRAW_BUFFER8
 0x882D

	)

409 
	#GL_DRAW_BUFFER9
 0x882E

	)

410 
	#GL_DRAW_BUFFER10
 0x882F

	)

411 
	#GL_DRAW_BUFFER11
 0x8830

	)

412 
	#GL_DRAW_BUFFER12
 0x8831

	)

413 
	#GL_DRAW_BUFFER13
 0x8832

	)

414 
	#GL_DRAW_BUFFER14
 0x8833

	)

415 
	#GL_DRAW_BUFFER15
 0x8834

	)

416 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

417 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

418 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

419 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

420 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

421 
	#GL_VERTEX_SHADER
 0x8B31

	)

422 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

423 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

424 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

425 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

426 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

427 
	#GL_SHADER_TYPE
 0x8B4F

	)

428 
	#GL_FLOAT_VEC2
 0x8B50

	)

429 
	#GL_FLOAT_VEC3
 0x8B51

	)

430 
	#GL_FLOAT_VEC4
 0x8B52

	)

431 
	#GL_INT_VEC2
 0x8B53

	)

432 
	#GL_INT_VEC3
 0x8B54

	)

433 
	#GL_INT_VEC4
 0x8B55

	)

434 
	#GL_BOOL
 0x8B56

	)

435 
	#GL_BOOL_VEC2
 0x8B57

	)

436 
	#GL_BOOL_VEC3
 0x8B58

	)

437 
	#GL_BOOL_VEC4
 0x8B59

	)

438 
	#GL_FLOAT_MAT2
 0x8B5A

	)

439 
	#GL_FLOAT_MAT3
 0x8B5B

	)

440 
	#GL_FLOAT_MAT4
 0x8B5C

	)

441 
	#GL_SAMPLER_1D
 0x8B5D

	)

442 
	#GL_SAMPLER_2D
 0x8B5E

	)

443 
	#GL_SAMPLER_3D
 0x8B5F

	)

444 
	#GL_SAMPLER_CUBE
 0x8B60

	)

445 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

446 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

447 
	#GL_DELETE_STATUS
 0x8B80

	)

448 
	#GL_COMPILE_STATUS
 0x8B81

	)

449 
	#GL_LINK_STATUS
 0x8B82

	)

450 
	#GL_VALIDATE_STATUS
 0x8B83

	)

451 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

452 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

453 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

454 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

455 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

456 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

457 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

458 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

459 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

460 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

461 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

462 
	#GL_LOWER_LEFT
 0x8CA1

	)

463 
	#GL_UPPER_LEFT
 0x8CA2

	)

464 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

465 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

466 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

469 #i‚de‡
GL_VERSION_2_0_DEPRECATED


470 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

471 
	#GL_POINT_SPRITE
 0x8861

	)

472 
	#GL_COORD_REPLACE
 0x8862

	)

473 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

476 #i‚de‡
GL_VERSION_2_1


477 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

478 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

479 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

480 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

481 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

482 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

483 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

484 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

485 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

486 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

487 
	#GL_SRGB
 0x8C40

	)

488 
	#GL_SRGB8
 0x8C41

	)

489 
	#GL_SRGB_ALPHA
 0x8C42

	)

490 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

491 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

492 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

495 #i‚de‡
GL_VERSION_2_1_DEPRECATED


496 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

497 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

498 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

499 
	#GL_SLUMINANCE
 0x8C46

	)

500 
	#GL_SLUMINANCE8
 0x8C47

	)

501 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

502 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

505 #i‚de‡
GL_VERSION_3_0


506 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

507 
	#GL_CLIP_DISTANCE0
 0x3000

	)

508 
	#GL_CLIP_DISTANCE1
 0x3001

	)

509 
	#GL_CLIP_DISTANCE2
 0x3002

	)

510 
	#GL_CLIP_DISTANCE3
 0x3003

	)

511 
	#GL_CLIP_DISTANCE4
 0x3004

	)

512 
	#GL_CLIP_DISTANCE5
 0x3005

	)

513 
	#GL_CLIP_DISTANCE6
 0x3006

	)

514 
	#GL_CLIP_DISTANCE7
 0x3007

	)

515 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

516 
	#GL_MAJOR_VERSION
 0x821B

	)

517 
	#GL_MINOR_VERSION
 0x821C

	)

518 
	#GL_NUM_EXTENSIONS
 0x821D

	)

519 
	#GL_CONTEXT_FLAGS
 0x821E

	)

520 
	#GL_DEPTH_BUFFER
 0x8223

	)

521 
	#GL_STENCIL_BUFFER
 0x8224

	)

522 
	#GL_COMPRESSED_RED
 0x8225

	)

523 
	#GL_COMPRESSED_RG
 0x8226

	)

524 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

525 
	#GL_RGBA32F
 0x8814

	)

526 
	#GL_RGB32F
 0x8815

	)

527 
	#GL_RGBA16F
 0x881A

	)

528 
	#GL_RGB16F
 0x881B

	)

529 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

530 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

531 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

532 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

533 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

534 
	#GL_FIXED_ONLY
 0x891D

	)

535 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

536 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

537 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

538 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

539 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

540 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

541 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

542 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

543 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

544 
	#GL_RGB9_E5
 0x8C3D

	)

545 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

546 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

547 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

548 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

549 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

550 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

551 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

552 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

553 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

554 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

555 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

556 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

557 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

558 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

559 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

560 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

561 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

562 
	#GL_RGBA32UI
 0x8D70

	)

563 
	#GL_RGB32UI
 0x8D71

	)

564 
	#GL_RGBA16UI
 0x8D76

	)

565 
	#GL_RGB16UI
 0x8D77

	)

566 
	#GL_RGBA8UI
 0x8D7C

	)

567 
	#GL_RGB8UI
 0x8D7D

	)

568 
	#GL_RGBA32I
 0x8D82

	)

569 
	#GL_RGB32I
 0x8D83

	)

570 
	#GL_RGBA16I
 0x8D88

	)

571 
	#GL_RGB16I
 0x8D89

	)

572 
	#GL_RGBA8I
 0x8D8E

	)

573 
	#GL_RGB8I
 0x8D8F

	)

574 
	#GL_RED_INTEGER
 0x8D94

	)

575 
	#GL_GREEN_INTEGER
 0x8D95

	)

576 
	#GL_BLUE_INTEGER
 0x8D96

	)

577 
	#GL_RGB_INTEGER
 0x8D98

	)

578 
	#GL_RGBA_INTEGER
 0x8D99

	)

579 
	#GL_BGR_INTEGER
 0x8D9A

	)

580 
	#GL_BGRA_INTEGER
 0x8D9B

	)

581 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

582 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

583 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

584 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

585 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

586 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

587 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

588 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

589 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

590 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

591 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

592 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

593 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

594 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

595 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

596 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

597 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

598 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

599 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

600 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

601 
	#GL_QUERY_WAIT
 0x8E13

	)

602 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

603 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

604 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

605 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

606 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

607 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

734 #i‚de‡
GL_VERSION_3_0_DEPRECATED


735 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

736 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

737 
	#GL_ALPHA_INTEGER
 0x8D97

	)

743 #i‚de‡
GL_VERSION_3_1


744 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

745 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

746 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

747 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

748 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

749 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

750 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

751 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

752 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

753 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

754 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

755 
	#GL_TEXTURE_BUFFER_FORMAT
 0x8C2E

	)

756 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

757 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

758 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

759 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

760 
	#GL_RED_SNORM
 0x8F90

	)

761 
	#GL_RG_SNORM
 0x8F91

	)

762 
	#GL_RGB_SNORM
 0x8F92

	)

763 
	#GL_RGBA_SNORM
 0x8F93

	)

764 
	#GL_R8_SNORM
 0x8F94

	)

765 
	#GL_RG8_SNORM
 0x8F95

	)

766 
	#GL_RGB8_SNORM
 0x8F96

	)

767 
	#GL_RGBA8_SNORM
 0x8F97

	)

768 
	#GL_R16_SNORM
 0x8F98

	)

769 
	#GL_RG16_SNORM
 0x8F99

	)

770 
	#GL_RGB16_SNORM
 0x8F9A

	)

771 
	#GL_RGBA16_SNORM
 0x8F9B

	)

772 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

773 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

774 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

812 #i‚de‡
GL_VERSION_3_2


813 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

814 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

815 
	#GL_LINES_ADJACENCY
 0x000A

	)

816 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

817 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

818 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

819 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

820 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

821 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

822 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

823 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

824 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

825 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

826 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

827 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

828 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

829 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

830 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

831 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

832 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

833 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

834 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

890 #i‚de‡
GL_ARB_mu…ôextuª


891 
	#GL_TEXTURE0_ARB
 0x84C0

	)

892 
	#GL_TEXTURE1_ARB
 0x84C1

	)

893 
	#GL_TEXTURE2_ARB
 0x84C2

	)

894 
	#GL_TEXTURE3_ARB
 0x84C3

	)

895 
	#GL_TEXTURE4_ARB
 0x84C4

	)

896 
	#GL_TEXTURE5_ARB
 0x84C5

	)

897 
	#GL_TEXTURE6_ARB
 0x84C6

	)

898 
	#GL_TEXTURE7_ARB
 0x84C7

	)

899 
	#GL_TEXTURE8_ARB
 0x84C8

	)

900 
	#GL_TEXTURE9_ARB
 0x84C9

	)

901 
	#GL_TEXTURE10_ARB
 0x84CA

	)

902 
	#GL_TEXTURE11_ARB
 0x84CB

	)

903 
	#GL_TEXTURE12_ARB
 0x84CC

	)

904 
	#GL_TEXTURE13_ARB
 0x84CD

	)

905 
	#GL_TEXTURE14_ARB
 0x84CE

	)

906 
	#GL_TEXTURE15_ARB
 0x84CF

	)

907 
	#GL_TEXTURE16_ARB
 0x84D0

	)

908 
	#GL_TEXTURE17_ARB
 0x84D1

	)

909 
	#GL_TEXTURE18_ARB
 0x84D2

	)

910 
	#GL_TEXTURE19_ARB
 0x84D3

	)

911 
	#GL_TEXTURE20_ARB
 0x84D4

	)

912 
	#GL_TEXTURE21_ARB
 0x84D5

	)

913 
	#GL_TEXTURE22_ARB
 0x84D6

	)

914 
	#GL_TEXTURE23_ARB
 0x84D7

	)

915 
	#GL_TEXTURE24_ARB
 0x84D8

	)

916 
	#GL_TEXTURE25_ARB
 0x84D9

	)

917 
	#GL_TEXTURE26_ARB
 0x84DA

	)

918 
	#GL_TEXTURE27_ARB
 0x84DB

	)

919 
	#GL_TEXTURE28_ARB
 0x84DC

	)

920 
	#GL_TEXTURE29_ARB
 0x84DD

	)

921 
	#GL_TEXTURE30_ARB
 0x84DE

	)

922 
	#GL_TEXTURE31_ARB
 0x84DF

	)

923 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

924 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

925 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

928 #i‚de‡
GL_ARB_å™•o£_m©rix


929 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

930 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

931 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

932 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

935 #i‚de‡
GL_ARB_mu…ißm∂e


936 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

937 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

938 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

939 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

940 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

941 
	#GL_SAMPLES_ARB
 0x80A9

	)

942 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

943 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

944 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

947 #i‚de‡
GL_ARB_ãxtuª_ív_add


950 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


951 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

952 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

953 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

954 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

955 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

956 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

957 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

958 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

959 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

960 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

961 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

962 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

965 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


966 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

967 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

968 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

969 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

970 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

971 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

972 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

973 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

974 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

975 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

976 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

979 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


980 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

983 #i‚de‡
GL_ARB_poöt_∑ømëîs


984 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

985 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

986 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

987 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

990 #i‚de‡
GL_ARB_vîãx_bÀnd


991 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

992 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

993 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

994 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

995 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

996 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

997 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

998 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

999 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

1000 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

1001 
	#GL_MODELVIEW0_ARB
 0x1700

	)

1002 
	#GL_MODELVIEW1_ARB
 0x850A

	)

1003 
	#GL_MODELVIEW2_ARB
 0x8722

	)

1004 
	#GL_MODELVIEW3_ARB
 0x8723

	)

1005 
	#GL_MODELVIEW4_ARB
 0x8724

	)

1006 
	#GL_MODELVIEW5_ARB
 0x8725

	)

1007 
	#GL_MODELVIEW6_ARB
 0x8726

	)

1008 
	#GL_MODELVIEW7_ARB
 0x8727

	)

1009 
	#GL_MODELVIEW8_ARB
 0x8728

	)

1010 
	#GL_MODELVIEW9_ARB
 0x8729

	)

1011 
	#GL_MODELVIEW10_ARB
 0x872A

	)

1012 
	#GL_MODELVIEW11_ARB
 0x872B

	)

1013 
	#GL_MODELVIEW12_ARB
 0x872C

	)

1014 
	#GL_MODELVIEW13_ARB
 0x872D

	)

1015 
	#GL_MODELVIEW14_ARB
 0x872E

	)

1016 
	#GL_MODELVIEW15_ARB
 0x872F

	)

1017 
	#GL_MODELVIEW16_ARB
 0x8730

	)

1018 
	#GL_MODELVIEW17_ARB
 0x8731

	)

1019 
	#GL_MODELVIEW18_ARB
 0x8732

	)

1020 
	#GL_MODELVIEW19_ARB
 0x8733

	)

1021 
	#GL_MODELVIEW20_ARB
 0x8734

	)

1022 
	#GL_MODELVIEW21_ARB
 0x8735

	)

1023 
	#GL_MODELVIEW22_ARB
 0x8736

	)

1024 
	#GL_MODELVIEW23_ARB
 0x8737

	)

1025 
	#GL_MODELVIEW24_ARB
 0x8738

	)

1026 
	#GL_MODELVIEW25_ARB
 0x8739

	)

1027 
	#GL_MODELVIEW26_ARB
 0x873A

	)

1028 
	#GL_MODELVIEW27_ARB
 0x873B

	)

1029 
	#GL_MODELVIEW28_ARB
 0x873C

	)

1030 
	#GL_MODELVIEW29_ARB
 0x873D

	)

1031 
	#GL_MODELVIEW30_ARB
 0x873E

	)

1032 
	#GL_MODELVIEW31_ARB
 0x873F

	)

1035 #i‚de‡
GL_ARB_m©rix_∑Àâe


1036 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

1037 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

1038 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

1039 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

1040 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

1041 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

1042 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

1043 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

1044 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

1045 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

1048 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


1049 
	#GL_COMBINE_ARB
 0x8570

	)

1050 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

1051 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

1052 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

1053 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

1054 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

1055 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

1056 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

1057 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

1058 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

1059 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

1060 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

1061 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

1062 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

1063 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

1064 
	#GL_RGB_SCALE_ARB
 0x8573

	)

1065 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

1066 
	#GL_INTERPOLATE_ARB
 0x8575

	)

1067 
	#GL_SUBTRACT_ARB
 0x84E7

	)

1068 
	#GL_CONSTANT_ARB
 0x8576

	)

1069 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

1070 
	#GL_PREVIOUS_ARB
 0x8578

	)

1073 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


1076 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


1077 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

1078 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

1081 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


1082 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

1085 #i‚de‡
GL_ARB_dïth_ãxtuª


1086 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

1087 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

1088 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

1089 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

1090 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

1093 #i‚de‡
GL_ARB_shadow


1094 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

1095 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

1096 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

1099 #i‚de‡
GL_ARB_shadow_ambõ¡


1100 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

1103 #i‚de‡
GL_ARB_wödow_pos


1106 #i‚de‡
GL_ARB_vîãx_¥ogøm


1107 
	#GL_COLOR_SUM_ARB
 0x8458

	)

1108 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

1109 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

1110 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

1111 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

1112 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

1113 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

1114 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

1115 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

1116 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

1117 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

1118 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

1119 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

1120 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

1121 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

1122 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

1123 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

1124 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

1125 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

1126 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

1127 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

1128 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

1129 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

1130 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

1131 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

1132 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

1133 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

1134 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

1135 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

1136 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

1137 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

1138 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

1139 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

1140 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

1141 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

1142 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

1143 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

1144 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

1145 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

1146 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

1147 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

1148 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

1149 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

1150 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

1151 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

1152 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

1153 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

1154 
	#GL_MATRIX0_ARB
 0x88C0

	)

1155 
	#GL_MATRIX1_ARB
 0x88C1

	)

1156 
	#GL_MATRIX2_ARB
 0x88C2

	)

1157 
	#GL_MATRIX3_ARB
 0x88C3

	)

1158 
	#GL_MATRIX4_ARB
 0x88C4

	)

1159 
	#GL_MATRIX5_ARB
 0x88C5

	)

1160 
	#GL_MATRIX6_ARB
 0x88C6

	)

1161 
	#GL_MATRIX7_ARB
 0x88C7

	)

1162 
	#GL_MATRIX8_ARB
 0x88C8

	)

1163 
	#GL_MATRIX9_ARB
 0x88C9

	)

1164 
	#GL_MATRIX10_ARB
 0x88CA

	)

1165 
	#GL_MATRIX11_ARB
 0x88CB

	)

1166 
	#GL_MATRIX12_ARB
 0x88CC

	)

1167 
	#GL_MATRIX13_ARB
 0x88CD

	)

1168 
	#GL_MATRIX14_ARB
 0x88CE

	)

1169 
	#GL_MATRIX15_ARB
 0x88CF

	)

1170 
	#GL_MATRIX16_ARB
 0x88D0

	)

1171 
	#GL_MATRIX17_ARB
 0x88D1

	)

1172 
	#GL_MATRIX18_ARB
 0x88D2

	)

1173 
	#GL_MATRIX19_ARB
 0x88D3

	)

1174 
	#GL_MATRIX20_ARB
 0x88D4

	)

1175 
	#GL_MATRIX21_ARB
 0x88D5

	)

1176 
	#GL_MATRIX22_ARB
 0x88D6

	)

1177 
	#GL_MATRIX23_ARB
 0x88D7

	)

1178 
	#GL_MATRIX24_ARB
 0x88D8

	)

1179 
	#GL_MATRIX25_ARB
 0x88D9

	)

1180 
	#GL_MATRIX26_ARB
 0x88DA

	)

1181 
	#GL_MATRIX27_ARB
 0x88DB

	)

1182 
	#GL_MATRIX28_ARB
 0x88DC

	)

1183 
	#GL_MATRIX29_ARB
 0x88DD

	)

1184 
	#GL_MATRIX30_ARB
 0x88DE

	)

1185 
	#GL_MATRIX31_ARB
 0x88DF

	)

1188 #i‚de‡
GL_ARB_‰agmít_¥ogøm


1189 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

1190 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

1191 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

1192 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

1193 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

1194 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

1195 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

1196 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

1197 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

1198 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

1199 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

1200 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

1201 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

1202 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

1203 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

1206 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


1207 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

1208 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

1209 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

1210 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

1211 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

1212 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

1213 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

1214 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

1215 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

1216 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

1217 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

1218 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

1219 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

1220 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

1221 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

1222 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

1223 
	#GL_READ_ONLY_ARB
 0x88B8

	)

1224 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

1225 
	#GL_READ_WRITE_ARB
 0x88BA

	)

1226 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

1227 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

1228 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

1229 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

1230 
	#GL_STREAM_READ_ARB
 0x88E1

	)

1231 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

1232 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

1233 
	#GL_STATIC_READ_ARB
 0x88E5

	)

1234 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

1235 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

1236 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

1237 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

1240 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


1241 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

1242 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

1243 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

1244 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

1245 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

1248 #i‚de‡
GL_ARB_shadî_obje˘s


1249 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

1250 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

1251 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

1252 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

1253 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

1254 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

1255 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

1256 
	#GL_INT_VEC2_ARB
 0x8B53

	)

1257 
	#GL_INT_VEC3_ARB
 0x8B54

	)

1258 
	#GL_INT_VEC4_ARB
 0x8B55

	)

1259 
	#GL_BOOL_ARB
 0x8B56

	)

1260 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

1261 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

1262 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

1263 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

1264 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

1265 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

1266 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

1267 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

1268 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

1269 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

1270 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

1271 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

1272 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

1273 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

1274 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

1275 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

1276 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

1277 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

1278 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

1279 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

1280 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

1281 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

1282 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

1285 #i‚de‡
GL_ARB_vîãx_shadî


1286 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

1287 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

1288 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

1289 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

1290 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

1291 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

1292 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

1295 #i‚de‡
GL_ARB_‰agmít_shadî


1296 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

1297 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

1298 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

1301 #i‚de‡
GL_ARB_shadög_œnguage_100


1302 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

1305 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


1308 #i‚de‡
GL_ARB_poöt_•rôe


1309 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

1310 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

1313 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


1316 #i‚de‡
GL_ARB_døw_buf„rs


1317 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

1318 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

1319 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

1320 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

1321 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

1322 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

1323 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

1324 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

1325 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

1326 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

1327 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

1328 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

1329 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

1330 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

1331 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

1332 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

1333 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

1336 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


1337 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

1338 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

1339 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

1340 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

1343 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


1344 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

1345 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

1346 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

1347 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

1348 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

1351 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


1352 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

1355 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


1356 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

1357 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

1358 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

1359 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

1360 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

1361 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

1362 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

1363 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

1364 
	#GL_RGBA32F_ARB
 0x8814

	)

1365 
	#GL_RGB32F_ARB
 0x8815

	)

1366 
	#GL_ALPHA32F_ARB
 0x8816

	)

1367 
	#GL_INTENSITY32F_ARB
 0x8817

	)

1368 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

1369 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

1370 
	#GL_RGBA16F_ARB
 0x881A

	)

1371 
	#GL_RGB16F_ARB
 0x881B

	)

1372 
	#GL_ALPHA16F_ARB
 0x881C

	)

1373 
	#GL_INTENSITY16F_ARB
 0x881D

	)

1374 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

1375 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

1378 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


1379 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

1380 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

1381 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

1382 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

1385 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


1386 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

1387 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

1388 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

1391 #i‚de‡
GL_ARB_døw_ö°™˚d


1394 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


1395 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

1396 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

1397 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

1398 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

1399 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

1400 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1401 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1402 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1403 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1404 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1405 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1406 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1407 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1408 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1409 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1410 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1411 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1412 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1413 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1414 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1415 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1416 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1417 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1418 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1419 
	#GL_DRAW_FRAMEBUFFER_BINDING
 
GL_FRAMEBUFFER_BINDING


	)

1420 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1421 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1422 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1423 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1424 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1425 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1426 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1427 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1428 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1429 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1430 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1431 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1432 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1433 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1434 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1435 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1436 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1437 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1438 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1439 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1440 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1441 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1442 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1443 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1444 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1445 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1446 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1447 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1448 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1449 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1450 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1451 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1452 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1453 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1454 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1455 
	#GL_FRAMEBUFFER
 0x8D40

	)

1456 
	#GL_RENDERBUFFER
 0x8D41

	)

1457 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1458 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1459 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1460 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1461 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1462 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1463 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1464 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1465 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1466 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1467 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1468 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1469 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1470 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1471 
	#GL_MAX_SAMPLES
 0x8D57

	)

1474 #i‚de‡
GL_ARB_‰amebuf„r_obje˘_DEPRECATED


1475 
	#GL_INDEX
 0x8222

	)

1476 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1477 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1480 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


1481 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1484 #i‚de‡
GL_ARB_geomëry_shadî4


1485 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

1486 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

1487 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

1488 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

1489 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

1490 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

1491 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

1492 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

1493 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

1494 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

1495 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

1496 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

1497 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

1498 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

1499 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

1500 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

1501 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

1502 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

1507 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


1508 
	#GL_HALF_FLOAT
 0x140B

	)

1511 #i‚de‡
GL_ARB_ö°™˚d_¨øys


1512 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

1515 #i‚de‡
GL_ARB_m≠_buf„r_ønge


1516 
	#GL_MAP_READ_BIT
 0x0001

	)

1517 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1518 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1519 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1520 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1521 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1524 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


1525 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

1526 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

1527 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

1528 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

1529 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

1532 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


1533 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1534 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1535 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1536 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1539 #i‚de‡
GL_ARB_ãxtuª_rg


1540 
	#GL_RG
 0x8227

	)

1541 
	#GL_RG_INTEGER
 0x8228

	)

1542 
	#GL_R8
 0x8229

	)

1543 
	#GL_R16
 0x822A

	)

1544 
	#GL_RG8
 0x822B

	)

1545 
	#GL_RG16
 0x822C

	)

1546 
	#GL_R16F
 0x822D

	)

1547 
	#GL_R32F
 0x822E

	)

1548 
	#GL_RG16F
 0x822F

	)

1549 
	#GL_RG32F
 0x8230

	)

1550 
	#GL_R8I
 0x8231

	)

1551 
	#GL_R8UI
 0x8232

	)

1552 
	#GL_R16I
 0x8233

	)

1553 
	#GL_R16UI
 0x8234

	)

1554 
	#GL_R32I
 0x8235

	)

1555 
	#GL_R32UI
 0x8236

	)

1556 
	#GL_RG8I
 0x8237

	)

1557 
	#GL_RG8UI
 0x8238

	)

1558 
	#GL_RG16I
 0x8239

	)

1559 
	#GL_RG16UI
 0x823A

	)

1560 
	#GL_RG32I
 0x823B

	)

1561 
	#GL_RG32UI
 0x823C

	)

1564 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


1565 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1568 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


1569 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1570 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1571 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1572 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1573 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1574 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

1575 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1576 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1577 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1578 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1579 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1580 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

1581 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1582 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1583 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1584 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1585 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1586 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1587 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1588 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1589 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1590 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1591 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1592 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1593 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1594 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1595 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1596 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1597 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1598 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1599 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

1600 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1601 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1604 #i‚de‡
GL_ARB_com∑tibûôy


1608 #i‚de‡
GL_ARB_c›y_buf„r


1609 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1610 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1613 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


1616 #i‚de‡
GL_ARB_dïth_˛amp


1617 
	#GL_DEPTH_CLAMP
 0x864F

	)

1620 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


1623 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


1626 #i‚de‡
GL_ARB_¥ovokög_vîãx


1627 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1628 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1629 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1630 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1633 #i‚de‡
GL_ARB_£amÀss_cube_m≠


1634 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1637 #i‚de‡
GL_ARB_sync


1638 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1639 
	#GL_OBJECT_TYPE
 0x9112

	)

1640 
	#GL_SYNC_CONDITION
 0x9113

	)

1641 
	#GL_SYNC_STATUS
 0x9114

	)

1642 
	#GL_SYNC_FLAGS
 0x9115

	)

1643 
	#GL_SYNC_FENCE
 0x9116

	)

1644 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1645 
	#GL_UNSIGNALED
 0x9118

	)

1646 
	#GL_SIGNALED
 0x9119

	)

1647 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1648 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1649 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1650 
	#GL_WAIT_FAILED
 0x911D

	)

1651 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1652 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1655 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


1656 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1657 
	#GL_SAMPLE_MASK
 0x8E51

	)

1658 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1659 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1660 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1661 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1662 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1663 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1664 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1665 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1666 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1667 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1668 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1669 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1670 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1671 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1672 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1673 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1674 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1675 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1676 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1679 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


1683 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


1686 #i‚de‡
GL_ARB_ßm∂e_shadög


1687 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1688 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1691 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


1692 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1693 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1694 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1695 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1696 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1697 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1698 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1701 #i‚de‡
GL_ARB_ãxtuª_g©hî


1702 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1703 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1704 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
 0x8F9F

	)

1707 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


1710 #i‚de‡
GL_EXT_abgr


1711 
	#GL_ABGR_EXT
 0x8000

	)

1714 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


1715 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

1716 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

1717 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

1718 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

1719 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

1722 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


1723 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

1724 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

1725 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

1728 #i‚de‡
GL_EXT_ãxtuª


1729 
	#GL_ALPHA4_EXT
 0x803B

	)

1730 
	#GL_ALPHA8_EXT
 0x803C

	)

1731 
	#GL_ALPHA12_EXT
 0x803D

	)

1732 
	#GL_ALPHA16_EXT
 0x803E

	)

1733 
	#GL_LUMINANCE4_EXT
 0x803F

	)

1734 
	#GL_LUMINANCE8_EXT
 0x8040

	)

1735 
	#GL_LUMINANCE12_EXT
 0x8041

	)

1736 
	#GL_LUMINANCE16_EXT
 0x8042

	)

1737 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

1738 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

1739 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

1740 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

1741 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

1742 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

1743 
	#GL_INTENSITY_EXT
 0x8049

	)

1744 
	#GL_INTENSITY4_EXT
 0x804A

	)

1745 
	#GL_INTENSITY8_EXT
 0x804B

	)

1746 
	#GL_INTENSITY12_EXT
 0x804C

	)

1747 
	#GL_INTENSITY16_EXT
 0x804D

	)

1748 
	#GL_RGB2_EXT
 0x804E

	)

1749 
	#GL_RGB4_EXT
 0x804F

	)

1750 
	#GL_RGB5_EXT
 0x8050

	)

1751 
	#GL_RGB8_EXT
 0x8051

	)

1752 
	#GL_RGB10_EXT
 0x8052

	)

1753 
	#GL_RGB12_EXT
 0x8053

	)

1754 
	#GL_RGB16_EXT
 0x8054

	)

1755 
	#GL_RGBA2_EXT
 0x8055

	)

1756 
	#GL_RGBA4_EXT
 0x8056

	)

1757 
	#GL_RGB5_A1_EXT
 0x8057

	)

1758 
	#GL_RGBA8_EXT
 0x8058

	)

1759 
	#GL_RGB10_A2_EXT
 0x8059

	)

1760 
	#GL_RGBA12_EXT
 0x805A

	)

1761 
	#GL_RGBA16_EXT
 0x805B

	)

1762 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

1763 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

1764 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

1765 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

1766 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

1767 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

1768 
	#GL_REPLACE_EXT
 0x8062

	)

1769 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

1770 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

1771 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

1774 #i‚de‡
GL_EXT_ãxtuª3D


1775 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

1776 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

1777 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

1778 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

1779 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

1780 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

1781 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

1782 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

1783 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

1786 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


1787 
	#GL_FILTER4_SGIS
 0x8146

	)

1788 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

1791 #i‚de‡
GL_EXT_subãxtuª


1794 #i‚de‡
GL_EXT_c›y_ãxtuª


1797 #i‚de‡
GL_EXT_hi°ogøm


1798 
	#GL_HISTOGRAM_EXT
 0x8024

	)

1799 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

1800 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

1801 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

1802 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

1803 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

1804 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

1805 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

1806 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

1807 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

1808 
	#GL_MINMAX_EXT
 0x802E

	)

1809 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

1810 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

1811 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

1814 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


1815 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

1816 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

1817 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

1818 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

1819 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

1820 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

1821 
	#GL_REDUCE_EXT
 0x8016

	)

1822 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

1823 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

1824 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

1825 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

1826 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

1827 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

1828 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

1829 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

1830 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

1831 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

1832 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

1833 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

1834 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

1837 #i‚de‡
GL_SGI_cﬁ‹_m©rix


1838 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

1839 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

1840 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

1841 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

1842 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

1843 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

1844 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

1845 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

1846 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

1847 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

1848 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

1851 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


1852 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

1853 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

1854 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

1855 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

1856 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

1857 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

1858 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

1859 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

1860 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

1861 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

1862 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

1863 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

1864 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

1865 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

1866 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

1867 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

1870 #i‚de‡
GL_SGIS_pixñ_ãxtuª


1871 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

1872 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

1873 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

1874 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

1877 #i‚de‡
GL_SGIX_pixñ_ãxtuª


1878 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

1879 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

1882 #i‚de‡
GL_SGIS_ãxtuª4D


1883 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

1884 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

1885 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

1886 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

1887 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

1888 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

1889 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

1890 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

1891 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

1892 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

1895 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


1896 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

1897 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

1900 #i‚de‡
GL_EXT_cmyka


1901 
	#GL_CMYK_EXT
 0x800C

	)

1902 
	#GL_CMYKA_EXT
 0x800D

	)

1903 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

1904 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

1907 #i‚de‡
GL_EXT_ãxtuª_obje˘


1908 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

1909 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

1910 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

1911 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

1912 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

1915 #i‚de‡
GL_SGIS_dëaû_ãxtuª


1916 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

1917 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

1918 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

1919 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

1920 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

1921 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

1922 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

1923 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

1926 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


1927 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

1928 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

1929 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

1930 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

1933 #i‚de‡
GL_EXT_∑cked_pixñs


1934 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

1935 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

1936 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

1937 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

1938 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

1941 #i‚de‡
GL_SGIS_ãxtuª_lod


1942 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

1943 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

1944 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

1945 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

1948 #i‚de‡
GL_SGIS_mu…ißm∂e


1949 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

1950 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

1951 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

1952 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

1953 
	#GL_1PASS_SGIS
 0x80A1

	)

1954 
	#GL_2PASS_0_SGIS
 0x80A2

	)

1955 
	#GL_2PASS_1_SGIS
 0x80A3

	)

1956 
	#GL_4PASS_0_SGIS
 0x80A4

	)

1957 
	#GL_4PASS_1_SGIS
 0x80A5

	)

1958 
	#GL_4PASS_2_SGIS
 0x80A6

	)

1959 
	#GL_4PASS_3_SGIS
 0x80A7

	)

1960 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

1961 
	#GL_SAMPLES_SGIS
 0x80A9

	)

1962 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

1963 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

1964 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

1967 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


1968 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

1971 #i‚de‡
GL_EXT_vîãx_¨øy


1972 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

1973 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

1974 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

1975 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

1976 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

1977 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

1978 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

1979 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

1980 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

1981 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

1982 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

1983 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

1984 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

1985 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

1986 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

1987 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

1988 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

1989 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

1990 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

1991 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

1992 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

1993 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

1994 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

1995 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

1996 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

1997 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

1998 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

1999 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

2000 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

2001 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

2002 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

2003 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

2006 #i‚de‡
GL_EXT_misc_©åibuã


2009 #i‚de‡
GL_SGIS_gíî©e_mùm≠


2010 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

2011 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

2014 #i‚de‡
GL_SGIX_˛ùm≠


2015 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

2016 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

2017 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

2018 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

2019 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

2020 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

2021 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

2022 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

2023 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

2024 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

2025 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

2026 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

2029 #i‚de‡
GL_SGIX_shadow


2030 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

2031 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

2032 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

2033 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

2036 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


2037 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

2040 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


2041 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

2044 #i‚de‡
GL_EXT_bÀnd_mömax


2045 
	#GL_FUNC_ADD_EXT
 0x8006

	)

2046 
	#GL_MIN_EXT
 0x8007

	)

2047 
	#GL_MAX_EXT
 0x8008

	)

2048 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

2051 #i‚de‡
GL_EXT_bÀnd_subåa˘


2052 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

2053 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

2056 #i‚de‡
GL_EXT_bÀnd_logic_›


2059 #i‚de‡
GL_SGIX_öãæa˚


2060 
	#GL_INTERLACE_SGIX
 0x8094

	)

2063 #i‚de‡
GL_SGIX_pixñ_tûes


2064 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

2065 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

2066 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

2067 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

2068 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

2069 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

2070 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

2071 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

2074 #i‚de‡
GL_SGIS_ãxtuª_£À˘


2075 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

2076 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

2077 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

2078 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

2079 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

2080 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

2081 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

2082 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

2083 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

2084 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

2085 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

2086 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

2087 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

2088 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

2089 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

2090 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

2091 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

2092 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

2093 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

2094 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

2095 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

2096 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

2099 #i‚de‡
GL_SGIX_•rôe


2100 
	#GL_SPRITE_SGIX
 0x8148

	)

2101 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

2102 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

2103 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

2104 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

2105 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

2106 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

2109 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


2110 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

2113 #i‚de‡
GL_EXT_poöt_∑ømëîs


2114 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

2115 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

2116 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

2117 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

2120 #i‚de‡
GL_SGIS_poöt_∑ømëîs


2121 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

2122 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

2123 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

2124 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

2127 #i‚de‡
GL_SGIX_ö°rumíts


2128 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

2129 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

2132 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


2133 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

2134 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

2135 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

2136 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

2139 #i‚de‡
GL_SGIX_‰amezoom


2140 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

2141 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

2142 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

2145 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


2148 #i‚de‡
GL_FfdMaskSGIX


2149 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

2150 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

2153 #i‚de‡
GL_SGIX_pﬁynomül_ffd


2154 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

2155 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

2156 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

2157 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

2160 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


2161 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

2162 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

2165 #i‚de‡
GL_SGIX_Êush_ø°î


2168 #i‚de‡
GL_SGIX_dïth_ãxtuª


2169 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

2170 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

2171 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

2174 #i‚de‡
GL_SGIS_fog_fun˘i⁄


2175 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

2176 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

2177 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

2180 #i‚de‡
GL_SGIX_fog_off£t


2181 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

2182 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

2185 #i‚de‡
GL_HP_image_å™sf‹m


2186 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

2187 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

2188 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

2189 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

2190 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

2191 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

2192 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

2193 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

2194 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

2195 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

2196 
	#GL_CUBIC_HP
 0x815F

	)

2197 
	#GL_AVERAGE_HP
 0x8160

	)

2198 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

2199 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

2200 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

2203 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


2204 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

2205 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

2206 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

2207 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

2210 #i‚de‡
GL_INGR_∑Àâe_buf„r


2213 #i‚de‡
GL_SGIX_ãxtuª_add_ív


2214 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

2217 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


2220 #i‚de‡
GL_PGI_vîãx_höts


2221 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

2222 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

2223 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

2224 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

2225 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

2226 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

2227 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

2228 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

2229 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

2230 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

2231 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

2232 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

2233 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

2234 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

2235 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

2236 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

2237 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

2238 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

2239 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

2240 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

2241 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

2242 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

2245 #i‚de‡
GL_PGI_misc_höts


2246 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

2247 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

2248 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

2249 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

2250 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

2251 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

2252 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

2253 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

2254 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

2255 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

2256 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

2257 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

2258 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

2259 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

2260 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

2261 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

2262 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

2263 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

2264 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

2265 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

2268 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


2269 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

2270 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

2271 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

2272 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

2273 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

2274 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

2275 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

2278 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


2279 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

2282 #i‚de‡
GL_SGIX_li°_¥i‹ôy


2283 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

2286 #i‚de‡
GL_SGIX_ú_ö°rumít1


2287 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

2290 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


2291 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

2294 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


2295 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

2296 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

2297 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

2300 #i‚de‡
GL_SGIX_shadow_ambõ¡


2301 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

2304 #i‚de‡
GL_EXT_ödex_ãxtuª


2307 #i‚de‡
GL_EXT_ödex_m©îül


2308 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

2309 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

2310 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

2313 #i‚de‡
GL_EXT_ödex_func


2314 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

2315 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

2316 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

2319 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


2320 
	#GL_IUI_V2F_EXT
 0x81AD

	)

2321 
	#GL_IUI_V3F_EXT
 0x81AE

	)

2322 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

2323 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

2324 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

2325 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

2326 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

2327 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

2330 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


2331 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

2332 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

2335 #i‚de‡
GL_EXT_cuŒ_vîãx


2336 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

2337 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

2338 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

2341 #i‚de‡
GL_SGIX_y¸cb


2342 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

2343 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

2346 #i‚de‡
GL_SGIX_‰agmít_lightög


2347 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

2348 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

2349 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

2350 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

2351 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

2352 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

2353 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

2354 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

2355 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

2356 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

2357 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

2358 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

2359 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

2360 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

2361 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

2362 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

2363 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

2364 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

2365 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

2366 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

2369 #i‚de‡
GL_IBM_ø°îpos_˛ù


2370 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

2373 #i‚de‡
GL_HP_ãxtuª_lightög


2374 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

2375 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

2376 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

2379 #i‚de‡
GL_EXT_døw_ønge_ñemíts


2380 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

2381 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

2384 #i‚de‡
GL_WIN_ph⁄g_shadög


2385 
	#GL_PHONG_WIN
 0x80EA

	)

2386 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

2389 #i‚de‡
GL_WIN_•ecuœr_fog


2390 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

2393 #i‚de‡
GL_EXT_light_ãxtuª


2394 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

2395 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

2396 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

2397 
	#GL_ATTENUATION_EXT
 0x834D

	)

2398 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

2399 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

2400 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

2401 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

2402 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

2406 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


2407 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

2408 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

2411 #i‚de‡
GL_SGIX_im∑˘_pixñ_ãxtuª


2412 
	#GL_PIXEL_TEX_GEN_Q_CEILING_SGIX
 0x8184

	)

2413 
	#GL_PIXEL_TEX_GEN_Q_ROUND_SGIX
 0x8185

	)

2414 
	#GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX
 0x8186

	)

2415 
	#GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX
 0x8187

	)

2416 
	#GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX
 0x8188

	)

2417 
	#GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX
 0x8189

	)

2418 
	#GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX
 0x818A

	)

2421 #i‚de‡
GL_EXT_bgø


2422 
	#GL_BGR_EXT
 0x80E0

	)

2423 
	#GL_BGRA_EXT
 0x80E1

	)

2426 #i‚de‡
GL_SGIX_async


2427 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

2430 #i‚de‡
GL_SGIX_async_pixñ


2431 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

2432 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

2433 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

2434 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

2435 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

2436 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

2439 #i‚de‡
GL_SGIX_async_hi°ogøm


2440 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

2441 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

2444 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


2447 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


2448 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

2449 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

2450 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

2451 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

2452 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

2455 #i‚de‡
GL_HP_oc˛usi⁄_ã°


2456 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

2457 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

2460 #i‚de‡
GL_EXT_pixñ_å™sf‹m


2461 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

2462 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

2463 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

2464 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

2465 
	#GL_CUBIC_EXT
 0x8334

	)

2466 
	#GL_AVERAGE_EXT
 0x8335

	)

2467 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

2468 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

2469 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

2472 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


2475 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


2476 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

2479 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


2480 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

2481 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

2482 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

2485 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


2486 
	#GL_COLOR_SUM_EXT
 0x8458

	)

2487 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

2488 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

2489 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

2490 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

2491 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

2492 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

2495 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


2496 
	#GL_PERTURB_EXT
 0x85AE

	)

2497 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

2500 #i‚de‡
GL_EXT_mu…i_døw_¨øys


2503 #i‚de‡
GL_EXT_fog_co‹d


2504 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

2505 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

2506 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

2507 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

2508 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

2509 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

2510 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

2511 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

2514 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


2515 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

2516 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

2519 #i‚de‡
GL_EXT_co‹dö©e_‰ame


2520 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

2521 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

2522 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

2523 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

2524 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

2525 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

2526 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

2527 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

2528 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

2529 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

2530 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

2531 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

2532 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

2533 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

2536 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


2537 
	#GL_COMBINE_EXT
 0x8570

	)

2538 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

2539 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

2540 
	#GL_RGB_SCALE_EXT
 0x8573

	)

2541 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

2542 
	#GL_INTERPOLATE_EXT
 0x8575

	)

2543 
	#GL_CONSTANT_EXT
 0x8576

	)

2544 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

2545 
	#GL_PREVIOUS_EXT
 0x8578

	)

2546 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

2547 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

2548 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

2549 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

2550 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

2551 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

2552 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

2553 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

2554 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

2555 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

2556 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

2557 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

2560 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


2561 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

2564 #i‚de‡
GL_APPLE_å™sf‹m_höt


2565 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

2568 #i‚de‡
GL_SGIX_fog_sˇÀ


2569 
	#GL_FOG_SCALE_SGIX
 0x81FC

	)

2570 
	#GL_FOG_SCALE_VALUE_SGIX
 0x81FD

	)

2573 #i‚de‡
GL_SUNX_c⁄°™t_d©a


2574 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

2575 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

2578 #i‚de‡
GL_SUN_globÆ_Æpha


2579 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

2580 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

2583 #i‚de‡
GL_SUN_åüngÀ_li°


2584 
	#GL_RESTART_SUN
 0x0001

	)

2585 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

2586 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

2587 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

2588 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

2589 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

2590 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

2591 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

2592 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

2593 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

2594 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

2595 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

2596 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

2597 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

2598 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

2599 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

2600 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

2603 #i‚de‡
GL_SUN_vîãx


2606 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


2607 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

2608 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

2609 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

2610 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

2613 #i‚de‡
GL_INGR_cﬁ‹_˛amp


2614 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

2615 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

2616 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

2617 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

2618 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

2619 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

2620 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

2621 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

2624 #i‚de‡
GL_INGR_öãæa˚_ªad


2625 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

2628 #i‚de‡
GL_EXT_°ícû_wøp


2629 
	#GL_INCR_WRAP_EXT
 0x8507

	)

2630 
	#GL_DECR_WRAP_EXT
 0x8508

	)

2633 #i‚de‡
GL_EXT_422_pixñs


2634 
	#GL_422_EXT
 0x80CC

	)

2635 
	#GL_422_REV_EXT
 0x80CD

	)

2636 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

2637 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

2640 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


2641 
	#GL_NORMAL_MAP_NV
 0x8511

	)

2642 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

2645 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


2646 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

2647 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

2648 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

2649 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

2650 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

2651 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

2652 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

2653 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

2654 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

2655 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

2656 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

2657 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

2660 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


2661 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

2664 #i‚de‡
GL_EXT_ãxtuª_ív_add


2667 #i‚de‡
GL_EXT_ãxtuª_lod_büs


2668 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

2669 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

2670 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

2673 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


2674 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

2675 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

2678 #i‚de‡
GL_EXT_vîãx_weightög


2679 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 
GL_MODELVIEW_STACK_DEPTH


	)

2680 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

2681 
	#GL_MODELVIEW0_MATRIX_EXT
 
GL_MODELVIEW_MATRIX


	)

2682 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

2683 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

2684 
	#GL_MODELVIEW0_EXT
 
GL_MODELVIEW


	)

2685 
	#GL_MODELVIEW1_EXT
 0x850A

	)

2686 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

2687 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

2688 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

2689 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

2690 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

2691 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

2694 #i‚de‡
GL_NV_light_max_exp⁄ít


2695 
	#GL_MAX_SHININESS_NV
 0x8504

	)

2696 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

2699 #i‚de‡
GL_NV_vîãx_¨øy_ønge


2700 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

2701 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

2702 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

2703 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

2704 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

2707 #i‚de‡
GL_NV_ªgi°î_comböîs


2708 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

2709 
	#GL_VARIABLE_A_NV
 0x8523

	)

2710 
	#GL_VARIABLE_B_NV
 0x8524

	)

2711 
	#GL_VARIABLE_C_NV
 0x8525

	)

2712 
	#GL_VARIABLE_D_NV
 0x8526

	)

2713 
	#GL_VARIABLE_E_NV
 0x8527

	)

2714 
	#GL_VARIABLE_F_NV
 0x8528

	)

2715 
	#GL_VARIABLE_G_NV
 0x8529

	)

2716 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

2717 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

2718 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

2719 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

2720 
	#GL_SPARE0_NV
 0x852E

	)

2721 
	#GL_SPARE1_NV
 0x852F

	)

2722 
	#GL_DISCARD_NV
 0x8530

	)

2723 
	#GL_E_TIMES_F_NV
 0x8531

	)

2724 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

2725 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

2726 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

2727 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

2728 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

2729 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

2730 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

2731 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

2732 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

2733 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

2734 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

2735 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

2736 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

2737 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

2738 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

2739 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

2740 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

2741 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

2742 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

2743 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

2744 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

2745 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

2746 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

2747 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

2748 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

2749 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

2750 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

2751 
	#GL_COMBINER0_NV
 0x8550

	)

2752 
	#GL_COMBINER1_NV
 0x8551

	)

2753 
	#GL_COMBINER2_NV
 0x8552

	)

2754 
	#GL_COMBINER3_NV
 0x8553

	)

2755 
	#GL_COMBINER4_NV
 0x8554

	)

2756 
	#GL_COMBINER5_NV
 0x8555

	)

2757 
	#GL_COMBINER6_NV
 0x8556

	)

2758 
	#GL_COMBINER7_NV
 0x8557

	)

2766 #i‚de‡
GL_NV_fog_di°™˚


2767 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

2768 
	#GL_EYE_RADIAL_NV
 0x855B

	)

2769 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

2773 #i‚de‡
GL_NV_ãxgí_emboss


2774 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

2775 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

2776 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

2779 #i‚de‡
GL_NV_bÀnd_squ¨e


2782 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


2783 
	#GL_COMBINE4_NV
 0x8503

	)

2784 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

2785 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

2786 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

2787 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

2790 #i‚de‡
GL_MESA_ªsize_buf„rs


2793 #i‚de‡
GL_MESA_wödow_pos


2796 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


2797 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

2798 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

2799 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

2800 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

2803 #i‚de‡
GL_IBM_cuŒ_vîãx


2804 
	#GL_CULL_VERTEX_IBM
 103050

	)

2807 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


2810 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


2811 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

2812 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

2813 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

2814 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

2815 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

2816 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

2817 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

2818 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

2819 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

2820 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

2821 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

2822 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

2823 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

2824 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

2825 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

2826 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

2829 #i‚de‡
GL_SGIX_subßm∂e


2830 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

2831 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

2832 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

2833 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

2834 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

2837 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


2840 #i‚de‡
GL_SGIX_y¸cba


2841 
	#GL_YCRCB_SGIX
 0x8318

	)

2842 
	#GL_YCRCBA_SGIX
 0x8319

	)

2845 #i‚de‡
GL_SGI_dïth_∑ss_ö°rumít


2846 
	#GL_DEPTH_PASS_INSTRUMENT_SGIX
 0x8310

	)

2847 
	#GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX
 0x8311

	)

2848 
	#GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX
 0x8312

	)

2851 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2852 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2853 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2856 #i‚de‡
GL_3DFX_mu…ißm∂e


2857 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2858 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2859 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2860 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2863 #i‚de‡
GL_3DFX_tbuf„r


2866 #i‚de‡
GL_EXT_mu…ißm∂e


2867 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

2868 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

2869 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

2870 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

2871 
	#GL_1PASS_EXT
 0x80A1

	)

2872 
	#GL_2PASS_0_EXT
 0x80A2

	)

2873 
	#GL_2PASS_1_EXT
 0x80A3

	)

2874 
	#GL_4PASS_0_EXT
 0x80A4

	)

2875 
	#GL_4PASS_1_EXT
 0x80A5

	)

2876 
	#GL_4PASS_2_EXT
 0x80A6

	)

2877 
	#GL_4PASS_3_EXT
 0x80A7

	)

2878 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

2879 
	#GL_SAMPLES_EXT
 0x80A9

	)

2880 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

2881 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

2882 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

2883 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

2886 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


2887 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

2888 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

2891 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


2892 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

2895 #i‚de‡
GL_SGIX_ªßm∂e


2896 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

2897 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

2898 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

2899 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

2900 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

2903 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


2904 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

2905 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

2906 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

2907 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

2908 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

2909 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

2910 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

2911 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

2914 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


2915 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

2918 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


2919 
	#GL_DOT3_RGB_EXT
 0x8740

	)

2920 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

2923 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


2924 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

2925 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

2928 #i‚de‡
GL_NV_„n˚


2929 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

2930 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

2931 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

2934 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


2935 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

2938 #i‚de‡
GL_NV_evÆu©‹s


2939 
	#GL_EVAL_2D_NV
 0x86C0

	)

2940 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

2941 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

2942 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

2943 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

2944 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

2945 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

2946 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

2947 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

2948 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

2949 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

2950 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

2951 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

2952 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

2953 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

2954 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

2955 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

2956 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

2957 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

2958 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

2959 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

2960 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

2961 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

2962 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

2965 #i‚de‡
GL_NV_∑cked_dïth_°ícû


2966 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

2967 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

2970 #i‚de‡
GL_NV_ªgi°î_comböîs2


2971 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

2974 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


2977 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


2978 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

2979 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

2980 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

2981 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

2984 #i‚de‡
GL_NV_ãxtuª_shadî


2985 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

2986 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

2987 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

2988 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

2989 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

2990 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

2991 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

2992 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

2993 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

2994 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

2995 
	#GL_CULL_MODES_NV
 0x86E0

	)

2996 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

2997 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

2998 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

2999 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 
GL_OFFSET_TEXTURE_MATRIX_NV


	)

3000 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 
GL_OFFSET_TEXTURE_SCALE_NV


	)

3001 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 
GL_OFFSET_TEXTURE_BIAS_NV


	)

3002 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

3003 
	#GL_CONST_EYE_NV
 0x86E5

	)

3004 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

3005 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

3006 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

3007 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

3008 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

3009 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

3010 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

3011 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

3012 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

3013 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

3014 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

3015 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

3016 
	#GL_HILO_NV
 0x86F4

	)

3017 
	#GL_DSDT_NV
 0x86F5

	)

3018 
	#GL_DSDT_MAG_NV
 0x86F6

	)

3019 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

3020 
	#GL_HILO16_NV
 0x86F8

	)

3021 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

3022 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

3023 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

3024 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

3025 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

3026 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

3027 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

3028 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

3029 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

3030 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

3031 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

3032 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

3033 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

3034 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

3035 
	#GL_DSDT8_NV
 0x8709

	)

3036 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

3037 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

3038 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

3039 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

3040 
	#GL_HI_SCALE_NV
 0x870E

	)

3041 
	#GL_LO_SCALE_NV
 0x870F

	)

3042 
	#GL_DS_SCALE_NV
 0x8710

	)

3043 
	#GL_DT_SCALE_NV
 0x8711

	)

3044 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

3045 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

3046 
	#GL_HI_BIAS_NV
 0x8714

	)

3047 
	#GL_LO_BIAS_NV
 0x8715

	)

3048 
	#GL_DS_BIAS_NV
 0x8716

	)

3049 
	#GL_DT_BIAS_NV
 0x8717

	)

3050 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

3051 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

3052 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

3053 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

3054 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

3055 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

3056 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

3057 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

3060 #i‚de‡
GL_NV_ãxtuª_shadî2


3061 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

3064 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


3065 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

3068 #i‚de‡
GL_NV_vîãx_¥ogøm


3069 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

3070 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

3071 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

3072 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

3073 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

3074 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

3075 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

3076 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

3077 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

3078 
	#GL_IDENTITY_NV
 0x862A

	)

3079 
	#GL_INVERSE_NV
 0x862B

	)

3080 
	#GL_TRANSPOSE_NV
 0x862C

	)

3081 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

3082 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

3083 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

3084 
	#GL_MATRIX0_NV
 0x8630

	)

3085 
	#GL_MATRIX1_NV
 0x8631

	)

3086 
	#GL_MATRIX2_NV
 0x8632

	)

3087 
	#GL_MATRIX3_NV
 0x8633

	)

3088 
	#GL_MATRIX4_NV
 0x8634

	)

3089 
	#GL_MATRIX5_NV
 0x8635

	)

3090 
	#GL_MATRIX6_NV
 0x8636

	)

3091 
	#GL_MATRIX7_NV
 0x8637

	)

3092 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

3093 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

3094 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

3095 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

3096 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

3097 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

3098 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

3099 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

3100 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

3101 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

3102 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

3103 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

3104 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

3105 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

3106 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

3107 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

3108 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

3109 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

3110 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

3111 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

3112 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

3113 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

3114 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

3115 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

3116 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

3117 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

3118 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

3119 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

3120 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

3121 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

3122 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

3123 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

3124 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

3125 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

3126 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

3127 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

3128 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

3129 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

3130 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

3131 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

3132 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

3133 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

3134 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

3135 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

3136 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

3137 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

3138 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

3139 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

3140 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

3141 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

3142 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

3143 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

3144 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

3145 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

3146 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

3147 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

3148 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

3149 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

3150 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

3151 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

3154 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


3155 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

3156 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

3157 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

3160 #i‚de‡
GL_SGIX_sˇÀbüs_höt


3161 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

3164 #i‚de‡
GL_OML_öãæa˚


3165 
	#GL_INTERLACE_OML
 0x8980

	)

3166 
	#GL_INTERLACE_READ_OML
 0x8981

	)

3169 #i‚de‡
GL_OML_subßm∂e


3170 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

3171 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

3174 #i‚de‡
GL_OML_ªßm∂e


3175 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

3176 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

3177 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

3178 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

3179 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

3180 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

3183 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


3184 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

3185 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

3188 #i‚de‡
GL_ATI_ívm≠_bumpm≠


3189 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

3190 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

3191 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

3192 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

3193 
	#GL_DUDV_ATI
 0x8779

	)

3194 
	#GL_DU8DV8_ATI
 0x877A

	)

3195 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

3196 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

3199 #i‚de‡
GL_ATI_‰agmít_shadî


3200 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

3201 
	#GL_REG_0_ATI
 0x8921

	)

3202 
	#GL_REG_1_ATI
 0x8922

	)

3203 
	#GL_REG_2_ATI
 0x8923

	)

3204 
	#GL_REG_3_ATI
 0x8924

	)

3205 
	#GL_REG_4_ATI
 0x8925

	)

3206 
	#GL_REG_5_ATI
 0x8926

	)

3207 
	#GL_REG_6_ATI
 0x8927

	)

3208 
	#GL_REG_7_ATI
 0x8928

	)

3209 
	#GL_REG_8_ATI
 0x8929

	)

3210 
	#GL_REG_9_ATI
 0x892A

	)

3211 
	#GL_REG_10_ATI
 0x892B

	)

3212 
	#GL_REG_11_ATI
 0x892C

	)

3213 
	#GL_REG_12_ATI
 0x892D

	)

3214 
	#GL_REG_13_ATI
 0x892E

	)

3215 
	#GL_REG_14_ATI
 0x892F

	)

3216 
	#GL_REG_15_ATI
 0x8930

	)

3217 
	#GL_REG_16_ATI
 0x8931

	)

3218 
	#GL_REG_17_ATI
 0x8932

	)

3219 
	#GL_REG_18_ATI
 0x8933

	)

3220 
	#GL_REG_19_ATI
 0x8934

	)

3221 
	#GL_REG_20_ATI
 0x8935

	)

3222 
	#GL_REG_21_ATI
 0x8936

	)

3223 
	#GL_REG_22_ATI
 0x8937

	)

3224 
	#GL_REG_23_ATI
 0x8938

	)

3225 
	#GL_REG_24_ATI
 0x8939

	)

3226 
	#GL_REG_25_ATI
 0x893A

	)

3227 
	#GL_REG_26_ATI
 0x893B

	)

3228 
	#GL_REG_27_ATI
 0x893C

	)

3229 
	#GL_REG_28_ATI
 0x893D

	)

3230 
	#GL_REG_29_ATI
 0x893E

	)

3231 
	#GL_REG_30_ATI
 0x893F

	)

3232 
	#GL_REG_31_ATI
 0x8940

	)

3233 
	#GL_CON_0_ATI
 0x8941

	)

3234 
	#GL_CON_1_ATI
 0x8942

	)

3235 
	#GL_CON_2_ATI
 0x8943

	)

3236 
	#GL_CON_3_ATI
 0x8944

	)

3237 
	#GL_CON_4_ATI
 0x8945

	)

3238 
	#GL_CON_5_ATI
 0x8946

	)

3239 
	#GL_CON_6_ATI
 0x8947

	)

3240 
	#GL_CON_7_ATI
 0x8948

	)

3241 
	#GL_CON_8_ATI
 0x8949

	)

3242 
	#GL_CON_9_ATI
 0x894A

	)

3243 
	#GL_CON_10_ATI
 0x894B

	)

3244 
	#GL_CON_11_ATI
 0x894C

	)

3245 
	#GL_CON_12_ATI
 0x894D

	)

3246 
	#GL_CON_13_ATI
 0x894E

	)

3247 
	#GL_CON_14_ATI
 0x894F

	)

3248 
	#GL_CON_15_ATI
 0x8950

	)

3249 
	#GL_CON_16_ATI
 0x8951

	)

3250 
	#GL_CON_17_ATI
 0x8952

	)

3251 
	#GL_CON_18_ATI
 0x8953

	)

3252 
	#GL_CON_19_ATI
 0x8954

	)

3253 
	#GL_CON_20_ATI
 0x8955

	)

3254 
	#GL_CON_21_ATI
 0x8956

	)

3255 
	#GL_CON_22_ATI
 0x8957

	)

3256 
	#GL_CON_23_ATI
 0x8958

	)

3257 
	#GL_CON_24_ATI
 0x8959

	)

3258 
	#GL_CON_25_ATI
 0x895A

	)

3259 
	#GL_CON_26_ATI
 0x895B

	)

3260 
	#GL_CON_27_ATI
 0x895C

	)

3261 
	#GL_CON_28_ATI
 0x895D

	)

3262 
	#GL_CON_29_ATI
 0x895E

	)

3263 
	#GL_CON_30_ATI
 0x895F

	)

3264 
	#GL_CON_31_ATI
 0x8960

	)

3265 
	#GL_MOV_ATI
 0x8961

	)

3266 
	#GL_ADD_ATI
 0x8963

	)

3267 
	#GL_MUL_ATI
 0x8964

	)

3268 
	#GL_SUB_ATI
 0x8965

	)

3269 
	#GL_DOT3_ATI
 0x8966

	)

3270 
	#GL_DOT4_ATI
 0x8967

	)

3271 
	#GL_MAD_ATI
 0x8968

	)

3272 
	#GL_LERP_ATI
 0x8969

	)

3273 
	#GL_CND_ATI
 0x896A

	)

3274 
	#GL_CND0_ATI
 0x896B

	)

3275 
	#GL_DOT2_ADD_ATI
 0x896C

	)

3276 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

3277 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

3278 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

3279 
	#GL_NUM_PASSES_ATI
 0x8970

	)

3280 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

3281 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

3282 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

3283 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

3284 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

3285 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

3286 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

3287 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

3288 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

3289 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

3290 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

3291 
	#GL_RED_BIT_ATI
 0x00000001

	)

3292 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

3293 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

3294 
	#GL_2X_BIT_ATI
 0x00000001

	)

3295 
	#GL_4X_BIT_ATI
 0x00000002

	)

3296 
	#GL_8X_BIT_ATI
 0x00000004

	)

3297 
	#GL_HALF_BIT_ATI
 0x00000008

	)

3298 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

3299 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

3300 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

3301 
	#GL_COMP_BIT_ATI
 0x00000002

	)

3302 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

3303 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

3306 #i‚de‡
GL_ATI_≤_åüngÀs


3307 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

3308 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

3309 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

3310 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

3311 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

3312 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

3313 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

3314 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

3315 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

3318 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


3319 
	#GL_STATIC_ATI
 0x8760

	)

3320 
	#GL_DYNAMIC_ATI
 0x8761

	)

3321 
	#GL_PRESERVE_ATI
 0x8762

	)

3322 
	#GL_DISCARD_ATI
 0x8763

	)

3323 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

3324 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

3325 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

3326 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

3329 #i‚de‡
GL_EXT_vîãx_shadî


3330 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

3331 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

3332 
	#GL_OP_INDEX_EXT
 0x8782

	)

3333 
	#GL_OP_NEGATE_EXT
 0x8783

	)

3334 
	#GL_OP_DOT3_EXT
 0x8784

	)

3335 
	#GL_OP_DOT4_EXT
 0x8785

	)

3336 
	#GL_OP_MUL_EXT
 0x8786

	)

3337 
	#GL_OP_ADD_EXT
 0x8787

	)

3338 
	#GL_OP_MADD_EXT
 0x8788

	)

3339 
	#GL_OP_FRAC_EXT
 0x8789

	)

3340 
	#GL_OP_MAX_EXT
 0x878A

	)

3341 
	#GL_OP_MIN_EXT
 0x878B

	)

3342 
	#GL_OP_SET_GE_EXT
 0x878C

	)

3343 
	#GL_OP_SET_LT_EXT
 0x878D

	)

3344 
	#GL_OP_CLAMP_EXT
 0x878E

	)

3345 
	#GL_OP_FLOOR_EXT
 0x878F

	)

3346 
	#GL_OP_ROUND_EXT
 0x8790

	)

3347 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

3348 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

3349 
	#GL_OP_POWER_EXT
 0x8793

	)

3350 
	#GL_OP_RECIP_EXT
 0x8794

	)

3351 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

3352 
	#GL_OP_SUB_EXT
 0x8796

	)

3353 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

3354 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

3355 
	#GL_OP_MOV_EXT
 0x8799

	)

3356 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

3357 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

3358 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

3359 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

3360 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

3361 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

3362 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

3363 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

3364 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

3365 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

3366 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

3367 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

3368 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

3369 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

3370 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

3371 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

3372 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

3373 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

3374 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

3375 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

3376 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

3377 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

3378 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

3379 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

3380 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

3381 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

3382 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

3383 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

3384 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

3385 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

3386 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

3387 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

3388 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

3389 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

3390 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

3391 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

3392 
	#GL_SCALAR_EXT
 0x87BE

	)

3393 
	#GL_VECTOR_EXT
 0x87BF

	)

3394 
	#GL_MATRIX_EXT
 0x87C0

	)

3395 
	#GL_VARIANT_EXT
 0x87C1

	)

3396 
	#GL_INVARIANT_EXT
 0x87C2

	)

3397 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

3398 
	#GL_LOCAL_EXT
 0x87C4

	)

3399 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

3400 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

3401 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

3402 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

3403 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

3404 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

3405 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

3406 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

3407 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

3408 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

3409 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

3410 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

3411 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

3412 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

3413 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

3414 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

3415 
	#GL_X_EXT
 0x87D5

	)

3416 
	#GL_Y_EXT
 0x87D6

	)

3417 
	#GL_Z_EXT
 0x87D7

	)

3418 
	#GL_W_EXT
 0x87D8

	)

3419 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

3420 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

3421 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

3422 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

3423 
	#GL_ZERO_EXT
 0x87DD

	)

3424 
	#GL_ONE_EXT
 0x87DE

	)

3425 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

3426 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

3427 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

3428 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

3429 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

3430 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

3431 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

3432 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

3433 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

3434 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

3435 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

3436 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

3437 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

3438 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

3439 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

3442 #i‚de‡
GL_ATI_vîãx_°ªams


3443 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

3444 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

3445 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

3446 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

3447 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

3448 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

3449 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

3450 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

3451 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

3452 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

3455 #i‚de‡
GL_ATI_ñemít_¨øy


3456 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

3457 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

3458 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

3461 #i‚de‡
GL_SUN_mesh_¨øy


3462 
	#GL_QUAD_MESH_SUN
 0x8614

	)

3463 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

3466 #i‚de‡
GL_SUN_¶i˚_accum


3467 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

3470 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


3471 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

3474 #i‚de‡
GL_NV_dïth_˛amp


3475 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

3478 #i‚de‡
GL_NV_oc˛usi⁄_quîy


3479 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

3480 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

3481 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

3482 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

3485 #i‚de‡
GL_NV_poöt_•rôe


3486 
	#GL_POINT_SPRITE_NV
 0x8861

	)

3487 
	#GL_COORD_REPLACE_NV
 0x8862

	)

3488 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

3491 #i‚de‡
GL_NV_ãxtuª_shadî3


3492 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

3493 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

3494 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

3495 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

3496 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

3497 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

3498 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

3499 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

3500 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

3501 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

3502 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

3503 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

3504 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

3505 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

3506 
	#GL_HILO8_NV
 0x885E

	)

3507 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

3508 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

3511 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


3514 #i‚de‡
GL_EXT_shadow_funcs


3517 #i‚de‡
GL_EXT_°ícû_two_side


3518 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

3519 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

3522 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


3523 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

3526 #i‚de‡
GL_APPLE_˛õ¡_°‹age


3527 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

3530 #i‚de‡
GL_APPLE_ñemít_¨øy


3531 
	#GL_ELEMENT_ARRAY_APPLE
 0x8768

	)

3532 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8769

	)

3533 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x876A

	)

3536 #i‚de‡
GL_APPLE_„n˚


3537 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

3538 
	#GL_FENCE_APPLE
 0x8A0B

	)

3541 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


3542 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

3545 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


3546 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

3547 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

3548 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

3549 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

3550 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

3551 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

3554 #i‚de‡
GL_APPLE_ycb¸_422


3555 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

3556 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

3557 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

3560 #i‚de‡
GL_S3_s3tc


3561 
	#GL_RGB_S3TC
 0x83A0

	)

3562 
	#GL_RGB4_S3TC
 0x83A1

	)

3563 
	#GL_RGBA_S3TC
 0x83A2

	)

3564 
	#GL_RGBA4_S3TC
 0x83A3

	)

3567 #i‚de‡
GL_ATI_døw_buf„rs


3568 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

3569 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

3570 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

3571 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

3572 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

3573 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

3574 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

3575 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

3576 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

3577 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

3578 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

3579 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

3580 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

3581 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

3582 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

3583 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

3584 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

3587 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


3588 
	#GL_TYPE_RGBA_FLOAT_ATI
 0x8820

	)

3589 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

3592 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


3593 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

3594 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

3595 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

3598 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


3599 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

3600 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

3601 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

3602 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

3603 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

3604 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

3605 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

3606 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

3607 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

3608 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

3609 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

3610 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

3613 #i‚de‡
GL_NV_Êﬂt_buf„r


3614 
	#GL_FLOAT_R_NV
 0x8880

	)

3615 
	#GL_FLOAT_RG_NV
 0x8881

	)

3616 
	#GL_FLOAT_RGB_NV
 0x8882

	)

3617 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

3618 
	#GL_FLOAT_R16_NV
 0x8884

	)

3619 
	#GL_FLOAT_R32_NV
 0x8885

	)

3620 
	#GL_FLOAT_RG16_NV
 0x8886

	)

3621 
	#GL_FLOAT_RG32_NV
 0x8887

	)

3622 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

3623 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

3624 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

3625 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

3626 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

3627 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

3628 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

3631 #i‚de‡
GL_NV_‰agmít_¥ogøm


3632 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

3633 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

3634 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

3635 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

3636 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

3637 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

3640 #i‚de‡
GL_NV_hÆf_Êﬂt


3641 
	#GL_HALF_FLOAT_NV
 0x140B

	)

3644 #i‚de‡
GL_NV_pixñ_d©a_ønge


3645 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

3646 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

3647 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

3648 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

3649 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

3650 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

3653 #i‚de‡
GL_NV_¥imôive_ª°¨t


3654 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

3655 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

3658 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


3659 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

3662 #i‚de‡
GL_NV_vîãx_¥ogøm2


3665 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


3668 #i‚de‡
GL_ATI_£∑øã_°ícû


3669 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

3670 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

3671 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

3672 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

3675 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


3678 #i‚de‡
GL_OES_ªad_f‹m©


3679 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

3680 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

3683 #i‚de‡
GL_EXT_dïth_bounds_ã°


3684 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

3685 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

3688 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


3689 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

3690 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

3691 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

3694 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


3695 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

3696 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

3699 #i‚de‡
GL_MESA_∑ck_övît


3700 
	#GL_PACK_INVERT_MESA
 0x8758

	)

3703 #i‚de‡
GL_MESA_ycb¸_ãxtuª


3704 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

3705 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

3706 
	#GL_YCBCR_MESA
 0x8757

	)

3709 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


3710 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

3711 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

3712 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

3713 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

3716 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


3719 #i‚de‡
GL_NV_‰agmít_¥ogøm2


3720 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

3721 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

3722 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

3723 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

3724 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

3727 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


3732 #i‚de‡
GL_NV_vîãx_¥ogøm3


3736 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


3737 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

3738 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

3739 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

3740 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

3741 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

3742 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

3743 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

3744 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

3745 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

3746 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

3747 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

3748 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

3749 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

3750 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

3751 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

3752 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

3753 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

3754 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

3755 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

3756 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

3757 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

3758 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

3759 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

3760 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

3761 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

3762 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

3763 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

3764 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

3765 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

3766 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

3767 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

3768 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

3769 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

3770 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

3771 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

3772 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

3773 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

3774 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

3775 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

3776 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

3777 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

3778 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

3779 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

3780 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

3781 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

3782 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

3783 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

3784 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

3785 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

3786 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

3787 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

3790 #i‚de‡
GL_GREMEDY_°rög_m¨kî


3793 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


3794 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

3795 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

3796 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

3797 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

3800 #i‚de‡
GL_EXT_°ícû_˛ór_èg


3801 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

3802 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

3805 #i‚de‡
GL_EXT_ãxtuª_sRGB


3806 
	#GL_SRGB_EXT
 0x8C40

	)

3807 
	#GL_SRGB8_EXT
 0x8C41

	)

3808 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

3809 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

3810 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

3811 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

3812 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

3813 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

3814 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

3815 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

3816 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

3817 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

3818 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

3819 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

3820 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

3821 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

3824 #i‚de‡
GL_EXT_‰amebuf„r_blô


3825 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

3826 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

3827 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 
GL_FRAMEBUFFER_BINDING_EXT


	)

3828 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

3831 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


3832 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

3833 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

3834 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

3837 #i‚de‡
GL_MESAX_ãxtuª_°ack


3838 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

3839 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

3840 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

3841 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

3842 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

3843 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

3846 #i‚de‡
GL_EXT_timî_quîy


3847 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

3850 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


3853 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


3854 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

3855 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

3858 #i‚de‡
GL_NV_gpu_¥ogøm4


3859 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

3860 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

3861 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

3862 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

3863 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

3864 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

3865 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

3866 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

3869 #i‚de‡
GL_NV_geomëry_¥ogøm4


3870 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

3871 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

3872 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

3873 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

3874 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

3875 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

3876 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

3877 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

3878 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

3879 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

3880 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

3881 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

3882 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

3883 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

3884 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

3885 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

3888 #i‚de‡
GL_EXT_geomëry_shadî4


3889 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

3894 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

3895 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

3896 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

3897 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

3898 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

3899 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

3911 #i‚de‡
GL_NV_vîãx_¥ogøm4


3912 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

3915 #i‚de‡
GL_EXT_gpu_shadî4


3916 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

3917 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

3918 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

3919 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

3920 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

3921 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

3922 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

3923 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

3924 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

3925 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

3926 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

3927 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

3928 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

3929 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

3930 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

3931 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

3932 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

3933 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

3934 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

3935 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

3936 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

3937 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

3938 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

3939 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

3940 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

3943 #i‚de‡
GL_EXT_døw_ö°™˚d


3946 #i‚de‡
GL_EXT_∑cked_Êﬂt


3947 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

3948 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

3949 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

3952 #i‚de‡
GL_EXT_ãxtuª_¨øy


3953 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

3954 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

3955 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

3956 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

3957 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

3958 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

3959 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

3960 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

3964 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


3965 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

3966 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

3967 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

3968 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

3969 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

3972 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


3973 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

3974 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

3975 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

3976 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

3979 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


3980 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

3981 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

3982 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

3983 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

3986 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


3987 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

3988 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

3989 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

3992 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


3993 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

3994 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

3995 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

3996 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

3999 #i‚de‡
GL_NV_‰agmít_¥ogøm4


4002 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


4003 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

4004 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

4005 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

4006 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

4009 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


4010 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

4011 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

4014 #i‚de‡
GL_NV_geomëry_shadî4


4017 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


4018 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

4019 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

4020 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

4021 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

4022 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

4025 #i‚de‡
GL_EXT_døw_buf„rs2


4028 #i‚de‡
GL_NV_å™sf‹m_„edback


4029 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

4030 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

4031 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

4032 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

4033 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

4034 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

4035 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

4036 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

4037 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

4038 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

4039 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

4040 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

4041 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

4042 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

4043 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

4044 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

4045 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

4046 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

4047 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

4048 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV
 0x8C8A

	)

4049 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

4050 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

4051 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

4052 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

4053 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

4056 #i‚de‡
GL_EXT_bödabÀ_unif‹m


4057 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

4058 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

4059 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

4060 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

4061 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

4062 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

4065 #i‚de‡
GL_EXT_ãxtuª_öãgî


4066 
	#GL_RGBA32UI_EXT
 0x8D70

	)

4067 
	#GL_RGB32UI_EXT
 0x8D71

	)

4068 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

4069 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

4070 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

4071 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

4072 
	#GL_RGBA16UI_EXT
 0x8D76

	)

4073 
	#GL_RGB16UI_EXT
 0x8D77

	)

4074 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

4075 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

4076 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

4077 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

4078 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

4079 
	#GL_RGB8UI_EXT
 0x8D7D

	)

4080 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

4081 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

4082 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

4083 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

4084 
	#GL_RGBA32I_EXT
 0x8D82

	)

4085 
	#GL_RGB32I_EXT
 0x8D83

	)

4086 
	#GL_ALPHA32I_EXT
 0x8D84

	)

4087 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

4088 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

4089 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

4090 
	#GL_RGBA16I_EXT
 0x8D88

	)

4091 
	#GL_RGB16I_EXT
 0x8D89

	)

4092 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

4093 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

4094 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

4095 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

4096 
	#GL_RGBA8I_EXT
 0x8D8E

	)

4097 
	#GL_RGB8I_EXT
 0x8D8F

	)

4098 
	#GL_ALPHA8I_EXT
 0x8D90

	)

4099 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

4100 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

4101 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

4102 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

4103 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

4104 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

4105 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

4106 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

4107 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

4108 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

4109 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

4110 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

4111 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

4112 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

4115 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


4118 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


4119 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

4120 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

4121 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

4122 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

4125 #i‚de‡
GL_NV_¥e£¡_video


4126 
	#GL_FRAME_NV
 0x8E26

	)

4127 
	#GL_FIELDS_NV
 0x8E27

	)

4128 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

4129 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

4130 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

4131 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

4134 #i‚de‡
GL_EXT_å™sf‹m_„edback


4135 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

4136 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

4137 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

4138 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

4139 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

4140 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

4141 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

4142 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

4143 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

4144 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

4145 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

4146 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

4147 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

4148 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

4149 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

4152 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


4153 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

4154 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

4155 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

4158 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


4162 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


4163 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

4164 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

4165 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

4166 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

4167 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

4170 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


4171 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

4172 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

4173 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

4174 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

4175 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

4176 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

4177 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

4178 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

4179 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

4180 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

4183 #i‚de‡
GL_NV_å™sf‹m_„edback2


4184 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

4185 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

4186 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

4187 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

4190 #i‚de‡
GL_ATI_memöfo


4191 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

4192 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

4193 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

4196 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


4197 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

4198 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

4199 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

4200 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

4201 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

4202 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

4203 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

4206 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


4209 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


4210 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

4211 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

4212 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

4213 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

4214 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

4215 
	#GL_DISCRETE_AMD
 0x9006

	)

4216 
	#GL_CONTINUOUS_AMD
 0x9007

	)

4219 #i‚de‡
GL_EXT_¥ovokög_vîãx


4220 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

4221 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

4222 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

4223 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

4226 #i‚de‡
GL_EXT_ãxtuª_¢‹m


4227 
	#GL_ALPHA_SNORM
 0x9010

	)

4228 
	#GL_LUMINANCE_SNORM
 0x9011

	)

4229 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

4230 
	#GL_INTENSITY_SNORM
 0x9013

	)

4231 
	#GL_ALPHA8_SNORM
 0x9014

	)

4232 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

4233 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

4234 
	#GL_INTENSITY8_SNORM
 0x9017

	)

4235 
	#GL_ALPHA16_SNORM
 0x9018

	)

4236 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

4237 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

4238 
	#GL_INTENSITY16_SNORM
 0x901B

	)

4254 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


4257 #i‚de‡
GL_APPLE_ãxtuª_ønge


4258 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

4259 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

4260 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

4261 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

4266 #i‚de‡
GL_APPLE_Êﬂt_pixñs


4267 
	#GL_HALF_APPLE
 0x140B

	)

4268 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

4269 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

4270 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

4271 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

4272 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

4273 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

4274 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

4275 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

4276 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

4277 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

4278 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

4279 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

4280 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

4283 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


4284 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

4285 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

4286 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

4287 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

4288 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

4289 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

4290 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

4291 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

4292 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

4293 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

4296 #i‚de‡
GL_APPLE_aux_dïth_°ícû


4297 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

4300 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


4301 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

4302 
	#GL_RELEASED_APPLE
 0x8A19

	)

4303 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

4304 
	#GL_RETAINED_APPLE
 0x8A1B

	)

4305 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

4306 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

4309 #i‚de‡
GL_APPLE_row_byãs


4310 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

4311 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

4314 #i‚de‡
GL_APPLE_rgb_422


4315 
	#GL_RGB_422_APPLE
 0x8A1F

	)

4320 #i‚de‡
GL_NV_video_ˇ±uª


4321 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

4322 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

4323 
	#GL_FIELD_UPPER_NV
 0x9022

	)

4324 
	#GL_FIELD_LOWER_NV
 0x9023

	)

4325 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

4326 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

4327 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

4328 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

4329 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

4330 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

4331 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

4332 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

4333 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

4334 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

4335 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

4336 
	#GL_SUCCESS_NV
 0x902F

	)

4337 
	#GL_FAILURE_NV
 0x9030

	)

4338 
	#GL_YCBYCR8_422_NV
 0x9031

	)

4339 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

4340 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

4341 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

4342 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

4343 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

4344 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

4345 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

4346 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

4347 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

4348 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

4349 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

4352 #i‚de‡
GL_NV_c›y_image


4355 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


4356 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

4359 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


4362 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


4363 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

4364 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

4365 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

4368 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


4369 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

4370 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

4371 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

4372 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

4373 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

4374 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

4375 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

4376 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

4377 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

4378 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

4379 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

4380 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

4381 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

4382 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

4383 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

4384 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

4385 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

4386 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

4387 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

4388 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

4389 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

4390 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

4393 #i‚de‡
GL_NV_ãxtuª_b¨rõr


4399 
	~<°ddef.h
>

4400 #i‚de‡
GL_VERSION_2_0


4402 
	tGLch¨
;

4405 #i‚de‡
GL_VERSION_1_5


4407 
±rdiff_t
 
	tGLöçå
;

4408 
±rdiff_t
 
	tGLsizeùå
;

4411 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4413 
±rdiff_t
 
	tGLöçåARB
;

4414 
±rdiff_t
 
	tGLsizeùåARB
;

4417 #i‚de‡
GL_ARB_shadî_obje˘s


4419 
	tGLch¨ARB
;

4420 
	tGLh™dÀARB
;

4424 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


4425 
	tGLhÆfARB
;

4428 #i‚de‡
GL_NV_hÆf_Êﬂt


4429 
	tGLhÆfNV
;

4432 #i‚de‡
GLEXT_64_TYPES_DEFINED


4434 
	#GLEXT_64_TYPES_DEFINED


	)

4437 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

4438 
	~<öây≥s.h
>

4439 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

4440 
	~<öây≥s.h
>

4441 #i‡
deföed
(
__STDC__
)

4442 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

4443 
	töt64_t
;

4444 
	tuöt64_t
;

4446 
	töt64_t
;

4447 
	tuöt64_t
;

4450 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

4451 
	~<öây≥s.h
>

4452 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

4453 
	~<°döt.h
>

4454 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

4455 
	töt32_t
;

4456 
	töt64_t
;

4457 
	tuöt64_t
;

4458 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

4459 
	~<°döt.h
>

4460 #ñi‡
deföed
(
_WIN32
)

4461 
__öt32
 
	töt32_t
;

4462 
__öt64
 
	töt64_t
;

4463 
	t__öt64
 
	tuöt64_t
;

4466 
	~<öây≥s.h
>

4470 #i‚de‡
GL_EXT_timî_quîy


4471 
öt64_t
 
	tGLöt64EXT
;

4472 
uöt64_t
 
	tGLuöt64EXT
;

4475 #i‚de‡
ARB_sync


4476 
öt64_t
 
	tGLöt64
;

4477 
uöt64_t
 
	tGLuöt64
;

4478 
__GLsync
 *
	tGLsync
;

4481 #i‚de‡
GL_VERSION_1_2


4482 
	#GL_VERSION_1_2
 1

	)

4483 #ifde‡
GL_GLEXT_PROTOTYPES


4484 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

4485 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
);

4486 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

4487 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

4488 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4489 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

4491 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

4492 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

4493 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

4494 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4495 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

4496 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4499 #i‚de‡
GL_VERSION_1_2_DEPRECATED


4500 
	#GL_VERSION_1_2_DEPRECATED
 1

	)

4501 #ifde‡
GL_GLEXT_PROTOTYPES


4502 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4503 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4504 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4505 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4506 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4507 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4508 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

4509 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4510 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

4511 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

4512 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

4513 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
, GLíum, 
GLÊﬂt
);

4514 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

4515 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
, GLíum, 
GLöt
);

4516 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

4517 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

4518 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

4519 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

4520 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4521 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

4522 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

4523 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

4524 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4525 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4526 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

4527 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

4528 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

4529 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

4530 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

4531 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
, GLíum, 
GLboﬁón
);

4532 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
);

4533 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
);

4535 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4536 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4537 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4538 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4539 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

4540 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4541 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4542 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

4543 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

4544 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4545 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4546 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

4547 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4548 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

4549 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4550 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4551 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4552 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

4553 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4554 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4555 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

4556 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

4557 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4558 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4559 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4560 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4561 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4562 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4563 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4564 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4565 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

4566 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

4569 #i‚de‡
GL_VERSION_1_3


4570 
	#GL_VERSION_1_3
 1

	)

4571 #ifde‡
GL_GLEXT_PROTOTYPES


4572 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
);

4573 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
, 
GLboﬁón
);

4574 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

4575 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

4576 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

4577 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

4578 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

4579 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

4580 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

4582 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

4583 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4584 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4585 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4586 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4587 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4588 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4589 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

4590 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

4593 #i‚de‡
GL_VERSION_1_3_DEPRECATED


4594 
	#GL_VERSION_1_3_DEPRECATED
 1

	)

4595 #ifde‡
GL_GLEXT_PROTOTYPES


4596 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
);

4597 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
, 
GLdoubÀ
);

4598 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4599 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
, 
GLÊﬂt
);

4600 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4601 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
, 
GLöt
);

4602 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
, c⁄° 
GLöt
 *);

4603 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
, 
GLsh‹t
);

4604 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4605 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
, 
GLdoubÀ
, GLdouble);

4606 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4607 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
, 
GLÊﬂt
, GLfloat);

4608 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4609 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
, 
GLöt
, GLint);

4610 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
, c⁄° 
GLöt
 *);

4611 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
, 
GLsh‹t
, GLshort);

4612 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4613 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

4614 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4615 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

4616 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4617 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
, 
GLöt
, GLint, GLint);

4618 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
, c⁄° 
GLöt
 *);

4619 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

4620 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4621 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4622 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

4623 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4624 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4625 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

4626 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
, c⁄° 
GLöt
 *);

4627 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

4628 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
, c⁄° 
GLsh‹t
 *);

4629 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

4630 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

4631 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *);

4632 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *);

4634 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

4635 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

4636 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4637 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

4638 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4639 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

4640 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4641 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

4642 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4643 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

4644 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4645 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

4646 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4647 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

4648 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4649 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

4650 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4651 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

4652 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4653 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

4654 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4655 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

4656 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4657 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

4658 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4659 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

4660 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4661 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

4662 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4663 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

4664 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4665 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

4666 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4667 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4668 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4669 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4670 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4673 #i‚de‡
GL_VERSION_1_4


4674 
	#GL_VERSION_1_4
 1

	)

4675 #ifde‡
GL_GLEXT_PROTOTYPES


4676 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

4677 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

4678 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

4679 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
, 
GLÊﬂt
);

4680 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

4681 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
, 
GLöt
);

4682 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
, c⁄° 
GLöt
 *);

4684 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

4685 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

4686 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

4687 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4688 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4689 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4690 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4693 #i‚de‡
GL_VERSION_1_4_DEPRECATED


4694 
	#GL_VERSION_1_4_DEPRECATED
 1

	)

4695 #ifde‡
GL_GLEXT_PROTOTYPES


4696 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
);

4697 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *);

4698 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
);

4699 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *);

4700 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

4701 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
, GLbyte, GLbyte);

4702 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *);

4703 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
, GLdouble, GLdouble);

4704 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *);

4705 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
, GLfloat, GLfloat);

4706 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *);

4707 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
, GLint, GLint);

4708 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *);

4709 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
, GLshort, GLshort);

4710 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *);

4711 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
, GLubyte, GLubyte);

4712 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *);

4713 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
, GLuint, GLuint);

4714 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *);

4715 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
, GLushort, GLushort);

4716 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *);

4717 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

4718 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
, GLdouble);

4719 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *);

4720 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
, GLfloat);

4721 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *);

4722 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
, GLint);

4723 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *);

4724 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
, GLshort);

4725 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *);

4726 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
, GLdouble, GLdouble);

4727 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *);

4728 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
, GLfloat, GLfloat);

4729 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *);

4730 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
, GLint, GLint);

4731 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *);

4732 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
, GLshort, GLshort);

4733 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *);

4735 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

4736 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

4737 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

4738 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

4739 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4740 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

4741 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

4742 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

4743 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4744 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

4745 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4746 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

4747 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4748 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

4749 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4750 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

4751 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

4752 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

4753 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

4754 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

4755 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

4756 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

4757 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4758 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4759 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4760 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4761 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4762 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4763 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4764 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4765 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4766 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4767 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4768 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4769 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4770 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4771 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4772 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4775 #i‚de‡
GL_VERSION_1_5


4776 
	#GL_VERSION_1_5
 1

	)

4777 #ifde‡
GL_GLEXT_PROTOTYPES


4778 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
, 
GLuöt
 *);

4779 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
, c⁄° 
GLuöt
 *);

4780 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
);

4781 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
, 
GLuöt
);

4782 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
);

4783 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
, GLíum, 
GLöt
 *);

4784 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4785 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
, 
GLíum
, GLuint *);

4786 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
, 
GLuöt
);

4787 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

4788 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
, 
GLuöt
 *);

4789 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
);

4790 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
, 
GLsizeùå
, c⁄° 
GLvoid
 *, GLenum);

4791 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, c⁄° 
GLvoid
 *);

4792 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, 
GLvoid
 *);

4793 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„r
 (
GLíum
, GLenum);

4794 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
);

4795 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

4796 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
, GLíum, 
GLvoid
* *);

4798 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

4799 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

4800 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

4801 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4802 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

4803 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4804 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4805 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

4806 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4807 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4808 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4809 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4810 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

4811 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

4812 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

4813 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4814 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

4815 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4816 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

4819 #i‚de‡
GL_VERSION_2_0


4820 
	#GL_VERSION_2_0
 1

	)

4821 #ifde‡
GL_GLEXT_PROTOTYPES


4822 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
, GLenum);

4823 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
, c⁄° 
GLíum
 *);

4824 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
, GLenum, GLenum, GLenum);

4825 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

4826 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
, 
GLuöt
);

4827 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
, GLuint);

4828 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

4829 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
);

4830 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

4831 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
);

4832 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
);

4833 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
);

4834 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
, GLuint);

4835 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
);

4836 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
);

4837 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

4838 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨
 *);

4839 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
, 
GLsizei
, GLsizei *, GLuint *);

4840 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

4841 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4842 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

4843 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4844 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

4845 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

4846 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

4847 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
 *);

4848 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
, 
GLöt
, GLint *);

4849 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

4850 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

4851 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

4852 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

4853 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
);

4854 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
);

4855 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
);

4856 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, c⁄° 
GLöt
 *);

4857 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
);

4858 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
, 
GLÊﬂt
);

4859 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
, 
GLÊﬂt
, GLfloat);

4860 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4861 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4862 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
, GLint);

4863 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
, GLint, GLint);

4864 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
, GLint, GLint, GLint);

4865 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
, GLint, GLint, GLint, GLint);

4866 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4867 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4868 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4869 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

4870 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
, 
GLsizei
, const GLint *);

4871 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
, 
GLsizei
, const GLint *);

4872 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
, 
GLsizei
, const GLint *);

4873 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
, 
GLsizei
, const GLint *);

4874 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4875 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4876 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

4877 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
);

4878 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
, 
GLdoubÀ
);

4879 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4880 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
, 
GLÊﬂt
);

4881 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4882 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
, 
GLsh‹t
);

4883 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4884 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

4885 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4886 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

4887 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4888 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
, 
GLsh‹t
, GLshort);

4889 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4890 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

4891 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4892 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

4893 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4894 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

4895 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4896 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
, c⁄° 
GLbyã
 *);

4897 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
, c⁄° 
GLöt
 *);

4898 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4899 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

4900 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

4901 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
, const GLuint *);

4902 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

4903 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
, c⁄° 
GLbyã
 *);

4904 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

4905 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

4906 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

4907 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

4908 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
, c⁄° 
GLöt
 *);

4909 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

4910 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

4911 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

4912 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
, const GLuint *);

4913 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

4914 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

4916 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

4917 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

4918 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

4919 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

4920 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

4921 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

4922 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

4923 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

4924 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

4925 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

4926 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4927 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

4928 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

4929 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

4930 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

4931 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

4932 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

4933 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tobj
);

4934 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

4935 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4936 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

4937 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4938 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

4939 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

4940 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

4941 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

4942 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

4943 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4944 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4945 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4946 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

4947 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4948 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

4949 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4950 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

4951 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4952 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

4953 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

4954 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

4955 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

4956 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

4957 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

4958 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

4959 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

4960 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4961 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4962 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4963 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4964 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4965 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4966 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4967 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

4968 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4969 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4970 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

4971 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

4972 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4973 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4974 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4975 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4976 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4977 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4978 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4979 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4980 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4981 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4982 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4983 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4984 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4985 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4986 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4987 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4988 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4989 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4990 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4991 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4992 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4993 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4994 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4995 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4996 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4997 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4998 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4999 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5000 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5001 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5002 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5003 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5004 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5005 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5006 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5007 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

5008 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5011 #i‚de‡
GL_VERSION_2_1


5012 
	#GL_VERSION_2_1
 1

	)

5013 #ifde‡
GL_GLEXT_PROTOTYPES


5014 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5015 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5016 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5017 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5018 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5019 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5021 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5022 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5023 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5024 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5025 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5026 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5029 #i‚de‡
GL_VERSION_3_0


5030 
	#GL_VERSION_3_0
 1

	)

5035 #ifde‡
GL_GLEXT_PROTOTYPES


5036 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
, 
GLboﬁón
, GLboolean, GLboolean, GLboolean);

5037 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
, 
GLuöt
, 
GLboﬁón
 *);

5038 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

5039 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
, 
GLuöt
);

5040 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
, 
GLuöt
);

5041 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
, 
GLuöt
);

5042 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
);

5043 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

5044 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
, 
GLsizeùå
);

5045 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
, 
GLuöt
, GLuint);

5046 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, 
GLíum
);

5047 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, GLsizeò*, 
GLíum
 *, 
GLch¨
 *);

5048 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
, GLenum);

5049 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
, 
GLíum
);

5050 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

5051 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5052 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5053 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
, 
GLíum
, GLuint *);

5054 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
, 
GLöt
);

5055 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
, 
GLöt
, GLint);

5056 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
, 
GLöt
, GLint, GLint);

5057 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
, 
GLöt
, GLint, GLint, GLint);

5058 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
, GLuint);

5059 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
, GLuint, GLuint);

5060 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
, GLuint, GLuint, GLuint);

5061 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
, GLuint, GLuint, GLuint, GLuint);

5062 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
, c⁄° 
GLöt
 *);

5063 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
, c⁄° 
GLöt
 *);

5064 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
, c⁄° 
GLöt
 *);

5065 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
, c⁄° 
GLöt
 *);

5066 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
, const GLuint *);

5067 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
, const GLuint *);

5068 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
, const GLuint *);

5069 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
, const GLuint *);

5070 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
, c⁄° 
GLbyã
 *);

5071 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5072 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
, c⁄° 
GLubyã
 *);

5073 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
, c⁄° 
GLush‹t
 *);

5074 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
, 
GLöt
, GLuint *);

5075 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

5076 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
, c⁄° 
GLch¨
 *);

5077 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
, 
GLuöt
);

5078 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
, 
GLuöt
, GLuint);

5079 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
, 
GLuöt
, GLuint, GLuint);

5080 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
, 
GLuöt
, GLuint, GLuint, GLuint);

5081 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

5082 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

5083 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

5084 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

5085 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

5086 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
, GLíum, c⁄° 
GLuöt
 *);

5087 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
, GLíum, 
GLöt
 *);

5088 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
, GLíum, 
GLuöt
 *);

5089 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
, 
GLöt
, const GLint *);

5090 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
, 
GLöt
, c⁄° 
GLuöt
 *);

5091 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
, 
GLöt
, c⁄° 
GLÊﬂt
 *);

5092 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
, 
GLöt
, 
GLÊﬂt
, GLint);

5093 
GLAPI
 c⁄° 
GLubyã
 * 
APIENTRY
 
glGëSåögi
 (
GLíum
, 
GLuöt
);

5095 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

5096 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

5097 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

5098 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

5099 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

5100 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

5101 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

5102 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

5103 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5104 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

5105 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

5106 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

5107 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

5108 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

5109 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

5110 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5111 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5112 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

5113 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

5114 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

5115 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5116 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5117 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

5118 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

5119 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

5120 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

5121 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5122 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5123 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5124 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5125 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5126 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5127 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5128 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5129 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

5130 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5131 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5132 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

5133 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

5134 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

5135 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

5136 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

5137 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

5138 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

5139 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

5140 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

5141 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

5142 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

5143 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

5144 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5145 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

5146 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5147 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

5148 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

5149 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

5150 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5151 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

5152 c⁄° 
	tGLubyã
 * (
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

5155 #i‚de‡
GL_VERSION_3_1


5156 
	#GL_VERSION_3_1
 1

	)

5160 #ifde‡
GL_GLEXT_PROTOTYPES


5161 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

5162 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, GLsizei);

5163 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
, GLíum, 
GLuöt
);

5164 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
);

5166 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

5167 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

5168 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

5169 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

5172 #i‚de‡
GL_VERSION_3_2


5173 
	#GL_VERSION_3_2
 1

	)

5179 #ifde‡
GL_GLEXT_PROTOTYPES


5180 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
, 
GLuöt
, 
GLöt64
 *);

5181 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
, GLíum, 
GLöt64
 *);

5182 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
, 
GLíum
, 
GLöt
);

5183 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
);

5184 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLenum);

5186 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

5187 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

5188 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

5189 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

5190 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

5193 #i‚de‡
GL_ARB_mu…ôextuª


5194 
	#GL_ARB_mu…ôextuª
 1

	)

5195 #ifde‡
GL_GLEXT_PROTOTYPES


5196 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
);

5197 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
);

5198 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
, 
GLdoubÀ
);

5199 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

5200 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
, 
GLÊﬂt
);

5201 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5202 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
, 
GLöt
);

5203 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

5204 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
, 
GLsh‹t
);

5205 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

5206 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble);

5207 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

5208 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat);

5209 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5210 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
, 
GLöt
, GLint);

5211 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

5212 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
, 
GLsh‹t
, GLshort);

5213 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

5214 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

5215 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

5216 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

5217 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5218 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
, 
GLöt
, GLint, GLint);

5219 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

5220 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

5221 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

5222 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5223 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

5224 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5225 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5226 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

5227 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
, c⁄° 
GLöt
 *);

5228 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

5229 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
, c⁄° 
GLsh‹t
 *);

5231 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

5232 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

5233 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

5234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

5236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

5238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

5239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

5240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

5241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

5242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

5244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

5246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

5247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

5248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

5249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

5250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

5252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

5254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

5255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

5256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

5257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

5258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

5260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

5262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

5263 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

5264 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

5267 #i‚de‡
GL_ARB_å™•o£_m©rix


5268 
	#GL_ARB_å™•o£_m©rix
 1

	)

5269 #ifde‡
GL_GLEXT_PROTOTYPES


5270 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

5271 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

5272 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *);

5273 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *);

5275 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

5276 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

5277 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

5278 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

5281 #i‚de‡
GL_ARB_mu…ißm∂e


5282 
	#GL_ARB_mu…ißm∂e
 1

	)

5283 #ifde‡
GL_GLEXT_PROTOTYPES


5284 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GL˛ampf
, 
GLboﬁón
);

5286 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

5289 #i‚de‡
GL_ARB_ãxtuª_ív_add


5290 
	#GL_ARB_ãxtuª_ív_add
 1

	)

5293 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


5294 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

5297 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


5298 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

5299 #ifde‡
GL_GLEXT_PROTOTYPES


5300 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

5301 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

5302 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

5303 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

5304 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

5305 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

5306 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
, 
GLöt
, 
GLvoid
 *);

5308 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

5309 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

5310 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

5311 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

5312 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

5313 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

5314 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

5317 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


5318 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

5321 #i‚de‡
GL_ARB_poöt_∑ømëîs


5322 
	#GL_ARB_poöt_∑ømëîs
 1

	)

5323 #ifde‡
GL_GLEXT_PROTOTYPES


5324 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
, 
GLÊﬂt
);

5325 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

5327 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5328 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5331 #i‚de‡
GL_ARB_vîãx_bÀnd


5332 
	#GL_ARB_vîãx_bÀnd
 1

	)

5333 #ifde‡
GL_GLEXT_PROTOTYPES


5334 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
, c⁄° 
GLbyã
 *);

5335 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
, c⁄° 
GLsh‹t
 *);

5336 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
, const GLint *);

5337 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
, c⁄° 
GLÊﬂt
 *);

5338 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
, c⁄° 
GLdoubÀ
 *);

5339 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

5340 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

5341 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

5342 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5343 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
);

5345 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

5346 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

5347 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

5348 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

5349 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

5350 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

5351 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

5352 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

5353 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5354 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

5357 #i‚de‡
GL_ARB_m©rix_∑Àâe


5358 
	#GL_ARB_m©rix_∑Àâe
 1

	)

5359 #ifde‡
GL_GLEXT_PROTOTYPES


5360 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
);

5361 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
, c⁄° 
GLubyã
 *);

5362 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
, c⁄° 
GLush‹t
 *);

5363 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
, c⁄° 
GLuöt
 *);

5364 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

5366 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

5367 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

5368 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

5369 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

5370 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5373 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


5374 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

5377 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


5378 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

5381 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


5382 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

5385 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


5386 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

5389 #i‚de‡
GL_ARB_dïth_ãxtuª


5390 
	#GL_ARB_dïth_ãxtuª
 1

	)

5393 #i‚de‡
GL_ARB_shadow


5394 
	#GL_ARB_shadow
 1

	)

5397 #i‚de‡
GL_ARB_shadow_ambõ¡


5398 
	#GL_ARB_shadow_ambõ¡
 1

	)

5401 #i‚de‡
GL_ARB_wödow_pos


5402 
	#GL_ARB_wödow_pos
 1

	)

5403 #ifde‡
GL_GLEXT_PROTOTYPES


5404 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
, GLdouble);

5405 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *);

5406 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
, GLfloat);

5407 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *);

5408 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
, GLint);

5409 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *);

5410 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
, GLshort);

5411 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *);

5412 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
, GLdouble, GLdouble);

5413 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *);

5414 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
, GLfloat, GLfloat);

5415 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *);

5416 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
, GLint, GLint);

5417 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *);

5418 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
, GLshort, GLshort);

5419 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *);

5421 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5422 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5423 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5424 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5425 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

5426 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5427 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5428 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5429 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5430 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5431 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5432 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5433 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5434 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5435 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5436 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5439 #i‚de‡
GL_ARB_vîãx_¥ogøm


5440 
	#GL_ARB_vîãx_¥ogøm
 1

	)

5441 #ifde‡
GL_GLEXT_PROTOTYPES


5442 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
, 
GLdoubÀ
);

5443 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5444 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
, 
GLÊﬂt
);

5445 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5446 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
, 
GLsh‹t
);

5447 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5448 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

5449 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5450 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

5451 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5452 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
, 
GLsh‹t
, GLshort);

5453 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5454 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

5455 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5456 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5457 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5458 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

5459 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5460 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

5461 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

5462 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5463 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

5464 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

5465 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
, const GLuint *);

5466 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

5467 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
, c⁄° 
GLbyã
 *);

5468 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5469 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

5470 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5471 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

5472 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
, c⁄° 
GLöt
 *);

5473 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

5474 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

5475 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
, c⁄° 
GLubyã
 *);

5476 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
, const GLuint *);

5477 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
, c⁄° 
GLush‹t
 *);

5478 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, c⁄° 
GLvoid
 *);

5479 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
);

5480 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
);

5481 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

5482 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
, 
GLuöt
);

5483 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

5484 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
, 
GLuöt
 *);

5485 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5486 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

5487 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5488 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5489 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

5490 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

5491 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5492 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

5493 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

5494 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

5495 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

5496 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

5497 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
, GLíum, 
GLöt
 *);

5498 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
, GLíum, 
GLvoid
 *);

5499 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

5500 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

5501 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5502 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

5503 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
);

5505 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

5506 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5507 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

5508 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5509 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

5510 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5511 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5512 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5513 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5514 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5515 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5516 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5517 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5518 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5519 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5520 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5521 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5522 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5523 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

5524 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5525 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5526 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

5527 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5528 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5529 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

5530 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

5531 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5532 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

5533 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5534 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

5535 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

5536 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5537 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

5538 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

5539 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

5540 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

5541 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

5542 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

5543 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

5544 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

5545 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

5546 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

5547 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

5548 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5549 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

5550 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5551 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5552 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5553 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

5554 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5555 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5556 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

5557 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

5558 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

5559 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

5560 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5561 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

5562 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5563 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5564 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5565 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

5566 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

5569 #i‚de‡
GL_ARB_‰agmít_¥ogøm


5570 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

5574 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


5575 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

5576 #ifde‡
GL_GLEXT_PROTOTYPES


5577 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
, 
GLuöt
);

5578 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

5579 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
, 
GLuöt
 *);

5580 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
);

5581 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *, GLenum);

5582 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, c⁄° 
GLvoid
 *);

5583 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
, 
GLöçåARB
, 
GLsizeùåARB
, 
GLvoid
 *);

5584 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
, GLenum);

5585 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
);

5586 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
, GLíum, 
GLöt
 *);

5587 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
, GLíum, 
GLvoid
* *);

5589 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

5590 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

5591 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

5592 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5593 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

5594 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

5595 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

5596 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

5597 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

5598 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5599 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

5602 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


5603 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

5604 #ifde‡
GL_GLEXT_PROTOTYPES


5605 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
, 
GLuöt
 *);

5606 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
, c⁄° 
GLuöt
 *);

5607 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
);

5608 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
, 
GLuöt
);

5609 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
);

5610 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
, GLíum, 
GLöt
 *);

5611 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

5612 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
, 
GLíum
, GLuint *);

5614 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

5615 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

5616 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

5617 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

5618 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

5619 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5620 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5621 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

5624 #i‚de‡
GL_ARB_shadî_obje˘s


5625 
	#GL_ARB_shadî_obje˘s
 1

	)

5626 #ifde‡
GL_GLEXT_PROTOTYPES


5627 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
);

5628 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
);

5629 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

5630 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
);

5631 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, c⁄° 
GLch¨ARB
* *, c⁄° 
GLöt
 *);

5632 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
);

5633 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

5634 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
, GLhandleARB);

5635 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
);

5636 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
);

5637 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
);

5638 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
, 
GLÊﬂt
);

5639 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat);

5640 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

5641 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

5642 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
, GLint);

5643 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
, GLint, GLint);

5644 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
, GLint, GLint, GLint);

5645 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
, GLint, GLint, GLint, GLint);

5646 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5647 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5648 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5649 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

5650 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

5651 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

5652 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

5653 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
, 
GLsizei
, const GLint *);

5654 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5655 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5656 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

5657 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
, 
GLíum
, 
GLÊﬂt
 *);

5658 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
, 
GLíum
, 
GLöt
 *);

5659 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

5660 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizei *, GLhandleARB *);

5661 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

5662 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

5663 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
, 
GLöt
, 
GLÊﬂt
 *);

5664 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
, 
GLöt
, GLint *);

5665 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
, 
GLsizei
, GLsizeò*, 
GLch¨ARB
 *);

5667 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

5668 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

5669 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

5670 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

5671 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
* *
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

5672 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

5673 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

5674 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

5675 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5676 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5677 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5678 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

5679 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

5680 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

5681 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

5682 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

5683 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

5684 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

5685 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

5686 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5687 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5688 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5689 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5690 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

5691 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

5692 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

5693 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

5694 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5695 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5696 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5697 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5698 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5699 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

5700 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

5701 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

5702 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

5703 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

5704 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

5705 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

5708 #i‚de‡
GL_ARB_vîãx_shadî


5709 
	#GL_ARB_vîãx_shadî
 1

	)

5710 #ifde‡
GL_GLEXT_PROTOTYPES


5711 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
, 
GLuöt
, c⁄° 
GLch¨ARB
 *);

5712 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
, 
GLuöt
, 
GLsizei
, GLsizeò*, 
GLöt
 *, 
GLíum
 *, 
GLch¨ARB
 *);

5713 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
, c⁄° 
GLch¨ARB
 *);

5715 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

5716 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

5717 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

5720 #i‚de‡
GL_ARB_‰agmít_shadî


5721 
	#GL_ARB_‰agmít_shadî
 1

	)

5724 #i‚de‡
GL_ARB_shadög_œnguage_100


5725 
	#GL_ARB_shadög_œnguage_100
 1

	)

5728 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


5729 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

5732 #i‚de‡
GL_ARB_poöt_•rôe


5733 
	#GL_ARB_poöt_•rôe
 1

	)

5736 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


5737 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

5740 #i‚de‡
GL_ARB_døw_buf„rs


5741 
	#GL_ARB_døw_buf„rs
 1

	)

5742 #ifde‡
GL_GLEXT_PROTOTYPES


5743 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
, c⁄° 
GLíum
 *);

5745 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5748 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


5749 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

5752 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


5753 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

5754 #ifde‡
GL_GLEXT_PROTOTYPES


5755 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
, GLenum);

5757 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

5760 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


5761 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

5764 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


5765 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

5768 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


5769 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

5772 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


5773 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

5776 #i‚de‡
GL_ARB_døw_ö°™˚d


5777 
	#GL_ARB_døw_ö°™˚d
 1

	)

5778 #ifde‡
GL_GLEXT_PROTOTYPES


5779 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

5780 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, GLsizei);

5782 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

5783 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

5786 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


5787 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

5788 #ifde‡
GL_GLEXT_PROTOTYPES


5789 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
);

5790 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
, 
GLuöt
);

5791 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

5792 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
, 
GLuöt
 *);

5793 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
, GLíum, 
GLsizei
, GLsizei);

5794 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
, GLíum, 
GLöt
 *);

5795 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
);

5796 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
, 
GLuöt
);

5797 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
, c⁄° 
GLuöt
 *);

5798 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
, 
GLuöt
 *);

5799 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLenum);

5800 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

5801 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

5802 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, GLint);

5803 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

5804 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

5805 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
);

5806 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLbôfõld
, 
GLíum
);

5807 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
, 
GLsizei
, GLenum, GLsizei, GLsizei);

5808 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLint);

5810 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

5811 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

5812 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

5813 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

5814 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5815 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5816 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

5817 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

5818 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

5819 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

5820 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

5821 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

5822 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

5823 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

5824 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

5825 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5826 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

5827 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

5828 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

5829 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

5832 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


5833 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

5836 #i‚de‡
GL_ARB_geomëry_shadî4


5837 
	#GL_ARB_geomëry_shadî4
 1

	)

5838 #ifde‡
GL_GLEXT_PROTOTYPES


5839 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
, 
GLíum
, 
GLöt
);

5840 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
);

5841 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLint);

5842 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLenum);

5844 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

5845 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

5846 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

5847 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

5850 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


5851 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

5854 #i‚de‡
GL_ARB_ö°™˚d_¨øys


5855 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

5856 #ifde‡
GL_GLEXT_PROTOTYPES


5857 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
, GLuint);

5859 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

5862 #i‚de‡
GL_ARB_m≠_buf„r_ønge


5863 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

5864 #ifde‡
GL_GLEXT_PROTOTYPES


5865 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
, 
GLöçå
, 
GLsizeùå
, 
GLbôfõld
);

5866 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
, 
GLöçå
, 
GLsizeùå
);

5868 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

5869 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

5872 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


5873 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

5874 #ifde‡
GL_GLEXT_PROTOTYPES


5875 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
, GLíum, 
GLuöt
);

5877 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

5880 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


5881 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

5884 #i‚de‡
GL_ARB_ãxtuª_rg


5885 
	#GL_ARB_ãxtuª_rg
 1

	)

5888 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


5889 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

5890 #ifde‡
GL_GLEXT_PROTOTYPES


5891 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
);

5892 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
, c⁄° 
GLuöt
 *);

5893 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
, 
GLuöt
 *);

5894 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
);

5896 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

5897 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5898 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5899 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

5902 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


5903 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

5904 #ifde‡
GL_GLEXT_PROTOTYPES


5905 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, GLuint *);

5906 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
, 
GLsizei
, c⁄° GLuöà*, 
GLíum
, 
GLöt
 *);

5907 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

5908 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöt, c⁄° 
GLch¨
 *);

5909 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
, GLuöt, 
GLíum
, 
GLöt
 *);

5910 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

5911 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
, GLuint, GLuint);

5913 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
* *
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

5914 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5915 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

5916 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

5917 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5918 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

5919 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

5922 #i‚de‡
GL_ARB_com∑tibûôy


5923 
	#GL_ARB_com∑tibûôy
 1

	)

5926 #i‚de‡
GL_ARB_c›y_buf„r


5927 
	#GL_ARB_c›y_buf„r
 1

	)

5928 #ifde‡
GL_GLEXT_PROTOTYPES


5929 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
, GLíum, 
GLöçå
, GLöçå, 
GLsizeùå
);

5931 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

5934 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


5935 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

5938 #i‚de‡
GL_ARB_dïth_˛amp


5939 
	#GL_ARB_dïth_˛amp
 1

	)

5942 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


5943 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

5944 #ifde‡
GL_GLEXT_PROTOTYPES


5945 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, 
GLöt
);

5946 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, 
GLöt
);

5947 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, GLsizei, 
GLöt
);

5948 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei, c⁄° 
GLöt
 *);

5950 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

5951 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

5952 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tba£vîãx
);

5953 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

5956 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


5957 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

5960 #i‚de‡
GL_ARB_¥ovokög_vîãx


5961 
	#GL_ARB_¥ovokög_vîãx
 1

	)

5962 #ifde‡
GL_GLEXT_PROTOTYPES


5963 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
);

5965 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

5968 #i‚de‡
GL_ARB_£amÀss_cube_m≠


5969 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

5972 #i‚de‡
GL_ARB_sync


5973 
	#GL_ARB_sync
 1

	)

5974 #ifde‡
GL_GLEXT_PROTOTYPES


5975 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
, 
GLbôfõld
);

5976 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
);

5977 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
);

5978 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
, 
GLbôfõld
, 
GLuöt64
);

5979 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
, 
GLbôfõld
, 
GLuöt64
);

5980 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
, 
GLöt64
 *);

5981 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
, 
GLíum
, 
GLsizei
, GLsizeò*, 
GLöt
 *);

5983 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

5984 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

5985 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

5986 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

5987 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

5988 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

5989 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

5992 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


5993 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

5994 #ifde‡
GL_GLEXT_PROTOTYPES


5995 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
, 
GLsizei
, 
GLöt
, GLsizei, GLsizei, 
GLboﬁón
);

5996 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
, 
GLsizei
, 
GLöt
, GLsizei, GLsizei, GLsizei, 
GLboﬁón
);

5997 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

5998 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
, 
GLbôfõld
);

6000 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6001 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6002 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

6003 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

6006 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


6007 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

6010 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


6011 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

6012 #ifde‡
GL_GLEXT_PROTOTYPES


6013 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
, 
GLíum
);

6014 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
, 
GLíum
, GLenum);

6015 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
, 
GLíum
, GLenum);

6016 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
, 
GLíum
, GLenum, GLenum, GLenum);

6018 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

6019 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

6020 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

6021 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

6024 #i‚de‡
GL_ARB_ßm∂e_shadög


6025 
	#GL_ARB_ßm∂e_shadög
 1

	)

6026 #ifde‡
GL_GLEXT_PROTOTYPES


6027 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GL˛ampf
);

6029 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGL˛ampf
 
	tvÆue
);

6032 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


6033 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

6036 #i‚de‡
GL_ARB_ãxtuª_g©hî


6037 
	#GL_ARB_ãxtuª_g©hî
 1

	)

6040 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


6041 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

6044 #i‚de‡
GL_EXT_abgr


6045 
	#GL_EXT_abgr
 1

	)

6048 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


6049 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

6050 #ifde‡
GL_GLEXT_PROTOTYPES


6051 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GL˛ampf
, GLclampf, GLclampf, GLclampf);

6053 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

6056 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


6057 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

6058 #ifde‡
GL_GLEXT_PROTOTYPES


6059 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
, GLfloat);

6061 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

6064 #i‚de‡
GL_EXT_ãxtuª


6065 
	#GL_EXT_ãxtuª
 1

	)

6068 #i‚de‡
GL_EXT_ãxtuª3D


6069 
	#GL_EXT_ãxtuª3D
 1

	)

6070 #ifde‡
GL_GLEXT_PROTOTYPES


6071 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

6072 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

6074 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6075 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6078 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


6079 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

6080 #ifde‡
GL_GLEXT_PROTOTYPES


6081 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6082 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6084 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

6085 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

6088 #i‚de‡
GL_EXT_subãxtuª


6089 
	#GL_EXT_subãxtuª
 1

	)

6090 #ifde‡
GL_GLEXT_PROTOTYPES


6091 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

6092 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

6094 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6095 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6098 #i‚de‡
GL_EXT_c›y_ãxtuª


6099 
	#GL_EXT_c›y_ãxtuª
 1

	)

6100 #ifde‡
GL_GLEXT_PROTOTYPES


6101 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

6102 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

6103 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

6104 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

6105 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

6107 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6108 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6109 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6110 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6111 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6114 #i‚de‡
GL_EXT_hi°ogøm


6115 
	#GL_EXT_hi°ogøm
 1

	)

6116 #ifde‡
GL_GLEXT_PROTOTYPES


6117 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

6118 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6119 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6120 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
, 
GLboﬁón
, GLíum, GLíum, 
GLvoid
 *);

6121 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6122 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6123 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
, 
GLsizei
, GLíum, 
GLboﬁón
);

6124 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
, GLíum, 
GLboﬁón
);

6125 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
);

6126 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
);

6128 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6129 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6130 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6131 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

6132 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6133 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6134 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6135 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6136 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6137 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6140 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


6141 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

6142 #ifde‡
GL_GLEXT_PROTOTYPES


6143 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

6144 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

6145 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

6146 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6147 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

6148 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6149 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

6150 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLsizei);

6151 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

6152 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6153 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6154 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *, GLvoid *, GLvoid *);

6155 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *, const GLvoid *);

6157 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6158 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

6159 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

6160 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6161 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

6162 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6163 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6164 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6165 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

6166 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6167 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6168 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

6169 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

6172 #i‚de‡
GL_SGI_cﬁ‹_m©rix


6173 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

6176 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


6177 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

6178 #ifde‡
GL_GLEXT_PROTOTYPES


6179 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

6180 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6181 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6182 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
);

6183 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

6184 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6185 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
, GLíum, 
GLöt
 *);

6187 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

6188 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6189 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6190 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6191 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

6192 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6193 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6196 #i‚de‡
GL_SGIX_pixñ_ãxtuª


6197 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

6198 #ifde‡
GL_GLEXT_PROTOTYPES


6199 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
);

6201 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

6204 #i‚de‡
GL_SGIS_pixñ_ãxtuª


6205 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

6206 #ifde‡
GL_GLEXT_PROTOTYPES


6207 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
, 
GLöt
);

6208 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
, c⁄° 
GLöt
 *);

6209 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

6210 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6211 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
, 
GLöt
 *);

6212 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
, 
GLÊﬂt
 *);

6214 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6215 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6216 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6217 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6218 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6219 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6222 #i‚de‡
GL_SGIS_ãxtuª4D


6223 
	#GL_SGIS_ãxtuª4D
 1

	)

6224 #ifde‡
GL_GLEXT_PROTOTYPES


6225 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

6226 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

6228 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6229 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

6232 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


6233 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

6236 #i‚de‡
GL_EXT_cmyka


6237 
	#GL_EXT_cmyka
 1

	)

6240 #i‚de‡
GL_EXT_ãxtuª_obje˘


6241 
	#GL_EXT_ãxtuª_obje˘
 1

	)

6242 #ifde‡
GL_GLEXT_PROTOTYPES


6243 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

6244 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
, 
GLuöt
);

6245 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

6246 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
, 
GLuöt
 *);

6247 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
);

6248 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *, c⁄° 
GL˛ampf
 *);

6250 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

6251 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6252 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

6253 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

6254 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

6255 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

6258 #i‚de‡
GL_SGIS_dëaû_ãxtuª


6259 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

6260 #ifde‡
GL_GLEXT_PROTOTYPES


6261 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6262 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

6264 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

6265 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

6268 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


6269 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

6270 #ifde‡
GL_GLEXT_PROTOTYPES


6271 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

6272 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
, 
GLÊﬂt
 *);

6274 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

6275 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

6278 #i‚de‡
GL_EXT_∑cked_pixñs


6279 
	#GL_EXT_∑cked_pixñs
 1

	)

6282 #i‚de‡
GL_SGIS_ãxtuª_lod


6283 
	#GL_SGIS_ãxtuª_lod
 1

	)

6286 #i‚de‡
GL_SGIS_mu…ißm∂e


6287 
	#GL_SGIS_mu…ißm∂e
 1

	)

6288 #ifde‡
GL_GLEXT_PROTOTYPES


6289 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
, 
GLboﬁón
);

6290 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
);

6292 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

6293 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

6296 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


6297 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

6300 #i‚de‡
GL_EXT_vîãx_¨øy


6301 
	#GL_EXT_vîãx_¨øy
 1

	)

6302 #ifde‡
GL_GLEXT_PROTOTYPES


6303 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
);

6304 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

6305 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
, 
GLöt
, 
GLsizei
);

6306 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
, GLsizei, c⁄° 
GLboﬁón
 *);

6307 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
, 
GLvoid
* *);

6308 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

6309 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

6310 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

6311 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, GLsizei, c⁄° 
GLvoid
 *);

6313 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

6314 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6315 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6316 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

6317 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

6318 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6319 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6320 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6321 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6324 #i‚de‡
GL_EXT_misc_©åibuã


6325 
	#GL_EXT_misc_©åibuã
 1

	)

6328 #i‚de‡
GL_SGIS_gíî©e_mùm≠


6329 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

6332 #i‚de‡
GL_SGIX_˛ùm≠


6333 
	#GL_SGIX_˛ùm≠
 1

	)

6336 #i‚de‡
GL_SGIX_shadow


6337 
	#GL_SGIX_shadow
 1

	)

6340 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


6341 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

6344 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


6345 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

6348 #i‚de‡
GL_EXT_bÀnd_mömax


6349 
	#GL_EXT_bÀnd_mömax
 1

	)

6350 #ifde‡
GL_GLEXT_PROTOTYPES


6351 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
);

6353 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

6356 #i‚de‡
GL_EXT_bÀnd_subåa˘


6357 
	#GL_EXT_bÀnd_subåa˘
 1

	)

6360 #i‚de‡
GL_EXT_bÀnd_logic_›


6361 
	#GL_EXT_bÀnd_logic_›
 1

	)

6364 #i‚de‡
GL_SGIX_öãæa˚


6365 
	#GL_SGIX_öãæa˚
 1

	)

6368 #i‚de‡
GL_SGIX_pixñ_tûes


6369 
	#GL_SGIX_pixñ_tûes
 1

	)

6372 #i‚de‡
GL_SGIX_ãxtuª_£À˘


6373 
	#GL_SGIX_ãxtuª_£À˘
 1

	)

6376 #i‚de‡
GL_SGIX_•rôe


6377 
	#GL_SGIX_•rôe
 1

	)

6378 #ifde‡
GL_GLEXT_PROTOTYPES


6379 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
, 
GLÊﬂt
);

6380 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6381 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
, 
GLöt
);

6382 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

6384 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6385 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6386 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6387 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6390 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


6391 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

6394 #i‚de‡
GL_EXT_poöt_∑ømëîs


6395 
	#GL_EXT_poöt_∑ømëîs
 1

	)

6396 #ifde‡
GL_GLEXT_PROTOTYPES


6397 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
, 
GLÊﬂt
);

6398 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6400 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6401 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6404 #i‚de‡
GL_SGIS_poöt_∑ømëîs


6405 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

6406 #ifde‡
GL_GLEXT_PROTOTYPES


6407 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
, 
GLÊﬂt
);

6408 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6410 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6411 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6414 #i‚de‡
GL_SGIX_ö°rumíts


6415 
	#GL_SGIX_ö°rumíts
 1

	)

6416 #ifde‡
GL_GLEXT_PROTOTYPES


6417 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

6418 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
, 
GLöt
 *);

6419 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLint *);

6420 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
);

6421 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

6422 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
);

6424 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

6425 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

6426 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

6427 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

6428 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

6429 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

6432 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


6433 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

6436 #i‚de‡
GL_SGIX_‰amezoom


6437 
	#GL_SGIX_‰amezoom
 1

	)

6438 #ifde‡
GL_GLEXT_PROTOTYPES


6439 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
);

6441 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

6444 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


6445 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

6446 #ifde‡
GL_GLEXT_PROTOTYPES


6447 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

6449 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

6452 #i‚de‡
GL_SGIX_pﬁynomül_ffd


6453 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

6454 #ifde‡
GL_GLEXT_PROTOTYPES


6455 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);

6456 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);

6457 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
);

6458 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
);

6460 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

6461 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

6462 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

6463 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

6466 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


6467 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

6468 #ifde‡
GL_GLEXT_PROTOTYPES


6469 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *);

6471 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

6474 #i‚de‡
GL_SGIX_Êush_ø°î


6475 
	#GL_SGIX_Êush_ø°î
 1

	)

6476 #ifde‡
GL_GLEXT_PROTOTYPES


6477 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

6479 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

6482 #i‚de‡
GL_SGIX_dïth_ãxtuª


6483 
	#GL_SGIX_dïth_ãxtuª
 1

	)

6486 #i‚de‡
GL_SGIS_fog_fun˘i⁄


6487 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

6488 #ifde‡
GL_GLEXT_PROTOTYPES


6489 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
, c⁄° 
GLÊﬂt
 *);

6490 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *);

6492 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

6493 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

6496 #i‚de‡
GL_SGIX_fog_off£t


6497 
	#GL_SGIX_fog_off£t
 1

	)

6500 #i‚de‡
GL_HP_image_å™sf‹m


6501 
	#GL_HP_image_å™sf‹m
 1

	)

6502 #ifde‡
GL_GLEXT_PROTOTYPES


6503 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
, GLíum, 
GLöt
);

6504 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
, GLíum, 
GLÊﬂt
);

6505 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6506 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6507 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
, GLíum, 
GLöt
 *);

6508 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6510 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6511 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6512 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6513 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6514 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6515 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6518 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


6519 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

6522 #i‚de‡
GL_SGIX_ãxtuª_add_ív


6523 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

6526 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


6527 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

6528 #ifde‡
GL_GLEXT_PROTOTYPES


6529 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

6530 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
, 
GLsizei
, 
GLöt
, GLint, GLsizei);

6532 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

6533 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

6536 #i‚de‡
GL_PGI_vîãx_höts


6537 
	#GL_PGI_vîãx_höts
 1

	)

6540 #i‚de‡
GL_PGI_misc_höts


6541 
	#GL_PGI_misc_höts
 1

	)

6542 #ifde‡
GL_GLEXT_PROTOTYPES


6543 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
, 
GLöt
);

6545 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

6548 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


6549 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

6550 #ifde‡
GL_GLEXT_PROTOTYPES


6551 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
, GLíum, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

6552 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
, GLíum, GLíum, 
GLvoid
 *);

6553 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

6554 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6556 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

6557 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

6558 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6559 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6562 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


6563 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

6566 #i‚de‡
GL_SGIX_li°_¥i‹ôy


6567 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

6568 #ifde‡
GL_GLEXT_PROTOTYPES


6569 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

6570 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

6571 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
);

6572 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLÊﬂt
 *);

6573 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
, 
GLíum
, 
GLöt
);

6574 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
, 
GLíum
, c⁄° 
GLöt
 *);

6576 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6577 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6578 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6579 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6580 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6581 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6584 #i‚de‡
GL_SGIX_ú_ö°rumít1


6585 
	#GL_SGIX_ú_ö°rumít1
 1

	)

6588 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


6589 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

6592 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


6593 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

6596 #i‚de‡
GL_SGIX_shadow_ambõ¡


6597 
	#GL_SGIX_shadow_ambõ¡
 1

	)

6600 #i‚de‡
GL_EXT_ödex_ãxtuª


6601 
	#GL_EXT_ödex_ãxtuª
 1

	)

6604 #i‚de‡
GL_EXT_ödex_m©îül


6605 
	#GL_EXT_ödex_m©îül
 1

	)

6606 #ifde‡
GL_GLEXT_PROTOTYPES


6607 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
, GLenum);

6609 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6612 #i‚de‡
GL_EXT_ödex_func


6613 
	#GL_EXT_ödex_func
 1

	)

6614 #ifde‡
GL_GLEXT_PROTOTYPES


6615 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
, 
GL˛ampf
);

6617 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

6620 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


6621 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

6624 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


6625 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

6626 #ifde‡
GL_GLEXT_PROTOTYPES


6627 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
, 
GLsizei
);

6628 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

6630 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

6631 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

6634 #i‚de‡
GL_EXT_cuŒ_vîãx


6635 
	#GL_EXT_cuŒ_vîãx
 1

	)

6636 #ifde‡
GL_GLEXT_PROTOTYPES


6637 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
, 
GLdoubÀ
 *);

6638 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
, 
GLÊﬂt
 *);

6640 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6641 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6644 #i‚de‡
GL_SGIX_y¸cb


6645 
	#GL_SGIX_y¸cb
 1

	)

6648 #i‚de‡
GL_SGIX_‰agmít_lightög


6649 
	#GL_SGIX_‰agmít_lightög
 1

	)

6650 #ifde‡
GL_GLEXT_PROTOTYPES


6651 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
, GLenum);

6652 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

6653 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6654 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
, GLíum, 
GLöt
);

6655 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6656 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
, 
GLÊﬂt
);

6657 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

6658 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
, 
GLöt
);

6659 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
, c⁄° 
GLöt
 *);

6660 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
);

6661 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6662 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
, GLíum, 
GLöt
);

6663 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6664 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6665 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

6666 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

6667 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
, GLíum, 
GLöt
 *);

6668 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
, 
GLöt
);

6670 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6671 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6672 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6673 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6674 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6675 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6676 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6677 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6678 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6679 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6680 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6681 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6682 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6683 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6684 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6685 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6686 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6690 #i‚de‡
GL_IBM_ø°îpos_˛ù


6691 
	#GL_IBM_ø°îpos_˛ù
 1

	)

6694 #i‚de‡
GL_HP_ãxtuª_lightög


6695 
	#GL_HP_ãxtuª_lightög
 1

	)

6698 #i‚de‡
GL_EXT_døw_ønge_ñemíts


6699 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

6700 #ifde‡
GL_GLEXT_PROTOTYPES


6701 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *);

6703 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

6706 #i‚de‡
GL_WIN_ph⁄g_shadög


6707 
	#GL_WIN_ph⁄g_shadög
 1

	)

6710 #i‚de‡
GL_WIN_•ecuœr_fog


6711 
	#GL_WIN_•ecuœr_fog
 1

	)

6714 #i‚de‡
GL_EXT_light_ãxtuª


6715 
	#GL_EXT_light_ãxtuª
 1

	)

6716 #ifde‡
GL_GLEXT_PROTOTYPES


6717 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
);

6718 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
);

6719 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
, GLenum);

6721 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

6722 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

6723 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6726 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


6727 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

6730 #i‚de‡
GL_EXT_bgø


6731 
	#GL_EXT_bgø
 1

	)

6734 #i‚de‡
GL_SGIX_async


6735 
	#GL_SGIX_async
 1

	)

6736 #ifde‡
GL_GLEXT_PROTOTYPES


6737 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
);

6738 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *);

6739 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *);

6740 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
);

6741 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
, 
GLsizei
);

6742 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
);

6744 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

6745 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

6746 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

6747 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

6748 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

6749 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

6752 #i‚de‡
GL_SGIX_async_pixñ


6753 
	#GL_SGIX_async_pixñ
 1

	)

6756 #i‚de‡
GL_SGIX_async_hi°ogøm


6757 
	#GL_SGIX_async_hi°ogøm
 1

	)

6760 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


6761 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

6762 #ifde‡
GL_GLEXT_PROTOTYPES


6763 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

6764 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
, c⁄° 
GLvoid
* *);

6765 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

6766 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
, 
GLíum
, c⁄° 
GLvoid
* *);

6768 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

6769 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

6770 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

6771 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

6774 #i‚de‡
GL_HP_oc˛usi⁄_ã°


6775 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

6778 #i‚de‡
GL_EXT_pixñ_å™sf‹m


6779 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

6780 #ifde‡
GL_GLEXT_PROTOTYPES


6781 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
, GLíum, 
GLöt
);

6782 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
, GLíum, 
GLÊﬂt
);

6783 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

6784 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

6786 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6787 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6788 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6789 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6792 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


6793 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

6796 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


6797 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

6800 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


6801 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

6804 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


6805 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

6806 #ifde‡
GL_GLEXT_PROTOTYPES


6807 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
, GLbyte, GLbyte);

6808 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *);

6809 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

6810 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *);

6811 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

6812 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *);

6813 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
, GLint, GLint);

6814 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *);

6815 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
, GLshort, GLshort);

6816 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *);

6817 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
, GLubyte, GLubyte);

6818 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *);

6819 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
, GLuint, GLuint);

6820 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *);

6821 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
, GLushort, GLushort);

6822 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *);

6823 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

6825 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

6826 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6827 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

6828 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6829 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

6830 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6831 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

6832 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6833 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

6834 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6835 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

6836 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

6837 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

6838 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

6839 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

6840 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

6841 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6844 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


6845 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

6846 #ifde‡
GL_GLEXT_PROTOTYPES


6847 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
);

6849 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

6852 #i‚de‡
GL_EXT_mu…i_døw_¨øys


6853 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

6854 #ifde‡
GL_GLEXT_PROTOTYPES


6855 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
, 
GLöt
 *, 
GLsizei
 *, GLsizei);

6856 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

6858 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6859 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

6862 #i‚de‡
GL_EXT_fog_co‹d


6863 
	#GL_EXT_fog_co‹d
 1

	)

6864 #ifde‡
GL_GLEXT_PROTOTYPES


6865 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
);

6866 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *);

6867 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
);

6868 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *);

6869 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

6871 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

6872 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

6873 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

6874 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

6875 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6878 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


6879 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

6882 #i‚de‡
GL_EXT_co‹dö©e_‰ame


6883 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

6884 #ifde‡
GL_GLEXT_PROTOTYPES


6885 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
, GLbyte, GLbyte);

6886 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *);

6887 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

6888 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *);

6889 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

6890 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *);

6891 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
, GLint, GLint);

6892 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *);

6893 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
, GLshort, GLshort);

6894 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *);

6895 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
, GLbyte, GLbyte);

6896 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *);

6897 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
, GLdouble, GLdouble);

6898 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *);

6899 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
, GLfloat, GLfloat);

6900 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *);

6901 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
, GLint, GLint);

6902 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *);

6903 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
, GLshort, GLshort);

6904 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *);

6905 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

6906 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

6908 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

6909 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6910 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

6911 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6912 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

6913 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6914 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

6915 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6916 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

6917 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6918 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

6919 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

6920 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

6921 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

6922 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

6923 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

6924 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

6925 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

6926 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

6927 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

6928 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6929 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

6932 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


6933 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

6936 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


6937 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

6940 #i‚de‡
GL_APPLE_å™sf‹m_höt


6941 
	#GL_APPLE_å™sf‹m_höt
 1

	)

6944 #i‚de‡
GL_SGIX_fog_sˇÀ


6945 
	#GL_SGIX_fog_sˇÀ
 1

	)

6948 #i‚de‡
GL_SUNX_c⁄°™t_d©a


6949 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

6950 #ifde‡
GL_GLEXT_PROTOTYPES


6951 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

6953 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

6956 #i‚de‡
GL_SUN_globÆ_Æpha


6957 
	#GL_SUN_globÆ_Æpha
 1

	)

6958 #ifde‡
GL_GLEXT_PROTOTYPES


6959 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
);

6960 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
);

6961 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
);

6962 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
);

6963 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
);

6964 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
);

6965 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
);

6966 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
);

6968 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

6969 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

6970 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

6971 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

6972 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

6973 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

6974 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

6975 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

6978 #i‚de‡
GL_SUN_åüngÀ_li°


6979 
	#GL_SUN_åüngÀ_li°
 1

	)

6980 #ifde‡
GL_GLEXT_PROTOTYPES


6981 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
);

6982 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
);

6983 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
);

6984 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *);

6985 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *);

6986 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *);

6987 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
* *);

6989 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

6990 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

6991 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

6992 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

6993 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

6994 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

6995 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
);

6998 #i‚de‡
GL_SUN_vîãx


6999 
	#GL_SUN_vîãx
 1

	)

7000 #ifde‡
GL_GLEXT_PROTOTYPES


7001 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat);

7002 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

7003 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

7004 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

7005 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7006 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

7007 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7008 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

7009 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7010 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

7011 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

7012 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

7013 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7014 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *);

7015 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
, GLÊﬂt, 
GLubyã
, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);

7016 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, c⁄° 
GLubyã
 *, const GLfloat *);

7017 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7018 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

7019 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7020 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

7021 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7022 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

7023 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7024 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

7025 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

7026 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *);

7027 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
, 
GLubyã
, GLubyã, GLubyã, GLubyã, 
GLÊﬂt
, GLfloat, GLfloat);

7028 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

7029 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7030 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

7031 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7032 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

7033 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7034 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

7035 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat);

7036 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *);

7037 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7038 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *);

7039 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);

7040 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *, c⁄° 
GLÊﬂt
 *, const GLfloat *, const GLfloat *, const GLfloat *);

7042 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7043 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7044 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7045 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7046 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7047 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

7048 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7049 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

7050 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7051 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7052 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7053 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

7054 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7055 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

7056 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7057 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

7058 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7059 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

7060 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7061 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7062 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7063 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7064 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7065 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7066 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7067 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7068 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7069 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7070 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7071 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

7072 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7073 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

7074 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7075 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7076 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7077 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

7078 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7079 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7080 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7081 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

7084 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


7085 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

7086 #ifde‡
GL_GLEXT_PROTOTYPES


7087 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
, GLenum, GLenum, GLenum);

7089 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

7092 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


7093 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

7094 #ifde‡
GL_GLEXT_PROTOTYPES


7095 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
, GLenum, GLenum, GLenum);

7097 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

7100 #i‚de‡
GL_INGR_cﬁ‹_˛amp


7101 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

7104 #i‚de‡
GL_INGR_öãæa˚_ªad


7105 
	#GL_INGR_öãæa˚_ªad
 1

	)

7108 #i‚de‡
GL_EXT_°ícû_wøp


7109 
	#GL_EXT_°ícû_wøp
 1

	)

7112 #i‚de‡
GL_EXT_422_pixñs


7113 
	#GL_EXT_422_pixñs
 1

	)

7116 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


7117 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

7120 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


7121 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

7124 #i‚de‡
GL_EXT_ãxtuª_ív_add


7125 
	#GL_EXT_ãxtuª_ív_add
 1

	)

7128 #i‚de‡
GL_EXT_ãxtuª_lod_büs


7129 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

7132 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


7133 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

7136 #i‚de‡
GL_EXT_vîãx_weightög


7137 
	#GL_EXT_vîãx_weightög
 1

	)

7138 #ifde‡
GL_GLEXT_PROTOTYPES


7139 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
);

7140 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *);

7141 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLsizei
, 
GLíum
, GLsizei, c⁄° 
GLvoid
 *);

7143 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

7144 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

7145 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLíum
 
	tty≥
, GLsizeò
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7148 #i‚de‡
GL_NV_light_max_exp⁄ít


7149 
	#GL_NV_light_max_exp⁄ít
 1

	)

7152 #i‚de‡
GL_NV_vîãx_¨øy_ønge


7153 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

7154 #ifde‡
GL_GLEXT_PROTOTYPES


7155 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

7156 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
, c⁄° 
GLvoid
 *);

7158 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

7159 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7162 #i‚de‡
GL_NV_ªgi°î_comböîs


7163 
	#GL_NV_ªgi°î_comböîs
 1

	)

7164 #ifde‡
GL_GLEXT_PROTOTYPES


7165 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7166 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
, 
GLÊﬂt
);

7167 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

7168 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
, 
GLöt
);

7169 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum, GLenum, GLenum);

7170 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
, GLíum, GLíum, GLíum, GLíum, GLíum, GLíum, 
GLboﬁón
, GLboolean, GLboolean);

7171 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
, GLenum, GLenum, GLenum);

7172 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLÊﬂt
 *);

7173 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, GLíum, GLíum, 
GLöt
 *);

7174 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

7175 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

7176 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

7177 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

7179 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7180 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7181 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7182 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7183 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

7184 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

7185 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

7186 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7187 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7188 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7189 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7190 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7191 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7194 #i‚de‡
GL_NV_fog_di°™˚


7195 
	#GL_NV_fog_di°™˚
 1

	)

7198 #i‚de‡
GL_NV_ãxgí_emboss


7199 
	#GL_NV_ãxgí_emboss
 1

	)

7202 #i‚de‡
GL_NV_bÀnd_squ¨e


7203 
	#GL_NV_bÀnd_squ¨e
 1

	)

7206 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


7207 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

7210 #i‚de‡
GL_MESA_ªsize_buf„rs


7211 
	#GL_MESA_ªsize_buf„rs
 1

	)

7212 #ifde‡
GL_GLEXT_PROTOTYPES


7213 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

7215 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

7218 #i‚de‡
GL_MESA_wödow_pos


7219 
	#GL_MESA_wödow_pos
 1

	)

7220 #ifde‡
GL_GLEXT_PROTOTYPES


7221 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
, GLdouble);

7222 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *);

7223 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
, GLfloat);

7224 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *);

7225 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
, GLint);

7226 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *);

7227 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
, GLshort);

7228 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *);

7229 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
, GLdouble, GLdouble);

7230 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *);

7231 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
, GLfloat, GLfloat);

7232 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *);

7233 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
, GLint, GLint);

7234 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *);

7235 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
, GLshort, GLshort);

7236 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *);

7237 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

7238 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *);

7239 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

7240 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *);

7241 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
, GLint, GLint, GLint);

7242 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *);

7243 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
, GLshort, GLshort, GLshort);

7244 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *);

7246 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7247 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7248 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7249 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7250 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

7251 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7252 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7253 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7254 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7255 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7256 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7257 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7258 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7259 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7260 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7261 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7262 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7263 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7264 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7265 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7266 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7267 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7268 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7269 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7272 #i‚de‡
GL_IBM_cuŒ_vîãx


7273 
	#GL_IBM_cuŒ_vîãx
 1

	)

7276 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


7277 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

7278 #ifde‡
GL_GLEXT_PROTOTYPES


7279 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei, GLint);

7280 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* c⁄° *, GLsizei, 
GLöt
);

7282 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

7283 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

7286 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


7287 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

7288 #ifde‡
GL_GLEXT_PROTOTYPES


7289 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

7290 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

7291 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
, c⁄° 
GLboﬁón
* *, GLint);

7292 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

7293 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

7294 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
, 
GLöt
, c⁄° 
GLvoid
* *, GLint);

7295 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

7296 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
, 
GLíum
, GLöt, c⁄° 
GLvoid
* *, GLint);

7298 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7299 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7300 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
* *
	tpoöãr
, GLöà
	t±r°ride
);

7301 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7302 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7303 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7304 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7305 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
* *
	tpoöãr
, GLöà
	t±r°ride
);

7308 #i‚de‡
GL_SGIX_subßm∂e


7309 
	#GL_SGIX_subßm∂e
 1

	)

7312 #i‚de‡
GL_SGIX_y¸cba


7313 
	#GL_SGIX_y¸cba
 1

	)

7316 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


7317 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

7320 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


7321 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

7324 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


7325 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

7328 #i‚de‡
GL_3DFX_mu…ißm∂e


7329 
	#GL_3DFX_mu…ißm∂e
 1

	)

7332 #i‚de‡
GL_3DFX_tbuf„r


7333 
	#GL_3DFX_tbuf„r
 1

	)

7334 #ifde‡
GL_GLEXT_PROTOTYPES


7335 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
);

7337 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

7340 #i‚de‡
GL_EXT_mu…ißm∂e


7341 
	#GL_EXT_mu…ißm∂e
 1

	)

7342 #ifde‡
GL_GLEXT_PROTOTYPES


7343 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
, 
GLboﬁón
);

7344 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
);

7346 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7347 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

7350 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


7351 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

7354 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


7355 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

7358 #i‚de‡
GL_SGIX_ªßm∂e


7359 
	#GL_SGIX_ªßm∂e
 1

	)

7362 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


7363 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

7366 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


7367 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

7368 #ifde‡
GL_GLEXT_PROTOTYPES


7369 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
, GLboolean, GLboolean, GLboolean);

7371 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

7374 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


7375 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

7376 #ifde‡
GL_GLEXT_PROTOTYPES


7377 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
, c⁄° 
GLvoid
 *);

7379 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLvoid
 *
	t∑øms
);

7382 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


7383 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

7386 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


7387 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

7390 #i‚de‡
GL_NV_„n˚


7391 
	#GL_NV_„n˚
 1

	)

7392 #ifde‡
GL_GLEXT_PROTOTYPES


7393 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

7394 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
, 
GLuöt
 *);

7395 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
);

7396 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
);

7397 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7398 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
);

7399 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
, 
GLíum
);

7401 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

7402 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

7403 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

7404 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

7405 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7406 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

7407 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

7410 #i‚de‡
GL_NV_evÆu©‹s


7411 
	#GL_NV_evÆu©‹s
 1

	)

7412 #ifde‡
GL_GLEXT_PROTOTYPES


7413 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLöt
, GLöt, 
GLboﬁón
, c⁄° 
GLvoid
 *);

7414 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

7415 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

7416 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLsizei
, GLsizei, 
GLboﬁón
, 
GLvoid
 *);

7417 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
, GLíum, 
GLöt
 *);

7418 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

7419 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

7420 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

7421 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
, GLenum);

7423 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

7424 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7425 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7426 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

7427 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7428 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7429 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7430 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7431 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

7434 #i‚de‡
GL_NV_∑cked_dïth_°ícû


7435 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

7438 #i‚de‡
GL_NV_ªgi°î_comböîs2


7439 
	#GL_NV_ªgi°î_comböîs2
 1

	)

7440 #ifde‡
GL_GLEXT_PROTOTYPES


7441 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

7442 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

7444 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7445 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7448 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


7449 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

7452 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


7453 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

7456 #i‚de‡
GL_NV_ãxtuª_shadî


7457 
	#GL_NV_ãxtuª_shadî
 1

	)

7460 #i‚de‡
GL_NV_ãxtuª_shadî2


7461 
	#GL_NV_ãxtuª_shadî2
 1

	)

7464 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


7465 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

7468 #i‚de‡
GL_NV_vîãx_¥ogøm


7469 
	#GL_NV_vîãx_¥ogøm
 1

	)

7470 #ifde‡
GL_GLEXT_PROTOTYPES


7471 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
, c⁄° 
GLuöt
 *, GLboolean *);

7472 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
, 
GLuöt
);

7473 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

7474 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

7475 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
, 
GLuöt
 *);

7476 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLdoubÀ
 *);

7477 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLÊﬂt
 *);

7478 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7479 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
, 
GLíum
, 
GLubyã
 *);

7480 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

7481 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
, 
GLíum
, 
GLdoubÀ
 *);

7482 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7483 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7484 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

7485 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
);

7486 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

7487 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

7488 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLdoubÀ
 *);

7489 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

7490 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLÊﬂt
 *);

7491 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLdoubÀ
 *);

7492 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLÊﬂt
 *);

7493 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

7494 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
, 
GLuöt
, GLenum, GLenum);

7495 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

7496 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
, 
GLdoubÀ
);

7497 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

7498 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
, 
GLÊﬂt
);

7499 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

7500 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
, 
GLsh‹t
);

7501 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

7502 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble);

7503 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

7504 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat);

7505 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

7506 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
, 
GLsh‹t
, GLshort);

7507 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

7508 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble);

7509 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

7510 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat);

7511 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

7512 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort);

7513 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

7514 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

7515 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

7516 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

7517 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

7518 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
, 
GLsh‹t
, GLshort, GLshort, GLshort);

7519 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

7520 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
, 
GLubyã
, GLubyte, GLubyte, GLubyte);

7521 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
, c⁄° 
GLubyã
 *);

7522 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

7523 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7524 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

7525 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

7526 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7527 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

7528 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

7529 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7530 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

7531 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLdoubÀ
 *);

7532 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

7533 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLsh‹t
 *);

7534 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *);

7536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

7537 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

7538 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

7539 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7540 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

7541 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7542 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7543 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7544 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

7545 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7546 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7547 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7548 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7549 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	tpoöãr
);

7550 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

7551 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

7552 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7553 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7554 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7555 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7556 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7557 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7558 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

7559 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

7560 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7561 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7562 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7563 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

7564 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7565 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

7566 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7567 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7568 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7569 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7570 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7571 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7572 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7573 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7574 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7575 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7576 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7577 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7578 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7579 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7580 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7581 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7582 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7583 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7584 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

7585 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

7586 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

7587 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7588 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7589 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

7590 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7591 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7592 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

7593 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7594 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7595 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

7596 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7597 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

7598 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

7599 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

7602 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


7603 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

7606 #i‚de‡
GL_SGIX_sˇÀbüs_höt


7607 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

7610 #i‚de‡
GL_OML_öãæa˚


7611 
	#GL_OML_öãæa˚
 1

	)

7614 #i‚de‡
GL_OML_subßm∂e


7615 
	#GL_OML_subßm∂e
 1

	)

7618 #i‚de‡
GL_OML_ªßm∂e


7619 
	#GL_OML_ªßm∂e
 1

	)

7622 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


7623 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

7626 #i‚de‡
GL_ATI_ívm≠_bumpm≠


7627 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

7628 #ifde‡
GL_GLEXT_PROTOTYPES


7629 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
, c⁄° 
GLöt
 *);

7630 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7631 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
, 
GLöt
 *);

7632 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
, 
GLÊﬂt
 *);

7634 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

7635 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

7636 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

7637 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

7640 #i‚de‡
GL_ATI_‰agmít_shadî


7641 
	#GL_ATI_‰agmít_shadî
 1

	)

7642 #ifde‡
GL_GLEXT_PROTOTYPES


7643 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuint);

7644 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
);

7645 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
);

7646 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

7647 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

7648 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
, GLuöt, 
GLíum
);

7649 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
, GLuöt, 
GLíum
);

7650 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint);

7651 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

7652 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

7653 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

7654 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

7655 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);

7656 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

7658 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

7659 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

7660 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

7661 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

7662 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

7663 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

7664 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

7665 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

7666 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

7667 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

7668 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

7669 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

7670 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

7671 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

7674 #i‚de‡
GL_ATI_≤_åüngÀs


7675 
	#GL_ATI_≤_åüngÀs
 1

	)

7676 #ifde‡
GL_GLEXT_PROTOTYPES


7677 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
, 
GLöt
);

7678 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
, 
GLÊﬂt
);

7680 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7681 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7684 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


7685 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

7686 #ifde‡
GL_GLEXT_PROTOTYPES


7687 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

7688 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
);

7689 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLvoid
 *, 
GLíum
);

7690 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7691 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7692 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
);

7693 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, 
GLuöt
, GLuint);

7694 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
, GLíum, 
GLÊﬂt
 *);

7695 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
, GLíum, 
GLöt
 *);

7696 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLuint, GLuint);

7697 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7698 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7700 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

7701 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7702 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

7703 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7704 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7705 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7706 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

7707 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7708 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7709 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

7710 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7711 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7714 #i‚de‡
GL_EXT_vîãx_shadî


7715 
	#GL_EXT_vîãx_shadî
 1

	)

7716 #ifde‡
GL_GLEXT_PROTOTYPES


7717 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

7718 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

7719 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
);

7720 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuint);

7721 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
);

7722 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
, 
GLuöt
, GLuint);

7723 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint);

7724 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint);

7725 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

7726 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLenum, GLenum);

7727 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

7728 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
, GLuint, GLuint);

7729 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
, GLenum, GLenum, GLuint);

7730 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

7731 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
, 
GLíum
, c⁄° 
GLvoid
 *);

7732 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

7733 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

7734 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

7735 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
, c⁄° 
GLÊﬂt
 *);

7736 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
, c⁄° 
GLdoubÀ
 *);

7737 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

7738 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

7739 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
, const GLuint *);

7740 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLvoid
 *);

7741 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

7742 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
);

7743 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
, GLenum);

7744 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
, GLenum);

7745 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
, GLenum, GLenum);

7746 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
, GLenum);

7747 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
);

7748 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
, 
GLíum
);

7749 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

7750 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7751 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7752 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

7753 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

7754 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7755 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7756 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
, 
GLíum
, 
GLboﬁón
 *);

7757 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7758 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

7760 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

7761 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

7762 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

7763 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

7764 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

7765 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

7766 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

7767 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

7768 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

7769 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

7770 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

7771 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

7772 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

7773 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

7774 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	taddr
);

7775 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

7776 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

7777 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

7778 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

7779 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

7780 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

7781 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

7782 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

7783 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° 
	tGLvoid
 *
	taddr
);

7784 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

7785 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

7786 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

7787 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

7788 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

7789 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

7790 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

7791 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

7792 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7793 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7794 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7795 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
* *
	td©a
);

7796 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7797 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7798 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7799 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7800 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7801 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7804 #i‚de‡
GL_ATI_vîãx_°ªams


7805 
	#GL_ATI_vîãx_°ªams
 1

	)

7806 #ifde‡
GL_GLEXT_PROTOTYPES


7807 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
, 
GLsh‹t
);

7808 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

7809 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
, 
GLöt
);

7810 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

7811 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
, 
GLÊﬂt
);

7812 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7813 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
, 
GLdoubÀ
);

7814 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

7815 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
, 
GLsh‹t
, GLshort);

7816 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

7817 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
, 
GLöt
, GLint);

7818 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

7819 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat);

7820 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7821 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble);

7822 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

7823 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

7824 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

7825 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

7826 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

7827 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

7828 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7829 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

7830 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

7831 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort, GLshort);

7832 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

7833 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
, 
GLöt
, GLint, GLint, GLint);

7834 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

7835 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

7836 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7837 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

7838 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

7839 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
, 
GLbyã
, GLbyte, GLbyte);

7840 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
, c⁄° 
GLbyã
 *);

7841 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
, 
GLsh‹t
, GLshort, GLshort);

7842 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
, c⁄° 
GLsh‹t
 *);

7843 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
, 
GLöt
, GLint, GLint);

7844 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
, c⁄° 
GLöt
 *);

7845 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

7846 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

7847 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

7848 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

7849 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
);

7850 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
, 
GLöt
);

7851 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
, 
GLÊﬂt
);

7853 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

7854 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7855 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

7856 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7857 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

7858 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7859 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

7860 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7861 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7862 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7863 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

7864 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7865 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7866 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7867 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7868 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7869 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7870 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7871 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7872 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7873 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7874 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7875 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7876 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7877 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7878 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7879 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7880 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7881 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7882 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7883 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7884 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7885 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

7886 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

7887 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

7888 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7889 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

7890 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7891 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

7892 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7893 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

7894 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7895 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

7896 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7897 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7900 #i‚de‡
GL_ATI_ñemít_¨øy


7901 
	#GL_ATI_ñemít_¨øy
 1

	)

7902 #ifde‡
GL_GLEXT_PROTOTYPES


7903 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
, c⁄° 
GLvoid
 *);

7904 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
, 
GLsizei
);

7905 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
);

7907 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7908 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

7909 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

7912 #i‚de‡
GL_SUN_mesh_¨øy


7913 
	#GL_SUN_mesh_¨øy
 1

	)

7914 #ifde‡
GL_GLEXT_PROTOTYPES


7915 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

7917 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

7920 #i‚de‡
GL_SUN_¶i˚_accum


7921 
	#GL_SUN_¶i˚_accum
 1

	)

7924 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


7925 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

7928 #i‚de‡
GL_NV_dïth_˛amp


7929 
	#GL_NV_dïth_˛amp
 1

	)

7932 #i‚de‡
GL_NV_oc˛usi⁄_quîy


7933 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

7934 #ifde‡
GL_GLEXT_PROTOTYPES


7935 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
, 
GLuöt
 *);

7936 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

7937 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
);

7938 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
);

7939 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

7940 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

7941 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
, 
GLíum
, GLuint *);

7943 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

7944 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

7945 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

7946 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

7947 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

7948 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7949 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

7952 #i‚de‡
GL_NV_poöt_•rôe


7953 
	#GL_NV_poöt_•rôe
 1

	)

7954 #ifde‡
GL_GLEXT_PROTOTYPES


7955 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
, 
GLöt
);

7956 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
, c⁄° 
GLöt
 *);

7958 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7959 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7962 #i‚de‡
GL_NV_ãxtuª_shadî3


7963 
	#GL_NV_ãxtuª_shadî3
 1

	)

7966 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


7967 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

7970 #i‚de‡
GL_EXT_shadow_funcs


7971 
	#GL_EXT_shadow_funcs
 1

	)

7974 #i‚de‡
GL_EXT_°ícû_two_side


7975 
	#GL_EXT_°ícû_two_side
 1

	)

7976 #ifde‡
GL_GLEXT_PROTOTYPES


7977 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
);

7979 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7982 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


7983 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

7986 #i‚de‡
GL_APPLE_˛õ¡_°‹age


7987 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

7990 #i‚de‡
GL_APPLE_ñemít_¨øy


7991 
	#GL_APPLE_ñemít_¨øy
 1

	)

7992 #ifde‡
GL_GLEXT_PROTOTYPES


7993 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
, c⁄° 
GLvoid
 *);

7994 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
, 
GLöt
, 
GLsizei
);

7995 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöt
, 
GLsizei
);

7996 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

7997 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
, 
GLuöt
, GLuöt, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

7999 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8000 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8001 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8002 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

8003 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

8006 #i‚de‡
GL_APPLE_„n˚


8007 
	#GL_APPLE_„n˚
 1

	)

8008 #ifde‡
GL_GLEXT_PROTOTYPES


8009 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
, 
GLuöt
 *);

8010 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

8011 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
);

8012 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
);

8013 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
);

8014 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
);

8015 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
, 
GLuöt
);

8016 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
, 
GLöt
);

8018 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

8019 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

8020 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

8021 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

8022 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

8023 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

8024 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

8025 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

8028 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


8029 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

8030 #ifde‡
GL_GLEXT_PROTOTYPES


8031 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
);

8032 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
, c⁄° 
GLuöt
 *);

8033 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
, 
GLuöt
 *);

8034 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
);

8036 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

8037 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

8038 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

8039 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

8042 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


8043 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

8044 #ifde‡
GL_GLEXT_PROTOTYPES


8045 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

8046 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
, 
GLvoid
 *);

8047 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
, 
GLöt
);

8049 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

8050 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

8051 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8054 #i‚de‡
GL_APPLE_ycb¸_422


8055 
	#GL_APPLE_ycb¸_422
 1

	)

8058 #i‚de‡
GL_S3_s3tc


8059 
	#GL_S3_s3tc
 1

	)

8062 #i‚de‡
GL_ATI_døw_buf„rs


8063 
	#GL_ATI_døw_buf„rs
 1

	)

8064 #ifde‡
GL_GLEXT_PROTOTYPES


8065 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
, c⁄° 
GLíum
 *);

8067 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

8070 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


8071 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

8077 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


8078 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

8081 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


8082 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

8085 #i‚de‡
GL_NV_Êﬂt_buf„r


8086 
	#GL_NV_Êﬂt_buf„r
 1

	)

8089 #i‚de‡
GL_NV_‰agmít_¥ogøm


8090 
	#GL_NV_‰agmít_¥ogøm
 1

	)

8092 #ifde‡
GL_GLEXT_PROTOTYPES


8093 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

8094 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

8095 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLÊﬂt
 *);

8096 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, c⁄° 
GLdoubÀ
 *);

8097 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLÊﬂt
 *);

8098 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLubyã
 *, 
GLdoubÀ
 *);

8100 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8101 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8102 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8103 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8104 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

8105 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

8108 #i‚de‡
GL_NV_hÆf_Êﬂt


8109 
	#GL_NV_hÆf_Êﬂt
 1

	)

8110 #ifde‡
GL_GLEXT_PROTOTYPES


8111 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
, GLhalfNV);

8112 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *);

8113 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

8114 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *);

8115 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

8116 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *);

8117 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

8118 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *);

8119 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

8120 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

8121 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

8122 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *);

8123 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
);

8124 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *);

8125 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
, GLhalfNV);

8126 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *);

8127 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

8128 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *);

8129 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

8130 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *);

8131 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
, 
GLhÆfNV
);

8132 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

8133 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV);

8134 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

8135 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

8136 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

8137 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

8138 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
, c⁄° 
GLhÆfNV
 *);

8139 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
);

8140 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *);

8141 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
, GLhalfNV, GLhalfNV);

8142 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *);

8143 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
);

8144 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *);

8145 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
, 
GLhÆfNV
);

8146 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

8147 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV);

8148 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

8149 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV);

8150 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

8151 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
, 
GLhÆfNV
, GLhalfNV, GLhalfNV, GLhalfNV);

8152 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
, c⁄° 
GLhÆfNV
 *);

8153 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

8154 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

8155 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

8156 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLhÆfNV
 *);

8158 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

8159 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8160 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

8161 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8162 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

8163 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8164 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

8165 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8166 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

8167 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8168 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

8169 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8170 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

8171 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8172 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

8173 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8174 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

8175 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8176 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

8177 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8178 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

8179 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8180 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

8181 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8182 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

8183 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8184 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

8185 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8186 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

8187 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

8188 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

8189 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8190 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

8191 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

8192 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

8193 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8194 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

8195 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8196 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

8197 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8198 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

8199 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8200 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8201 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8202 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8203 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8206 #i‚de‡
GL_NV_pixñ_d©a_ønge


8207 
	#GL_NV_pixñ_d©a_ønge
 1

	)

8208 #ifde‡
GL_GLEXT_PROTOTYPES


8209 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
, 
GLsizei
, 
GLvoid
 *);

8210 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
);

8212 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

8213 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

8216 #i‚de‡
GL_NV_¥imôive_ª°¨t


8217 
	#GL_NV_¥imôive_ª°¨t
 1

	)

8218 #ifde‡
GL_GLEXT_PROTOTYPES


8219 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

8220 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
);

8222 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

8223 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

8226 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


8227 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

8230 #i‚de‡
GL_NV_vîãx_¥ogøm2


8231 
	#GL_NV_vîãx_¥ogøm2
 1

	)

8234 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


8235 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

8236 #ifde‡
GL_GLEXT_PROTOTYPES


8237 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
);

8238 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
);

8240 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8241 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8244 #i‚de‡
GL_ATI_£∑øã_°ícû


8245 
	#GL_ATI_£∑øã_°ícû
 1

	)

8246 #ifde‡
GL_GLEXT_PROTOTYPES


8247 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
, GLenum, GLenum, GLenum);

8248 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
, GLíum, 
GLöt
, 
GLuöt
);

8250 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

8251 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

8254 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


8255 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

8256 #ifde‡
GL_GLEXT_PROTOTYPES


8257 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
, GLuint, GLuint);

8258 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
, 
GLíum
, 
GLÊﬂt
 *);

8259 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

8261 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

8262 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8263 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8266 #i‚de‡
GL_OES_ªad_f‹m©


8267 
	#GL_OES_ªad_f‹m©
 1

	)

8270 #i‚de‡
GL_EXT_dïth_bounds_ã°


8271 
	#GL_EXT_dïth_bounds_ã°
 1

	)

8272 #ifde‡
GL_GLEXT_PROTOTYPES


8273 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
, GLclampd);

8275 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

8278 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


8279 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

8282 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


8283 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

8284 #ifde‡
GL_GLEXT_PROTOTYPES


8285 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
, GLenum);

8287 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

8290 #i‚de‡
GL_MESA_∑ck_övît


8291 
	#GL_MESA_∑ck_övît
 1

	)

8294 #i‚de‡
GL_MESA_ycb¸_ãxtuª


8295 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

8298 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


8299 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

8302 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


8303 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

8306 #i‚de‡
GL_NV_‰agmít_¥ogøm2


8307 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

8310 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


8311 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

8314 #i‚de‡
GL_NV_vîãx_¥ogøm3


8315 
	#GL_NV_vîãx_¥ogøm3
 1

	)

8318 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


8319 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

8320 #ifde‡
GL_GLEXT_PROTOTYPES


8321 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
);

8322 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
, 
GLuöt
);

8323 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

8324 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

8325 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
, GLíum, 
GLsizei
, GLsizei);

8326 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

8327 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
);

8328 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
, 
GLuöt
);

8329 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
, c⁄° 
GLuöt
 *);

8330 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
, 
GLuöt
 *);

8331 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLenum);

8332 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

8333 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
);

8334 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, GLint);

8335 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

8336 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

8337 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
);

8339 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

8340 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

8341 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

8342 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

8343 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8344 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8345 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

8346 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

8347 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

8348 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

8349 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8350 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8351 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8352 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

8353 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

8354 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8355 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8358 #i‚de‡
GL_GREMEDY_°rög_m¨kî


8359 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

8360 #ifde‡
GL_GLEXT_PROTOTYPES


8361 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
, c⁄° 
GLvoid
 *);

8363 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

8366 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


8367 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

8370 #i‚de‡
GL_EXT_°ícû_˛ór_èg


8371 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

8372 #ifde‡
GL_GLEXT_PROTOTYPES


8373 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
, 
GLuöt
);

8375 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

8378 #i‚de‡
GL_EXT_ãxtuª_sRGB


8379 
	#GL_EXT_ãxtuª_sRGB
 1

	)

8382 #i‚de‡
GL_EXT_‰amebuf„r_blô


8383 
	#GL_EXT_‰amebuf„r_blô
 1

	)

8384 #ifde‡
GL_GLEXT_PROTOTYPES


8385 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLbôfõld
, 
GLíum
);

8387 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

8390 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


8391 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

8392 #ifde‡
GL_GLEXT_PROTOTYPES


8393 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
, 
GLsizei
, GLenum, GLsizei, GLsizei);

8395 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8398 #i‚de‡
GL_MESAX_ãxtuª_°ack


8399 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8402 #i‚de‡
GL_EXT_timî_quîy


8403 
	#GL_EXT_timî_quîy
 1

	)

8404 #ifde‡
GL_GLEXT_PROTOTYPES


8405 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
, 
GLíum
, 
GLöt64EXT
 *);

8406 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
, 
GLíum
, 
GLuöt64EXT
 *);

8408 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

8409 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

8412 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


8413 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

8414 #ifde‡
GL_GLEXT_PROTOTYPES


8415 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8416 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8418 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8419 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8422 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


8423 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

8424 #ifde‡
GL_GLEXT_PROTOTYPES


8425 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
, GLíum, 
GLöt
);

8426 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
, 
GLöçå
, 
GLsizeùå
);

8428 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8429 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8432 #i‚de‡
GL_NV_gpu_¥ogøm4


8433 
	#GL_NV_gpu_¥ogøm4
 1

	)

8434 #ifde‡
GL_GLEXT_PROTOTYPES


8435 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
, 
GLuöt
, 
GLöt
, GLint, GLint, GLint);

8436 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLöt
 *);

8437 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLöt
 *);

8438 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

8439 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
, 
GLuöt
, const GLuint *);

8440 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, const GLuint *);

8441 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
, 
GLuöt
, 
GLöt
, GLint, GLint, GLint);

8442 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
, 
GLuöt
, c⁄° 
GLöt
 *);

8443 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, c⁄° 
GLöt
 *);

8444 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
, 
GLuöt
, GLuint, GLuint, GLuint, GLuint);

8445 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
, 
GLuöt
, const GLuint *);

8446 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
, 
GLuöt
, 
GLsizei
, const GLuint *);

8447 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

8448 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
, 
GLuöt
, GLuint *);

8449 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

8450 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
, 
GLuöt
, GLuint *);

8452 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8453 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

8454 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8455 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8456 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

8457 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8458 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8459 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

8460 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8461 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8462 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

8463 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8464 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

8465 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

8466 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

8467 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

8470 #i‚de‡
GL_NV_geomëry_¥ogøm4


8471 
	#GL_NV_geomëry_¥ogøm4
 1

	)

8472 #ifde‡
GL_GLEXT_PROTOTYPES


8473 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
, 
GLöt
);

8474 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
);

8475 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLint);

8476 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
, GLíum, 
GLuöt
, 
GLöt
, GLenum);

8478 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

8479 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8480 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8481 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

8484 #i‚de‡
GL_EXT_geomëry_shadî4


8485 
	#GL_EXT_geomëry_shadî4
 1

	)

8486 #ifde‡
GL_GLEXT_PROTOTYPES


8487 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
, 
GLíum
, 
GLöt
);

8489 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8492 #i‚de‡
GL_NV_vîãx_¥ogøm4


8493 
	#GL_NV_vîãx_¥ogøm4
 1

	)

8494 #ifde‡
GL_GLEXT_PROTOTYPES


8495 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
, 
GLöt
);

8496 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
, 
GLöt
, GLint);

8497 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint);

8498 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint, GLint);

8499 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
, GLuint);

8500 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
, GLuint, GLuint);

8501 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
, GLuint, GLuint, GLuint);

8502 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
, GLuint, GLuint, GLuint, GLuint);

8503 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

8504 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

8505 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

8506 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
, c⁄° 
GLöt
 *);

8507 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
, const GLuint *);

8508 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
, const GLuint *);

8509 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
, const GLuint *);

8510 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
, const GLuint *);

8511 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
, c⁄° 
GLbyã
 *);

8512 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
, c⁄° 
GLsh‹t
 *);

8513 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
, c⁄° 
GLubyã
 *);

8514 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
, c⁄° 
GLush‹t
 *);

8515 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

8516 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

8517 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
, 
GLíum
, GLuint *);

8519 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

8520 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

8521 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8522 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8523 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

8524 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

8525 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

8526 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8527 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8528 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8529 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8530 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

8531 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8532 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8533 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8534 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

8535 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

8536 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

8537 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

8538 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

8539 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8540 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8541 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

8544 #i‚de‡
GL_EXT_gpu_shadî4


8545 
	#GL_EXT_gpu_shadî4
 1

	)

8546 #ifde‡
GL_GLEXT_PROTOTYPES


8547 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
, 
GLöt
, GLuint *);

8548 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
, GLuöt, c⁄° 
GLch¨
 *);

8549 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
, c⁄° 
GLch¨
 *);

8550 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
, 
GLuöt
);

8551 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
, 
GLuöt
, GLuint);

8552 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
, 
GLuöt
, GLuint, GLuint);

8553 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
, 
GLuöt
, GLuint, GLuint, GLuint);

8554 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

8555 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

8556 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

8557 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt
 *);

8559 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

8560 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

8561 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

8562 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

8563 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

8564 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

8565 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

8566 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8567 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8568 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8569 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

8572 #i‚de‡
GL_EXT_døw_ö°™˚d


8573 
	#GL_EXT_døw_ö°™˚d
 1

	)

8574 #ifde‡
GL_GLEXT_PROTOTYPES


8575 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
, 
GLöt
, 
GLsizei
, GLsizei);

8576 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
, 
GLsizei
, GLíum, c⁄° 
GLvoid
 *, GLsizei);

8578 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

8579 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

8582 #i‚de‡
GL_EXT_∑cked_Êﬂt


8583 
	#GL_EXT_∑cked_Êﬂt
 1

	)

8586 #i‚de‡
GL_EXT_ãxtuª_¨øy


8587 
	#GL_EXT_ãxtuª_¨øy
 1

	)

8590 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


8591 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

8592 #ifde‡
GL_GLEXT_PROTOTYPES


8593 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
, GLíum, 
GLuöt
);

8595 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

8598 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


8599 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

8602 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


8603 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

8606 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


8607 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

8610 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


8611 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

8612 #ifde‡
GL_GLEXT_PROTOTYPES


8613 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
, GLdouble);

8614 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
);

8615 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
, GLdouble);

8617 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

8618 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

8619 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

8622 #i‚de‡
GL_NV_‰agmít_¥ogøm4


8623 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

8626 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


8627 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

8628 #ifde‡
GL_GLEXT_PROTOTYPES


8629 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
, 
GLsizei
, GLsizei, GLenum, GLsizei, GLsizei);

8631 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8634 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


8635 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

8638 #i‚de‡
GL_NV_geomëry_shadî4


8639 
	#GL_NV_geomëry_shadî4
 1

	)

8642 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


8643 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

8644 #ifde‡
GL_GLEXT_PROTOTYPES


8645 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8646 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, c⁄° 
GLöt
 *);

8647 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLsizei
, const GLuint *);

8649 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8650 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8651 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8654 #i‚de‡
GL_EXT_døw_buf„rs2


8655 
	#GL_EXT_døw_buf„rs2
 1

	)

8656 #ifde‡
GL_GLEXT_PROTOTYPES


8657 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
, 
GLboﬁón
, GLboolean, GLboolean, GLboolean);

8658 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLboﬁón
 *);

8659 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLöt
 *);

8660 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
, 
GLuöt
);

8661 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
, 
GLuöt
);

8662 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
, 
GLuöt
);

8664 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

8665 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

8666 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

8667 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8668 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8669 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8672 #i‚de‡
GL_NV_å™sf‹m_„edback


8673 
	#GL_NV_å™sf‹m_„edback
 1

	)

8674 #ifde‡
GL_GLEXT_PROTOTYPES


8675 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
);

8676 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

8677 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
, c⁄° 
GLöt
 *, 
GLíum
);

8678 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
, 
GLsizeùå
);

8679 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
);

8680 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
, 
GLuöt
, GLuint);

8681 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, 
GLíum
);

8682 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
, c⁄° 
GLch¨
 *);

8683 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
, c⁄° 
GLch¨
 *);

8684 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, GLsizeò*, 
GLíum
 *, 
GLch¨
 *);

8685 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
, GLuöt, 
GLöt
 *);

8687 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

8688 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

8689 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

8690 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8691 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

8692 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

8693 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

8694 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

8695 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

8696 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

8697 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

8700 #i‚de‡
GL_EXT_bödabÀ_unif‹m


8701 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

8702 #ifde‡
GL_GLEXT_PROTOTYPES


8703 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
, 
GLöt
, GLuint);

8704 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
, GLint);

8705 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
, 
GLöt
);

8707 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

8708 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

8709 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

8712 #i‚de‡
GL_EXT_ãxtuª_öãgî


8713 
	#GL_EXT_ãxtuª_öãgî
 1

	)

8714 #ifde‡
GL_GLEXT_PROTOTYPES


8715 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
, GLíum, c⁄° 
GLöt
 *);

8716 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
, GLíum, c⁄° 
GLuöt
 *);

8717 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
, GLíum, 
GLöt
 *);

8718 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
, GLíum, 
GLuöt
 *);

8719 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
, GLint, GLint, GLint);

8720 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
, GLuint, GLuint, GLuint);

8722 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8723 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8724 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8725 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

8726 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

8727 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

8730 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


8731 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

8732 #ifde‡
GL_GLEXT_PROTOTYPES


8733 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

8735 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

8738 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


8739 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

8740 #ifde‡
GL_GLEXT_PROTOTYPES


8741 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
, 
GLíum
);

8742 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

8744 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

8745 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

8748 #i‚de‡
GL_NV_¥e£¡_video


8749 
	#GL_NV_¥e£¡_video
 1

	)

8750 #ifde‡
GL_GLEXT_PROTOTYPES


8751 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
, 
GLuöt64EXT
, GLuöt, GLuöt, 
GLíum
, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);

8752 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
, 
GLuöt64EXT
, GLuöt, GLuöt, 
GLíum
, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);

8753 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

8754 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
, 
GLíum
, GLuint *);

8755 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
, 
GLíum
, 
GLöt64EXT
 *);

8756 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
, 
GLíum
, 
GLuöt64EXT
 *);

8758 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

8759 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

8760 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8761 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

8762 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

8763 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

8766 #i‚de‡
GL_EXT_å™sf‹m_„edback


8767 
	#GL_EXT_å™sf‹m_„edback
 1

	)

8768 #ifde‡
GL_GLEXT_PROTOTYPES


8769 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
);

8770 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

8771 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
, 
GLsizeùå
);

8772 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
, 
GLuöt
, GLuöt, 
GLöçå
);

8773 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
, 
GLuöt
, GLuint);

8774 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
, 
GLsizei
, c⁄° 
GLch¨
* *, 
GLíum
);

8775 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, GLsizeò*, 
GLíum
 *, 
GLch¨
 *);

8777 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

8778 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

8779 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

8780 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

8781 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

8782 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* *
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

8783 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

8786 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


8787 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

8788 #ifde‡
GL_GLEXT_PROTOTYPES


8789 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
);

8790 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
);

8791 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

8792 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

8793 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

8794 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

8795 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
);

8796 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

8797 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

8798 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

8799 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

8800 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
, 
GLÊﬂt
, GLfloat, GLfloat);

8801 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble);

8802 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);

8803 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);

8804 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
);

8805 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
);

8806 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

8807 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

8808 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

8809 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
, c⁄° 
GLdoubÀ
 *);

8810 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLÊﬂt
);

8811 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
, 
GLíum
, GLíum, c⁄° 
GLÊﬂt
 *);

8812 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLöt
);

8813 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
, 
GLíum
, GLíum, c⁄° 
GLöt
 *);

8814 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

8815 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

8816 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

8817 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

8818 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

8819 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

8820 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

8821 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

8822 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, GLíum, 
GLvoid
 *);

8823 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLÊﬂt
 *);

8824 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLöt
 *);

8825 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLÊﬂt
 *);

8826 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLenum, GLint *);

8827 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

8828 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

8829 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

8830 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
);

8831 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLÊﬂt
 *);

8832 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
);

8833 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLöt
 *);

8834 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

8835 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

8836 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLíum, c⁄° 
GLvoid
 *);

8837 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

8838 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLint);

8839 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, GLöt, GLöt, 
GLsizei
, GLsizei, GLint);

8840 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
);

8841 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

8842 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, GLíum, 
GLvoid
 *);

8843 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

8844 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

8845 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLÊﬂt
 *);

8846 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
, GLíum, 
GLöt
, GLenum, GLint *);

8847 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLíum, GLíum, c⁄° 
GLvoid
 *);

8848 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLíum, c⁄° 
GLvoid
 *);

8849 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei);

8850 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
, GLíum, 
GLuöt
);

8851 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
, 
GLuöt
);

8852 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
, 
GLuöt
);

8853 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
, 
GLöt
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

8854 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
);

8855 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLÊﬂt
 *);

8856 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
);

8857 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLöt
 *);

8858 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
, GLíum, GLíum, 
GLdoubÀ
);

8859 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLdoubÀ
 *);

8860 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
);

8861 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLÊﬂt
 *);

8862 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
);

8863 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLöt
 *);

8864 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

8865 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

8866 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
, GLíum, GLíum, 
GLdoubÀ
 *);

8867 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
, GLíum, GLíum, 
GLÊﬂt
 *);

8868 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

8869 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

8870 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLdoubÀ
 *);

8871 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
, 
GLuöt
, 
GLvoid
* *);

8872 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

8873 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

8874 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

8875 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

8876 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

8877 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

8878 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
, 
GLíum
, 
GLöt
, 
GLvoid
 *);

8879 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

8880 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLsizei
, GLsizei, GLöt, GLsizei, c⁄° 
GLvoid
 *);

8881 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLíum, 
GLsizei
, GLöt, GLsizei, c⁄° 
GLvoid
 *);

8882 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

8883 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, GLöt, 
GLsizei
, GLsizei, GLíum, GLsizei, c⁄° 
GLvoid
 *);

8884 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
, GLíum, 
GLöt
, GLöt, 
GLsizei
, GLíum, GLsizei, c⁄° 
GLvoid
 *);

8885 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
, GLíum, 
GLöt
, 
GLvoid
 *);

8886 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLsizei
, c⁄° 
GLvoid
 *);

8887 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLdoubÀ
, GLdouble, GLdouble, GLdouble);

8888 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLdoubÀ
 *);

8889 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

8890 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLÊﬂt
 *);

8891 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLdoubÀ
 *);

8892 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLÊﬂt
 *);

8893 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLöt
 *);

8894 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLvoid
 *);

8895 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8896 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLöt
, GLint, GLint, GLint);

8897 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
, 
GLíum
, GLuöt, c⁄° 
GLöt
 *);

8898 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLsizei
, c⁄° 
GLöt
 *);

8899 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
, 
GLíum
, GLuint, GLuint, GLuint, GLuint, GLuint);

8900 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
, 
GLíum
, GLuint, const GLuint *);

8901 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLsizei
, const GLuint *);

8902 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLöt
 *);

8903 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
, 
GLíum
, GLuint, GLuint *);

8904 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
, 
GLíum
, GLíum, c⁄° 
GLöt
 *);

8905 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
, 
GLíum
, GLenum, const GLuint *);

8906 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLöt
 *);

8907 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
, 
GLíum
, GLenum, GLuint *);

8908 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLöt
 *);

8909 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
, GLíum, GLíum, c⁄° 
GLuöt
 *);

8910 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
, GLíum, GLíum, 
GLöt
 *);

8911 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
 *);

8912 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
);

8913 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
, GLfloat);

8914 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat);

8915 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
, 
GLöt
, 
GLÊﬂt
, GLfloat, GLfloat, GLfloat);

8916 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
, 
GLöt
, GLint);

8917 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint);

8918 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint, GLint);

8919 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
, 
GLöt
, GLint, GLint, GLint, GLint);

8920 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8921 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8922 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8923 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, c⁄° 
GLÊﬂt
 *);

8924 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLint *);

8925 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLint *);

8926 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLint *);

8927 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLint *);

8928 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8929 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8930 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8931 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8932 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8933 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8934 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8935 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8936 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, 
GLboﬁón
, c⁄° 
GLÊﬂt
 *);

8937 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
, 
GLöt
, GLuint);

8938 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
, 
GLöt
, GLuint, GLuint);

8939 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
, 
GLöt
, GLuint, GLuint, GLuint);

8940 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
, 
GLöt
, GLuint, GLuint, GLuint, GLuint);

8941 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLuint *);

8942 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLuint *);

8943 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLuint *);

8944 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
, 
GLöt
, 
GLsizei
, const GLuint *);

8945 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
, 
GLsizeùå
, c⁄° 
GLvoid
 *, 
GLíum
);

8946 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
, 
GLöçå
, 
GLsizeùå
, c⁄° 
GLvoid
 *);

8947 
GLAPI
 
GLvoid
* 
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
, 
GLíum
);

8948 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
);

8949 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

8950 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
, 
GLíum
, 
GLvoid
* *);

8951 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
, 
GLöçå
, 
GLsizeùå
, 
GLvoid
 *);

8952 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
, 
GLíum
, GLenum, GLuint);

8953 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
);

8954 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLsizei);

8955 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

8956 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
, GLenum);

8957 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
, 
GLíum
, GLíum, GLuöt, 
GLöt
);

8958 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
, 
GLíum
, GLíum, GLuöt, 
GLöt
);

8959 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
, 
GLíum
, GLíum, GLuöt, 
GLöt
, GLint);

8960 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
, 
GLíum
, GLenum, GLuint);

8961 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
, 
GLíum
, GLíum, 
GLöt
 *);

8962 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
, 
GLíum
);

8963 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
, GLenum);

8964 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
, 
GLíum
);

8965 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
, 
GLsizei
, c⁄° 
GLíum
 *);

8966 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
, 
GLíum
);

8967 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

8968 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
, 
GLsizei
, 
GLíum
, GLsizei, GLsizei);

8969 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
, 
GLsizei
, GLsizei, 
GLíum
, GLsizei, GLsizei);

8970 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLöt
);

8971 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLöt
, GLint);

8972 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
, 
GLíum
, GLuöt, 
GLöt
, GLenum);

8973 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
, 
GLíum
, GLuint);

8974 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
, GLíum, 
GLuöt
);

8976 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

8977 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

8978 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

8979 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

8980 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

8981 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

8982 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

8983 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8984 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8985 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8986 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8987 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8988 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8989 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

8990 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

8991 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

8992 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

8993 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

8994 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

8995 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

8996 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

8997 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8998 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8999 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9000 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9001 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9002 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9003 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9004 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9005 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

9006 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

9007 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

9008 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

9009 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

9010 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9011 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9012 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9013 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

9014 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9015 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9016 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

9017 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9018 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9019 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9020 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9021 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9022 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9023 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9024 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9025 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

9026 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

9027 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

9028 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

9029 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

9030 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9031 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9032 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9033 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

9034 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9035 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9036 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

9037 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

9038 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

9039 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

9040 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9041 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9042 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9043 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9044 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9045 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

9046 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

9047 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9048 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9049 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9050 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9051 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9052 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9053 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9054 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9055 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9056 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

9057 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

9058 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
* *
	td©a
);

9059 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9060 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9061 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9062 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9063 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9064 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9065 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

9066 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9067 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9068 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9069 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9070 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9071 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	tbôs
);

9072 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

9073 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

9074 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9075 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

9076 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9077 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9078 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

9079 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

9080 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9081 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

9082 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9083 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9084 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

9085 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9086 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9087 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

9088 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9089 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

9090 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

9091 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9092 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

9093 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9094 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

9095 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9096 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

9097 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9098 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

9099 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

9100 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

9101 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

9102 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

9103 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

9104 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

9105 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

9106 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

9107 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9108 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9109 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9110 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9111 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

9112 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

9113 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

9114 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

9115 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9116 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9117 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9118 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9119 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9120 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9121 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9122 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9123 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9124 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

9125 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

9126 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

9127 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

9128 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

9129 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

9130 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

9131 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

9132 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, 
	tGLíum
 
	tußge
);

9133 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

9134 
	gGLvoid
* (
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

9135 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9136 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9137 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

9138 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

9139 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

9140 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

9141 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

9142 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9143 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

9144 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9145 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9146 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

9147 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

9148 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9149 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

9150 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

9151 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

9152 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

9153 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

9154 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9155 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

9156 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

9157 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9158 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

9159 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

9160 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

9161 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

9164 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


9165 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

9168 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


9169 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

9172 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


9173 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

9174 #ifde‡
GL_GLEXT_PROTOTYPES


9175 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
, 
GLuöt
, 
GLÊﬂt
 *);

9176 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
, 
GLbôfõld
);

9177 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
, 
GLuöt
);

9179 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

9180 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

9181 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

9184 #i‚de‡
GL_NV_å™sf‹m_„edback2


9185 
	#GL_NV_å™sf‹m_„edback2
 1

	)

9186 #ifde‡
GL_GLEXT_PROTOTYPES


9187 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
, 
GLuöt
);

9188 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

9189 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
, 
GLuöt
 *);

9190 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
);

9191 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

9192 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

9193 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
, 
GLuöt
);

9195 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

9196 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9197 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9198 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

9199 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

9200 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

9201 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

9204 #i‚de‡
GL_ATI_memöfo


9205 
	#GL_ATI_memöfo
 1

	)

9208 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


9209 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

9210 #ifde‡
GL_GLEXT_PROTOTYPES


9211 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *, 
GLsizei
, 
GLuöt
 *);

9212 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
, 
GLöt
 *, GLöà*, 
GLsizei
, GLuint *);

9213 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

9214 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
, GLuöt, 
GLsizei
, GLsizeò*, 
GLch¨
 *);

9215 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
, GLuöt, 
GLíum
, *);

9216 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
, 
GLuöt
 *);

9217 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
, 
GLuöt
 *);

9218 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
, 
GLboﬁón
, GLuöt, 
GLöt
, GLuint *);

9219 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
);

9220 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
);

9221 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
, 
GLíum
, 
GLsizei
, GLuöà*, 
GLöt
 *);

9223 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

9224 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

9225 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

9226 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

9227 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

9228 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

9229 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

9230 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

9231 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

9232 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

9233 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

9236 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


9237 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

9240 #i‚de‡
GL_AMD_vîãx_shadî_ãs£œt‹


9241 
	#GL_AMD_vîãx_shadî_ãs£œt‹
 1

	)

9242 #ifde‡
GL_GLEXT_PROTOTYPES


9243 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
);

9244 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
);

9246 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

9247 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

9250 #i‚de‡
GL_EXT_¥ovokög_vîãx


9251 
	#GL_EXT_¥ovokög_vîãx
 1

	)

9252 #ifde‡
GL_GLEXT_PROTOTYPES


9253 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
);

9255 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

9258 #i‚de‡
GL_EXT_ãxtuª_¢‹m


9259 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

9262 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


9263 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

9264 #ifde‡
GL_GLEXT_PROTOTYPES


9265 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
, 
GLíum
, GLenum);

9266 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
, 
GLíum
, GLenum, GLenum, GLenum);

9267 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
, 
GLíum
);

9268 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
, 
GLíum
, GLenum);

9270 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

9271 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

9272 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

9273 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

9276 #i‚de‡
GL_APPLE_ãxtuª_ønge


9277 
	#GL_APPLE_ãxtuª_ønge
 1

	)

9278 #ifde‡
GL_GLEXT_PROTOTYPES


9279 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
, 
GLsizei
, c⁄° 
GLvoid
 *);

9280 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
, GLíum, 
GLvoid
* *);

9282 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9283 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
* *
	t∑øms
);

9286 #i‚de‡
GL_APPLE_Êﬂt_pixñs


9287 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

9290 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


9291 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

9292 #ifde‡
GL_GLEXT_PROTOTYPES


9293 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
, 
GLíum
);

9294 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
, 
GLíum
);

9295 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
, 
GLíum
);

9296 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
, GLuöt, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, const GLdouble *);

9297 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
, GLuöt, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, const GLfloat *);

9298 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
, GLuöt, 
GLdoubÀ
, GLdoubÀ, 
GLöt
, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);

9299 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
, GLuöt, 
GLÊﬂt
, GLÊﬂt, 
GLöt
, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);

9301 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

9302 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

9303 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

9304 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

9305 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

9306 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

9307 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

9310 #i‚de‡
GL_APPLE_aux_dïth_°ícû


9311 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

9314 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


9315 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

9316 #ifde‡
GL_GLEXT_PROTOTYPES


9317 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum, 
GLuöt
, GLenum);

9318 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum, 
GLuöt
, GLenum);

9319 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
, 
GLuöt
, GLíum, 
GLöt
 *);

9321 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

9322 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

9323 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9326 #i‚de‡
GL_APPLE_row_byãs


9327 
	#GL_APPLE_row_byãs
 1

	)

9330 #i‚de‡
GL_APPLE_rgb_422


9331 
	#GL_APPLE_rgb_422
 1

	)

9334 #i‚de‡
GL_NV_video_ˇ±uª


9335 
	#GL_NV_video_ˇ±uª
 1

	)

9336 #ifde‡
GL_GLEXT_PROTOTYPES


9337 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
);

9338 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
, GLuöt, 
GLíum
, 
GLöçåARB
);

9339 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
, GLuöt, 
GLíum
, GLenum, GLuint);

9340 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
);

9341 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

9342 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
, GLuöt, 
GLíum
, 
GLöt
 *);

9343 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
, GLuöt, 
GLíum
, 
GLÊﬂt
 *);

9344 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
, GLuöt, 
GLíum
, 
GLdoubÀ
 *);

9345 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
, GLuöà*, 
GLuöt64EXT
 *);

9346 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
, GLuöt, 
GLíum
, c⁄° 
GLöt
 *);

9347 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
, GLuöt, 
GLíum
, c⁄° 
GLÊﬂt
 *);

9348 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
, GLuöt, 
GLíum
, c⁄° 
GLdoubÀ
 *);

9350 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

9351 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

9352 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

9353 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

9354 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9355 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9356 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9357 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9358 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

9359 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9360 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9361 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

9364 #i‚de‡
GL_NV_c›y_image


9365 
	#GL_NV_c›y_image
 1

	)

9366 #ifde‡
GL_GLEXT_PROTOTYPES


9367 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
, 
GLíum
, 
GLöt
, GLöt, GLöt, GLöt, GLuöt, GLíum, GLöt, GLöt, GLöt, GLöt, 
GLsizei
, GLsizei, GLsizei);

9369 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

9372 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


9373 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

9374 #ifde‡
GL_GLEXT_PROTOTYPES


9375 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
, 
GLuöt
);

9376 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
);

9377 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
, c⁄° 
GLch¨
 *);

9379 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

9380 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

9381 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

9384 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


9385 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

9388 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


9389 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

9390 #ifde‡
GL_GLEXT_PROTOTYPES


9391 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
, GLenum);

9392 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
);

9393 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
);

9394 
GLAPI
 
APIENTRY
 
glNamedMakeBuf„rResidítNV
 (
GLuöt
, 
GLíum
);

9395 
GLAPI
 
APIENTRY
 
glNamedMakeBuf„rN⁄ResidítNV
 (
GLuöt
);

9396 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
);

9397 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
, GLíum, 
GLuöt64EXT
 *);

9398 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
, 
GLíum
, 
GLuöt64EXT
 *);

9399 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
, 
GLuöt64EXT
 *);

9400 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
, 
GLuöt64EXT
);

9401 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
, 
GLsizei
, c⁄° 
GLuöt64EXT
 *);

9402 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
, 
GLöt
, 
GLuöt64EXT
 *);

9403 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
, 
GLöt
, 
GLuöt64EXT
);

9404 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
, 
GLöt
, 
GLsizei
, c⁄° 
GLuöt64EXT
 *);

9406 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

9407 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

9408 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

9409 (
APIENTRYP
 
	tPFNGLNAMEDMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

9410 (
APIENTRYP
 
	tPFNGLNAMEDMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9411 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9412 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9413 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9414 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

9415 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

9416 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

9417 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

9418 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

9419 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

9422 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


9423 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

9424 #ifde‡
GL_GLEXT_PROTOTYPES


9425 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
, 
GLuöt
, 
GLuöt64EXT
, 
GLsizeùå
);

9426 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
, 
GLíum
, 
GLsizei
);

9427 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
, 
GLsizei
);

9428 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
, 
GLíum
, 
GLsizei
);

9429 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
, 
GLsizei
);

9430 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
, 
GLíum
, 
GLsizei
);

9431 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
);

9432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
, 
GLíum
, 
GLsizei
);

9433 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
, 
GLsizei
);

9434 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLboﬁón
, 
GLsizei
);

9435 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
, 
GLöt
, 
GLíum
, 
GLsizei
);

9436 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
, 
GLuöt
, 
GLuöt64EXT
 *);

9438 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

9439 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9440 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9441 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9442 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9443 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9444 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

9445 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9446 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9447 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

9448 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9449 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

9452 #i‚de‡
GL_NV_ãxtuª_b¨rõr


9453 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

9454 #ifde‡
GL_GLEXT_PROTOTYPES


9455 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

9457 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

9461 #ifde‡
__˝lu•lus


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 
	~<bôs/w‹dsize.h
>

27 #i‚de‡
__exã∫_ölöe


28 
	#__MATH_INLINE
 
__ölöe


	)

30 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

34 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

37 
__MATH_INLINE
 

38 
__NTH
 (
	$__signbôf
 (
__x
))

40 #i‡
__WORDSIZE
 == 32

41 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

42  
__u
.
__i
 < 0;

44 
__m
;

45 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

46  
__m
 & 0x8;

48 
	}
}

49 
__MATH_INLINE
 

50 
__NTH
 (
	$__signbô
 (
__x
))

52 #i‡
__WORDSIZE
 == 32

53 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

54  
__u
.
__i
[1] < 0;

56 
__m
;

57 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

58  
__m
 & 0x80;

60 
	}
}

61 
__MATH_INLINE
 

62 
__NTH
 (
	$__signbôl
 (
__x
))

64 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

65  (
__u
.
__i
[2] & 0x8000) != 0;

66 
	}
}

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

21 #i‚de‡
_TERMIOS_H


25 
	tcc_t
;

26 
	t•ìd_t
;

27 
	ttcÊag_t
;

29 
	#NCCS
 32

	)

30 
	sãrmios


32 
tcÊag_t
 
	mc_iÊag
;

33 
tcÊag_t
 
	mc_oÊag
;

34 
tcÊag_t
 
	mc_cÊag
;

35 
tcÊag_t
 
	mc_lÊag
;

36 
cc_t
 
	mc_löe
;

37 
cc_t
 
	mc_cc
[
NCCS
];

38 
•ìd_t
 
	mc_i•ìd
;

39 
•ìd_t
 
	mc_o•ìd
;

40 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

41 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

45 
	#VINTR
 0

	)

46 
	#VQUIT
 1

	)

47 
	#VERASE
 2

	)

48 
	#VKILL
 3

	)

49 
	#VEOF
 4

	)

50 
	#VTIME
 5

	)

51 
	#VMIN
 6

	)

52 
	#VSWTC
 7

	)

53 
	#VSTART
 8

	)

54 
	#VSTOP
 9

	)

55 
	#VSUSP
 10

	)

56 
	#VEOL
 11

	)

57 
	#VREPRINT
 12

	)

58 
	#VDISCARD
 13

	)

59 
	#VWERASE
 14

	)

60 
	#VLNEXT
 15

	)

61 
	#VEOL2
 16

	)

64 
	#IGNBRK
 0000001

	)

65 
	#BRKINT
 0000002

	)

66 
	#IGNPAR
 0000004

	)

67 
	#PARMRK
 0000010

	)

68 
	#INPCK
 0000020

	)

69 
	#ISTRIP
 0000040

	)

70 
	#INLCR
 0000100

	)

71 
	#IGNCR
 0000200

	)

72 
	#ICRNL
 0000400

	)

73 
	#IUCLC
 0001000

	)

74 
	#IXON
 0002000

	)

75 
	#IXANY
 0004000

	)

76 
	#IXOFF
 0010000

	)

77 
	#IMAXBEL
 0020000

	)

78 
	#IUTF8
 0040000

	)

81 
	#OPOST
 0000001

	)

82 
	#OLCUC
 0000002

	)

83 
	#ONLCR
 0000004

	)

84 
	#OCRNL
 0000010

	)

85 
	#ONOCR
 0000020

	)

86 
	#ONLRET
 0000040

	)

87 
	#OFILL
 0000100

	)

88 
	#OFDEL
 0000200

	)

89 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


90 
	#NLDLY
 0000400

	)

91 
	#NL0
 0000000

	)

92 
	#NL1
 0000400

	)

93 
	#CRDLY
 0003000

	)

94 
	#CR0
 0000000

	)

95 
	#CR1
 0001000

	)

96 
	#CR2
 0002000

	)

97 
	#CR3
 0003000

	)

98 
	#TABDLY
 0014000

	)

99 
	#TAB0
 0000000

	)

100 
	#TAB1
 0004000

	)

101 
	#TAB2
 0010000

	)

102 
	#TAB3
 0014000

	)

103 
	#BSDLY
 0020000

	)

104 
	#BS0
 0000000

	)

105 
	#BS1
 0020000

	)

106 
	#FFDLY
 0100000

	)

107 
	#FF0
 0000000

	)

108 
	#FF1
 0100000

	)

111 
	#VTDLY
 0040000

	)

112 
	#VT0
 0000000

	)

113 
	#VT1
 0040000

	)

115 #ifde‡
__USE_MISC


116 
	#XTABS
 0014000

	)

120 #ifde‡
__USE_MISC


121 
	#CBAUD
 0010017

	)

123 
	#B0
 0000000

	)

124 
	#B50
 0000001

	)

125 
	#B75
 0000002

	)

126 
	#B110
 0000003

	)

127 
	#B134
 0000004

	)

128 
	#B150
 0000005

	)

129 
	#B200
 0000006

	)

130 
	#B300
 0000007

	)

131 
	#B600
 0000010

	)

132 
	#B1200
 0000011

	)

133 
	#B1800
 0000012

	)

134 
	#B2400
 0000013

	)

135 
	#B4800
 0000014

	)

136 
	#B9600
 0000015

	)

137 
	#B19200
 0000016

	)

138 
	#B38400
 0000017

	)

139 #ifde‡
__USE_MISC


140 
	#EXTA
 
B19200


	)

141 
	#EXTB
 
B38400


	)

143 
	#CSIZE
 0000060

	)

144 
	#CS5
 0000000

	)

145 
	#CS6
 0000020

	)

146 
	#CS7
 0000040

	)

147 
	#CS8
 0000060

	)

148 
	#CSTOPB
 0000100

	)

149 
	#CREAD
 0000200

	)

150 
	#PARENB
 0000400

	)

151 
	#PARODD
 0001000

	)

152 
	#HUPCL
 0002000

	)

153 
	#CLOCAL
 0004000

	)

154 #ifde‡
__USE_MISC


155 
	#CBAUDEX
 0010000

	)

157 
	#B57600
 0010001

	)

158 
	#B115200
 0010002

	)

159 
	#B230400
 0010003

	)

160 
	#B460800
 0010004

	)

161 
	#B500000
 0010005

	)

162 
	#B576000
 0010006

	)

163 
	#B921600
 0010007

	)

164 
	#B1000000
 0010010

	)

165 
	#B1152000
 0010011

	)

166 
	#B1500000
 0010012

	)

167 
	#B2000000
 0010013

	)

168 
	#B2500000
 0010014

	)

169 
	#B3000000
 0010015

	)

170 
	#B3500000
 0010016

	)

171 
	#B4000000
 0010017

	)

172 
	#__MAX_BAUD
 
B4000000


	)

173 #ifde‡
__USE_MISC


174 
	#CIBAUD
 002003600000

	)

175 
	#CMSPAR
 010000000000

	)

176 
	#CRTSCTS
 020000000000

	)

180 
	#ISIG
 0000001

	)

181 
	#ICANON
 0000002

	)

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


183 
	#XCASE
 0000004

	)

185 
	#ECHO
 0000010

	)

186 
	#ECHOE
 0000020

	)

187 
	#ECHOK
 0000040

	)

188 
	#ECHONL
 0000100

	)

189 
	#NOFLSH
 0000200

	)

190 
	#TOSTOP
 0000400

	)

191 #ifde‡
__USE_MISC


192 
	#ECHOCTL
 0001000

	)

193 
	#ECHOPRT
 0002000

	)

194 
	#ECHOKE
 0004000

	)

195 
	#FLUSHO
 0010000

	)

196 
	#PENDIN
 0040000

	)

198 
	#IEXTEN
 0100000

	)

201 
	#TCOOFF
 0

	)

202 
	#TCOON
 1

	)

203 
	#TCIOFF
 2

	)

204 
	#TCION
 3

	)

207 
	#TCIFLUSH
 0

	)

208 
	#TCOFLUSH
 1

	)

209 
	#TCIOFLUSH
 2

	)

212 
	#TCSANOW
 0

	)

213 
	#TCSADRAIN
 1

	)

214 
	#TCSAFLUSH
 2

	)

217 
	#_IOT_ãrmios
 \

218 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/curses.h

37 #i‚de‡
__NCURSES_H


38 
	#__NCURSES_H


	)

40 
	#CURSES
 1

	)

41 
	#CURSES_H
 1

	)

44 
	#NCURSES_VERSION_MAJOR
 5

	)

45 
	#NCURSES_VERSION_MINOR
 7

	)

46 
	#NCURSES_VERSION_PATCH
 20090803

	)

49 #unde‡
NCURSES_VERSION


50 
	#NCURSES_VERSION
 "5.7"

	)

55 
	#NCURSES_MOUSE_VERSION
 1

	)

60 
	~<ncur£s_dŒ.h
>

65 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


66 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

73 #ifde‡
NCURSES_NOMACROS


74 #i‚de‡
NCURSES_ATTR_T


75 
	#NCURSES_ATTR_T
 
©å_t


	)

79 #i‚de‡
NCURSES_ATTR_T


80 
	#NCURSES_ATTR_T
 

	)

87 #unde‡
NCURSES_CONST


88 
	#NCURSES_CONST
 c⁄°

	)

90 #unde‡
NCURSES_INLINE


91 
	#NCURSES_INLINE
 
ölöe


	)

96 #unde‡
NCURSES_COLOR_T


97 
	#NCURSES_COLOR_T
 

	)

102 #i‚de‡
NCURSES_OPAQUE


103 
	#NCURSES_OPAQUE
 0

	)

109 #i‚de‡
NCURSES_REENTRANT


110 
	#NCURSES_REENTRANT
 0

	)

116 #unde‡
NCURSES_SIZE_T


117 
	#NCURSES_SIZE_T
 

	)

122 #unde‡
NCURSES_TPARM_VARARGS


123 
	#NCURSES_TPARM_VARARGS
 1

	)

130 #unde‡
NCURSES_CH_T


131 
	#NCURSES_CH_T
 
chty≥


	)

133 #i‡0 && 
deföed
(
_LP64
)

134 
	tchty≥
;

135 
	tmmask_t
;

137 
	tchty≥
;

138 
	tmmask_t
;

141 
	~<°dio.h
>

142 
	~<°d¨g.h
>

143 #ifde‡
_XOPEN_SOURCE_EXTENDED


144 
	~<°ddef.h
>

159 #unde‡
TRUE


160 
	#TRUE
 1

	)

162 #unde‡
FALSE


163 
	#FALSE
 0

	)

165 
	tNCURSES_BOOL
;

167 #i‡
deföed
(
__˝lu•lus
)

170 
	#NCURSES_BOOL
 
boﬁ


	)

174 #i‡
NCURSES_ENABLE_STDBOOL_H


175 
	~<°dboﬁ.h
>

177 
	#NCURSES_BOOL
 
boﬁ


	)

180 #unde‡
boﬁ


181 
	#boﬁ
 
NCURSES_BOOL


	)

186 #ifde‡
__˝lu•lus


188 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

190 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

197 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

198 
	#WA_NORMAL
 
A_NORMAL


	)

199 
	#WA_STANDOUT
 
A_STANDOUT


	)

200 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

201 
	#WA_REVERSE
 
A_REVERSE


	)

202 
	#WA_BLINK
 
A_BLINK


	)

203 
	#WA_DIM
 
A_DIM


	)

204 
	#WA_BOLD
 
A_BOLD


	)

205 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

206 
	#WA_INVIS
 
A_INVIS


	)

207 
	#WA_PROTECT
 
A_PROTECT


	)

208 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

209 
	#WA_LEFT
 
A_LEFT


	)

210 
	#WA_LOW
 
A_LOW


	)

211 
	#WA_RIGHT
 
A_RIGHT


	)

212 
	#WA_TOP
 
A_TOP


	)

213 
	#WA_VERTICAL
 
A_VERTICAL


	)

216 
	#COLOR_BLACK
 0

	)

217 
	#COLOR_RED
 1

	)

218 
	#COLOR_GREEN
 2

	)

219 
	#COLOR_YELLOW
 3

	)

220 
	#COLOR_BLUE
 4

	)

221 
	#COLOR_MAGENTA
 5

	)

222 
	#COLOR_CYAN
 6

	)

223 
	#COLOR_WHITE
 7

	)

227 #i‡0 || 
NCURSES_REENTRANT


228 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

229 
	#acs_m≠
 
	`NCURSES_PUBLIC_VAR
(
	`acs_m≠
())

	)

231 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

234 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,c)])

	)

237 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

238 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

239 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

240 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

241 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

242 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

243 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

244 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

245 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

246 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

247 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

248 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

249 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

250 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

251 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

252 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

253 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

254 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

256 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

257 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

258 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

259 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

260 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

261 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

262 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

268 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

269 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

270 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

271 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

272 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

273 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

274 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

282 
	#ACS_BSSB
 
ACS_ULCORNER


	)

283 
	#ACS_SSBB
 
ACS_LLCORNER


	)

284 
	#ACS_BBSS
 
ACS_URCORNER


	)

285 
	#ACS_SBBS
 
ACS_LRCORNER


	)

286 
	#ACS_SBSS
 
ACS_RTEE


	)

287 
	#ACS_SSSB
 
ACS_LTEE


	)

288 
	#ACS_SSBS
 
ACS_BTEE


	)

289 
	#ACS_BSSS
 
ACS_TTEE


	)

290 
	#ACS_BSBS
 
ACS_HLINE


	)

291 
	#ACS_SBSB
 
ACS_VLINE


	)

292 
	#ACS_SSSS
 
ACS_PLUS


	)

294 #unde‡
ERR


295 
	#ERR
 (-1)

	)

297 #unde‡
OK


298 
	#OK
 (0)

	)

301 
	#_SUBWIN
 0x01

	)

302 
	#_ENDLINE
 0x02

	)

303 
	#_FULLWIN
 0x04

	)

304 
	#_SCROLLWIN
 0x08

	)

305 
	#_ISPAD
 0x10

	)

306 
	#_HASMOVED
 0x20

	)

307 
	#_WRAPPED
 0x40

	)

313 
	#_NOCHANGE
 -1

	)

319 
	#_NEWINDEX
 -1

	)

321 
s¸ìn
 
	tSCREEN
;

322 
_wö_°
 
	tWINDOW
;

324 
chty≥
 
	t©å_t
;

326 #ifde‡
_XOPEN_SOURCE_EXTENDED


329 #ifde‡
mbÀn


330 #unde‡
mbÀn


332 
	~<libutf8.h
>

336 
	~<wch¨.h
>

340 
	twch¨_t
;

344 
	twöt_t
;

353 
	#CCHARW_MAX
 5

	)

356 
©å_t
 
	g©å
;

357 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

359 #unde‡
NCURSES_EXT_COLORS


360 
	#NCURSES_EXT_COLORS
 20090803

	)

361 
	gext_cﬁ‹
;

364 
	tcch¨_t
;

368 #i‡!
NCURSES_OPAQUE


369 
	gld©
;

371 
	s_wö_°


373 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

376 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

377 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

379 
	g_Êags
;

382 
©å_t
 
	g_©ås
;

383 
chty≥
 
	g_bkgd
;

386 
boﬁ
 
	g_nŸimeout
;

387 
boﬁ
 
	g_˛ór
;

388 
boﬁ
 
	g_Àaveok
;

389 
boﬁ
 
	g_s¸ﬁl
;

390 
boﬁ
 
	g_idlok
;

391 
boﬁ
 
	g_idcok
;

392 
boﬁ
 
	g_immed
;

393 
boﬁ
 
	g_sync
;

394 
boﬁ
 
	g_u£_key∑d
;

395 
	g_dñay
;

397 
ld©
 *
	g_löe
;

400 
NCURSES_SIZE_T
 
	g_ªgt›
;

401 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

404 
	g_∑rx
;

405 
	g_∑ry
;

406 
WINDOW
 *
	g_∑ª¡
;

409 
	spd©


411 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

412 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

413 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

414 } 
	g_∑d
;

416 
NCURSES_SIZE_T
 
	g_yoff£t
;

418 #ifde‡
_XOPEN_SOURCE_EXTENDED


419 
cch¨_t
 
	g_bkg∫d
;

421 
	g_cﬁ‹
;

431 #ifde‡
NCURSES_WGETCH_EVENTS


432 #i‡!
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

434 
	#NCURSES_EVENT_VERSION
 1

	)

440 
	#_NC_EVENT_TIMEOUT_MSEC
 1

	)

441 
	#_NC_EVENT_FILE
 2

	)

442 
	#_NC_EVENT_FILE_READABLE
 2

	)

444 
	#_NC_EVENT_FILE_WRITABLE
 4

	)

445 
	#_NC_EVENT_FILE_EXCEPTION
 8

	)

450 
	gty≥
;

453 
	gtimeout_m£c
;

456 
	gÊags
;

457 
	gfd
;

458 
	gªsu…
;

459 } 
	g„v
;

460 } 
	gd©a
;

461 } 
	t_nc_evít
;

465 
	gcou¡
;

466 
	gªsu…_Êags
;

467 
_nc_evít
 *
	gevíts
[1];

468 } 
	t_nc_evíéi°
;

470 
NCURSES_EXPORT
(Ë
wgëch_evíts
(
WINDOW
 *, 
_nc_evíéi°
 *);

471 
NCURSES_EXPORT
(Ë
wgën°r_evíts
(
WINDOW
 *,*,,
_nc_evíéi°
 *);

483 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

484 
	#__©åibuã__
(
p
Ë

	)

495 #i‚de‡
GCC_PRINTFLIKE


496 #i‡
deföed
(
GCC_PRINTF
Ë&& !deföed(
¥ötf
)

497 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

499 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

503 #i‚de‡
GCC_SCANFLIKE


504 #i‡
deföed
(
GCC_SCANF
Ë&& !deföed(
sˇnf
)

505 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

507 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

511 #i‚def 
GCC_NORETURN


512 
	#GCC_NORETURN


	)

515 #i‚def 
GCC_UNUSED


516 
	#GCC_UNUSED


	)

523 (*
	gNCURSES_OUTC
)();

532 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

533 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

534 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

535 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

536 
NCURSES_EXPORT
(Ë
add°r
 (const *);

537 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

538 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

539 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

540 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, *, *);

541 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

542 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

543 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, , *);

544 
NCURSES_EXPORT
(Ë
baudøã
 ();

545 
NCURSES_EXPORT
(Ë
bìp
 ();

546 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

547 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

548 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

549 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

550 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

551 
NCURSES_EXPORT
(Ë
cbªak
 ();

552 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, , const *);

553 
NCURSES_EXPORT
(Ë
˛ór
 ();

554 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

555 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

556 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

557 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (,*,*,*);

558 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (,*);

559 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

560 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

561 
NCURSES_EXPORT
(Ë
curs_£t
 ();

562 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

563 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

564 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

565 
NCURSES_EXPORT
(Ë
dñch
 ();

566 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

567 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

568 
NCURSES_EXPORT
(Ë
dñëñn
 ();

569 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

570 
NCURSES_EXPORT
(Ë
doupd©e
 ();

571 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

572 
NCURSES_EXPORT
(Ë
echo
 ();

573 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

574 
NCURSES_EXPORT
(Ë
îa£
 ();

575 
NCURSES_EXPORT
(Ë
ídwö
 ();

576 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

577 
NCURSES_EXPORT
(Ë
fûãr
 ();

578 
NCURSES_EXPORT
(Ë
Êash
 ();

579 
NCURSES_EXPORT
(Ë
Êushöp
 ();

580 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

581 
NCURSES_EXPORT
(Ë
gëch
 ();

582 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

583 
NCURSES_EXPORT
(Ë
gë°r
 (*);

584 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

585 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

586 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

587 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

588 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

589 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

590 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

591 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

592 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

593 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

594 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

595 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

596 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

597 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (,,,);

598 
NCURSES_EXPORT
(Ë
öô_∑ú
 (,,);

599 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

600 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

601 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

602 
NCURSES_EXPORT
(Ë
ö£π 
 ();

603 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

604 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

605 
NCURSES_EXPORT
(Ë
ö°r
 (*);

606 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

607 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

608 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

609 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

610 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

611 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

612 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

613 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

614 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

615 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

616 
NCURSES_EXPORT
(Ë
move
 (, );

617 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

618 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

619 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

620 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

621 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

622 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, , const *);

623 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

624 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

625 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

626 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

627 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

628 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

629 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

630 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

631 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

632 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

633 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

634 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

635 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

636 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

637 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

638 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

639 
GCC_PRINTFLIKE
(3,4);

640 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, 
NCURSES_CONST
 *,...)

641 
GCC_SCANFLIKE
(3,4);

642 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

643 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

644 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

645 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

646 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

647 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

648 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, , const *);

649 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

650 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

651 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

652 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

653 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

654 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

655 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

656 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

657 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

658 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

659 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

660 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

661 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

662 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

663 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

664 
GCC_PRINTFLIKE
(4,5);

665 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, 
NCURSES_CONST
 *,...)

666 
GCC_SCANFLIKE
(4,5);

667 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

668 
NCURSES_EXPORT
(Ë
«pms
 ();

669 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

670 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (
NCURSES_CONST
 *,
FILE
 *,FILE *);

671 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

672 
NCURSES_EXPORT
(Ë
∆
 ();

673 
NCURSES_EXPORT
(Ë
nocbªak
 ();

674 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

675 
NCURSES_EXPORT
(Ë
n€cho
 ();

676 
NCURSES_EXPORT
(Ë
n⁄l
 ();

677 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

678 
NCURSES_EXPORT
(Ë
n‹aw
 ();

679 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

680 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

681 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

682 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (,*,*);

683 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

684 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

685 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

686 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

687 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

688 
GCC_PRINTFLIKE
(1,2);

689 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

690 
NCURSES_EXPORT
(Ë
qiÊush
 ();

691 
NCURSES_EXPORT
(Ë
øw
 ();

692 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

693 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

694 
NCURSES_EXPORT
(Ë
ª£ây
 ();

695 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

696 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

697 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

698 
NCURSES_EXPORT
(Ë
ßvëty
 ();

699 
NCURSES_EXPORT
(Ë
sˇnw
 (
NCURSES_CONST
 *,...)

700 
GCC_SCANFLIKE
(1,2);

701 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

702 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

703 
NCURSES_EXPORT
(Ë
s¸l
 ();

704 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

705 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

706 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

707 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

708 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

709 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

710 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

711 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

712 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

713 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

714 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

715 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

716 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,,*);

717 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

718 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 ();

719 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

720 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

721 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

722 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

723 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

724 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

725 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

726 
NCURSES_EXPORT
(Ë
°™dout
 ();

727 
NCURSES_EXPORT
(Ë
°™díd
 ();

728 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

729 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

730 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

731 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

732 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

733 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

734 
NCURSES_EXPORT
(Ë
timeout
 ();

735 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

736 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

737 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

738 
NCURSES_EXPORT
(Ë
ungëch
 ();

739 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

740 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

741 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

742 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, 
NCURSES_OUTC
);

743 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

744 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

745 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

746 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

747 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

748 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

749 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

750 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

751 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

752 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

753 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

754 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

755 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

756 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, *, *);

757 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

758 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

759 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, , *);

760 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

761 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

762 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

763 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, , const *);

764 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

765 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

766 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

767 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,,*);

768 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

769 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

770 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

771 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

772 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

773 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

774 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

775 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

776 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

777 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

778 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

779 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

780 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

781 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

782 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

783 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

784 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

785 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

786 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

787 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

788 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

789 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

790 
GCC_PRINTFLIKE
(2,3);

791 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

792 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

793 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,...)

794 
GCC_SCANFLIKE
(2,3);

795 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

796 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

797 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

798 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

799 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

800 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

801 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

802 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

803 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

808 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

809 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

810 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

811 
NCURSES_EXPORT
(Ë
puç
 (const *);

813 #i‡
NCURSES_TPARM_VARARGS


814 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

816 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ,,,,,,,,);

817 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

823 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

824 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

825 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

826 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

827 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

828 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

829 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

830 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

831 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

836 #i‚de‡
_XOPEN_SOURCE_EXTENDED


837 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

844 #unde‡
NCURSES_EXT_FUNCS


845 
	#NCURSES_EXT_FUNCS
 20090803

	)

846 (*
	gNCURSES_WINDOW_CB
)(
	tWINDOW
 *, *);

847 (*
	gNCURSES_SCREEN_CB
)(
	tSCREEN
 *, *);

848 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

849 
NCURSES_EXPORT
(*Ë
keybound
 (, );

850 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

851 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

852 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

853 
NCURSES_EXPORT
(Ë
gë_escdñay
 ();

854 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

855 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

856 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

857 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

858 
NCURSES_EXPORT
(Ë
£t_escdñay
 ();

859 
NCURSES_EXPORT
(Ë
£t_èbsize
 ();

860 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

861 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

862 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

863 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_SCREEN_CB
, *);

864 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_WINDOW_CB
, *);

865 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

866 
NCURSES_EXPORT
(Ë
nofûãr
();

872 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

873 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

874 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

875 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

876 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

877 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

878 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

879 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

880 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

881 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

882 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

883 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

886 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

894 #unde‡
NCURSES_SP_FUNCS


895 
	#NCURSES_SP_FUNCS
 20090803

	)

896 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

899 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

900 (*
	gNCURSES_SP_OUTC
)(
	tSCREEN
*, );

902 
NCURSES_EXPORT
(
SCREEN
*Ë
√w_¥es¸
();

904 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
baudøã
Ë(
SCREEN
*);

905 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
bìp
Ë(
SCREEN
*);

906 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
ˇn_ch™ge_cﬁ‹
Ë(
SCREEN
*);

907 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cbªak
Ë(
SCREEN
*);

908 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
curs_£t
Ë(
SCREEN
*, );

909 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, , *, *, *);

910 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_¥og_mode
Ë(
SCREEN
*);

911 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_shñl_mode
Ë(
SCREEN
*);

912 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñay_ouçut
Ë(
SCREEN
*, );

913 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
doupd©e
Ë(
SCREEN
*);

914 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
echo
Ë(
SCREEN
*);

915 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ídwö
Ë(
SCREEN
*);

916 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£ch¨
Ë(
SCREEN
*);

917 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
fûãr
Ë(
SCREEN
*);

918 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êash
Ë(
SCREEN
*);

919 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êushöp
Ë(
SCREEN
*);

920 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
gëwö
Ë(
SCREEN
*, 
FILE
 *);

921 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
hÆfdñay
)(
SCREEN
*, );

922 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_cﬁ‹s
Ë(
SCREEN
*);

923 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_ic
Ë(
SCREEN
*);

924 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_û
Ë(
SCREEN
*);

925 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_cﬁ‹
Ë(
SCREEN
*, , , , );

926 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_∑ú
Ë(
SCREEN
*, , , );

927 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öåÊush
Ë(
SCREEN
*, 
WINDOW
*, 
boﬁ
);

928 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
i£ndwö
Ë(
SCREEN
*);

929 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
key«me
Ë(
SCREEN
*, );

930 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlch¨
Ë(
SCREEN
*);

931 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
l⁄g«me
Ë(
SCREEN
*);

932 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mvcur
Ë(
SCREEN
*, , , , );

933 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
«pms
Ë(
SCREEN
*, );

934 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√w∑d
Ë(
SCREEN
*, , );

935 
NCURSES_EXPORT
(
SCREEN
*Ë
NCURSES_SP_NAME
(
√wãrm
Ë(SCREEN*, 
NCURSES_CONST
 *, 
FILE
 *, FILE *);

936 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√wwö
Ë(
SCREEN
*, , , , );

937 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∆
Ë(
SCREEN
*);

938 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nocbªak
Ë(
SCREEN
*);

939 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n€cho
Ë(
SCREEN
*);

940 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n⁄l
Ë(
SCREEN
*);

941 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
noqiÊush
Ë(
SCREEN
*);

942 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n‹aw
Ë(
SCREEN
*);

943 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∑ú_c⁄ã¡
Ë(
SCREEN
*, , *, *);

944 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
qiÊush
Ë(
SCREEN
*);

945 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
øw
Ë(
SCREEN
*);

946 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_¥og_mode
Ë(
SCREEN
*);

947 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_shñl_mode
Ë(
SCREEN
*);

948 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£ây
Ë(
SCREEN
*);

949 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
rùofÊöe
Ë(
SCREEN
*, , (*)(
WINDOW
 *, ));

950 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ßvëty
Ë(
SCREEN
*);

951 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_öô
Ë(
SCREEN
*, const *);

952 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_ª°‹e
Ë(
SCREEN
*, const *);

953 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_£t
Ë(
SCREEN
*, const *);

954 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©åoff
Ë(
SCREEN
*, c⁄° 
chty≥
);

955 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å⁄
Ë(
SCREEN
*, c⁄° 
chty≥
);

956 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å£t
Ë(
SCREEN
*, c⁄° 
chty≥
);

957 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
¶k_©å
Ë(
SCREEN
*);

958 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å_£t
Ë(
SCREEN
*, c⁄° 
©å_t
, , *);

959 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_˛ór
Ë(
SCREEN
*);

960 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_cﬁ‹
Ë(
SCREEN
*, );

961 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_öô
Ë(
SCREEN
*, );

962 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
¶k_œbñ
Ë(
SCREEN
*, );

963 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_nouåe‰esh
Ë(
SCREEN
*);

964 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª‰esh
Ë(
SCREEN
*);

965 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª°‹e
Ë(
SCREEN
*);

966 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_£t
Ë(
SCREEN
*, , const *, );

967 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_touch
Ë(
SCREEN
*);

968 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
°¨t_cﬁ‹
Ë(
SCREEN
*);

969 
NCURSES_EXPORT
(
chty≥
Ë
NCURSES_SP_NAME
(
ãrm©ås
Ë(
SCREEN
*);

970 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ãrm«me
Ë(
SCREEN
*);

971 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ty≥ahód
Ë(
SCREEN
*, );

972 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëch
Ë(
SCREEN
*, );

973 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_ív
Ë(
SCREEN
*, 
boﬁ
);

974 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid©å
Ë(
SCREEN
*, 
chty≥
);

975 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vidputs
Ë(
SCREEN
*, 
chty≥
, 
NCURSES_SP_OUTC
);

977 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
keybound
Ë(
SCREEN
*, , );

978 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
assume_deÁu…_cﬁ‹s
Ë(
SCREEN
*, , );

979 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
deföe_key
Ë(
SCREEN
*, const *, );

980 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gë_escdñay
Ë(
SCREEN
*);

981 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
is_ãrm_ªsized
Ë(
SCREEN
*, , );

982 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
key_deföed
)(
SCREEN
*, const *);

983 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
keyok
Ë(
SCREEN
*, , 
boﬁ
);

984 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nofûãr
Ë(
SCREEN
*);

985 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsize_ãrm
Ë(
SCREEN
*, , );

986 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsizëîm
Ë(
SCREEN
*, , );

987 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_escdñay
Ë(
SCREEN
*, );

988 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_èbsize
Ë(
SCREEN
*, );

989 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_deÁu…_cﬁ‹s
Ë(
SCREEN
*);

990 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_Àgacy_codög
Ë(
SCREEN
*, );

993 #unde‡
NCURSES_SP_FUNCS


994 
	#NCURSES_SP_FUNCS
 0

	)

995 
	#NCURSES_SP_NAME
(
«me
Ë
	)
name

996 
	#NCURSES_SP_OUTC
 
NCURSES_OUTC


	)

1001 
	#NCURSES_ATTR_SHIFT
 8

	)

1002 
	#NCURSES_BITS
(
mask
,
shi·
Ë((maskË<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

1004 
	#A_NORMAL
 (1UL - 1UL)

	)

1005 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1UL - 1UL),0)

	)

1006 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1UL,0Ë- 1UL)

	)

1007 
	#A_COLOR
 
	`NCURSES_BITS
(((1ULË<< 8Ë- 1UL,0)

	)

1008 
	#A_STANDOUT
 
	`NCURSES_BITS
(1UL,8)

	)

1009 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1UL,9)

	)

1010 
	#A_REVERSE
 
	`NCURSES_BITS
(1UL,10)

	)

1011 
	#A_BLINK
 
	`NCURSES_BITS
(1UL,11)

	)

1012 
	#A_DIM
 
	`NCURSES_BITS
(1UL,12)

	)

1013 
	#A_BOLD
 
	`NCURSES_BITS
(1UL,13)

	)

1014 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1UL,14)

	)

1015 
	#A_INVIS
 
	`NCURSES_BITS
(1UL,15)

	)

1016 
	#A_PROTECT
 
	`NCURSES_BITS
(1UL,16)

	)

1017 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1UL,17)

	)

1018 
	#A_LEFT
 
	`NCURSES_BITS
(1UL,18)

	)

1019 
	#A_LOW
 
	`NCURSES_BITS
(1UL,19)

	)

1020 
	#A_RIGHT
 
	`NCURSES_BITS
(1UL,20)

	)

1021 
	#A_TOP
 
	`NCURSES_BITS
(1UL,21)

	)

1022 
	#A_VERTICAL
 
	`NCURSES_BITS
(1UL,22)

	)

1034 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

1035 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

1036 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

1037 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

1039 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1040 i‡(
	`is_Àaveok
(
√ws¸
)) \

1041 (
y
Ë(
x
) = -1; \

1043 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

1045 } 0)

	)

1047 
	#£tsyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1048 i‡((
y
Ë=-1 && (
x
) == -1) \

1049 
	`Àaveok
(
√ws¸
, 
TRUE
); \

1051 
	`Àaveok
(
√ws¸
, 
FALSE
); \

1052 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

1055 } 0)

	)

1057 #i‚de‡
NCURSES_NOMACROS


1063 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

1064 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s,Ç)

	)

1066 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

1068 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

1069 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

1070 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

1071 
	#¸mode
(Ë
	`cbªak
()

	)

1072 
	#no¸mode
(Ë
	`nocbªak
()

	)

1073 
	#gëtmode
()

	)

1076 #i‡!
NCURSES_OPAQUE


1077 
	#gë©ås
(
wö
Ë((wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

1078 
	#gëcurx
(
wö
Ë((wöË? (wö)->
_curx
 : 
ERR
)

	)

1079 
	#gëcury
(
wö
Ë((wöË? (wö)->
_cury
 : 
ERR
)

	)

1080 
	#gëbegx
(
wö
Ë((wöË? (wö)->
_begx
 : 
ERR
)

	)

1081 
	#gëbegy
(
wö
Ë((wöË? (wö)->
_begy
 : 
ERR
)

	)

1082 
	#gëmaxx
(
wö
Ë((wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

1083 
	#gëmaxy
(
wö
Ë((wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

1084 
	#gë∑rx
(
wö
Ë((wöË? (wö)->
_∑rx
 : 
ERR
)

	)

1085 
	#gë∑ry
(
wö
Ë((wöË? (wö)->
_∑ry
 : 
ERR
)

	)

1088 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

1089 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

1091 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1092 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1094 #i‡!
NCURSES_OPAQUE


1095 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
) && 0

1096 
	#w©å£t
(
wö
,
©
Ë((wö)->
_cﬁ‹
 = 
	`PAIR_NUMBER
(at), \

1097 
	`NCURSES_CAST
(, (
wö
)->
_©ås
 = (
©
)))

	)

1099 
	#w©å£t
(
wö
,
©
Ë
	`NCURSES_CAST
(, (wö)->
_©ås
 = (©))

	)

1103 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

1105 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

1106 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

1107 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

1109 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

1110 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

1111 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch,Ç)

	)

1112 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch,Ç)

	)

1114 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

1115 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

1116 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

1118 #i‡!
NCURSES_OPAQUE


1119 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, (wö)->
_maxy
+1)

	)

1122 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

1123 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

1128 
	#COLOR_PAIR
(
n
Ë
	`NCURSES_BITS
“, 0)

	)

1129 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((◊Ë& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1135 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,ch)

	)

1136 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,°r,n)

	)

1137 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,°r)

	)

1138 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,°r,n)

	)

1139 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,°r,-1)

	)

1140 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,©)

	)

1141 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,©)

	)

1142 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,©)

	)

1143 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,≠,˝,o)

	)

1144 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,a,o)

	)

1145 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,a,o)

	)

1146 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,a,c,o)

	)

1147 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,ch)

	)

1148 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,ch)

	)

1149 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,n,a,c,o)

	)

1150 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1151 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1152 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1153 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,c,o)

	)

1154 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1155 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1156 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,c)

	)

1157 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1158 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1159 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,°r)

	)

1160 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1161 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,s,n)

	)

1162 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,s)

	)

1163 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,s,n)

	)

1164 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,c)

	)

1165 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,n)

	)

1166 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1167 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,s,n)

	)

1168 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,s)

	)

1169 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,s)

	)

1170 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,y,x)

	)

1171 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1172 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,n)

	)

1173 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,t,b)

	)

1174 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1175 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1176 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,dñay)

	)

1177 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1178 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1184 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddch
(wö,ch))

	)

1185 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddchn°r
(wö,°r,n))

	)

1186 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddchn°r
(wö,°r,-1))

	)

1187 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddn°r
(wö,°r,n))

	)

1188 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`waddn°r
(wö,°r,-1))

	)

1189 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1190 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wchg©
(wö,n,a,c,o))

	)

1191 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1192 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgën°r
(wö,°r,n))

	)

1193 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wgë°r
(wö,°r))

	)

1194 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`whlöe
(wö,c,n))

	)

1195 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
(wö,y,xË=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1196 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wöchn°r
(wö,s,n))

	)

1197 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wöch°r
(wö,s))

	)

1198 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wön°r
(wö,s,n))

	)

1199 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wösch
(wö,c))

	)

1200 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wö¢°r
(wö,s,n))

	)

1201 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wös°r
(wö,s))

	)

1202 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wö°r
(wö,s))

	)

1203 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
(wö,y,xË=
ERR
 ? ERR : 
	`wvlöe
(wö,c,n))

	)

1205 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,y,x,ch)

	)

1206 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,y,x,°r,n)

	)

1207 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,y,x,°r)

	)

1208 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,y,x,°r,n)

	)

1209 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,y,x,°r)

	)

1210 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,y,x,n,a,c,o)

	)

1211 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,y,x)

	)

1212 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,y,x)

	)

1213 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,y,x,°r,n)

	)

1214 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,y,x,°r)

	)

1215 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,y,x,c,n)

	)

1216 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,y,x)

	)

1217 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,y,x,s,n)

	)

1218 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,y,x,s)

	)

1219 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,y,x,s,n)

	)

1220 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,y,x,c)

	)

1221 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,y,x,s,n)

	)

1222 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,y,x,s)

	)

1223 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,y,x,s)

	)

1224 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,y,x,c,n)

	)

1229 #i‡!
NCURSES_OPAQUE


1230 
	#gëbkgd
(
wö
Ë((wö)->
_bkgd
)

	)

1233 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1234 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1236 #i‡!
NCURSES_OPAQUE


1237 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
) && 0

1238 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
Ë((wö)->
_©ås
 = (◊Ë& ~
A_COLOR
), \

1239 (
wö
)->
_cﬁ‹
 = (
p
), \

1240 
OK
)

	)

1241 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()(◊Ë!(*)0 && (*◊Ë(wö)->
_©ås
)), \

1242 ()((
p
Ë!(*)0 && (*’Ë(
wö
)->
_cﬁ‹
)), \

1243 
OK
)

	)

1245 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
Ë((wö)->
_©ås
 = ((◊Ë& ~
A_COLOR
Ë| 
	`COLOR_PAIR
’)), 
OK
)

	)

1246 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()(◊Ë!(*)0 && (*◊Ë(wö)->
_©ås
)), \

1247 ()((
p
Ë!(*)0 && (*’Ë
	`PAIR_NUMBER
((
wö
)->
_©ås
))), \

1248 
OK
)

	)

1258 
	#vw_¥ötw
 
vw¥ötw


	)

1259 
	#vw_sˇnw
 
vwsˇnw


	)

1265 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1266 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1273 #i‡!
NCURSES_OPAQUE


1274 
	#is_˛óªd
(
wö
Ë((wö)->
_˛ór
)

	)

1275 
	#is_idcok
(
wö
Ë((wö)->
_idcok
)

	)

1276 
	#is_idlok
(
wö
Ë((wö)->
_idlok
)

	)

1277 
	#is_immedok
(
wö
Ë((wö)->
_immed
)

	)

1278 
	#is_key∑d
(
wö
Ë((wö)->
_u£_key∑d
)

	)

1279 
	#is_Àaveok
(
wö
Ë((wö)->
_Àaveok
)

	)

1280 
	#is_nodñay
(
wö
Ë((wö)->
_dñay
 =0)

	)

1281 
	#is_nŸimeout
(
wö
Ë((wö)->
_nŸimeout
)

	)

1282 
	#is_s¸ﬁlok
(
wö
Ë((wö)->
_s¸ﬁl
)

	)

1283 
	#is_syncok
(
wö
Ë((wö)->
_sync
)

	)

1284 
	#wgë∑ª¡
(
wö
Ë((wöË? (wö)->
_∑ª¡
 : 0)

	)

1285 
	#wgës¸ªg
(
wö
,
t
,
b
Ë((wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1299 #i‡
NCURSES_REENTRANT


1301 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1302 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1303 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1304 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1305 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1306 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1307 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1308 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1309 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1310 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1312 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1313 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1314 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1315 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1316 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1317 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1318 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1319 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1320 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1321 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1325 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1326 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1327 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1328 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1329 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1330 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1331 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1332 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1333 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1334 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1350 
	#KEY_CODE_YES
 0400

	)

1351 
	#KEY_MIN
 0401

	)

1352 
	#KEY_BREAK
 0401

	)

1353 
	#KEY_SRESET
 0530

	)

1354 
	#KEY_RESET
 0531

	)

1358 
	#KEY_DOWN
 0402

	)

1359 
	#KEY_UP
 0403

	)

1360 
	#KEY_LEFT
 0404

	)

1361 
	#KEY_RIGHT
 0405

	)

1362 
	#KEY_HOME
 0406

	)

1363 
	#KEY_BACKSPACE
 0407

	)

1364 
	#KEY_F0
 0410

	)

1365 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1366 
	#KEY_DL
 0510

	)

1367 
	#KEY_IL
 0511

	)

1368 
	#KEY_DC
 0512

	)

1369 
	#KEY_IC
 0513

	)

1370 
	#KEY_EIC
 0514

	)

1371 
	#KEY_CLEAR
 0515

	)

1372 
	#KEY_EOS
 0516

	)

1373 
	#KEY_EOL
 0517

	)

1374 
	#KEY_SF
 0520

	)

1375 
	#KEY_SR
 0521

	)

1376 
	#KEY_NPAGE
 0522

	)

1377 
	#KEY_PPAGE
 0523

	)

1378 
	#KEY_STAB
 0524

	)

1379 
	#KEY_CTAB
 0525

	)

1380 
	#KEY_CATAB
 0526

	)

1381 
	#KEY_ENTER
 0527

	)

1382 
	#KEY_PRINT
 0532

	)

1383 
	#KEY_LL
 0533

	)

1384 
	#KEY_A1
 0534

	)

1385 
	#KEY_A3
 0535

	)

1386 
	#KEY_B2
 0536

	)

1387 
	#KEY_C1
 0537

	)

1388 
	#KEY_C3
 0540

	)

1389 
	#KEY_BTAB
 0541

	)

1390 
	#KEY_BEG
 0542

	)

1391 
	#KEY_CANCEL
 0543

	)

1392 
	#KEY_CLOSE
 0544

	)

1393 
	#KEY_COMMAND
 0545

	)

1394 
	#KEY_COPY
 0546

	)

1395 
	#KEY_CREATE
 0547

	)

1396 
	#KEY_END
 0550

	)

1397 
	#KEY_EXIT
 0551

	)

1398 
	#KEY_FIND
 0552

	)

1399 
	#KEY_HELP
 0553

	)

1400 
	#KEY_MARK
 0554

	)

1401 
	#KEY_MESSAGE
 0555

	)

1402 
	#KEY_MOVE
 0556

	)

1403 
	#KEY_NEXT
 0557

	)

1404 
	#KEY_OPEN
 0560

	)

1405 
	#KEY_OPTIONS
 0561

	)

1406 
	#KEY_PREVIOUS
 0562

	)

1407 
	#KEY_REDO
 0563

	)

1408 
	#KEY_REFERENCE
 0564

	)

1409 
	#KEY_REFRESH
 0565

	)

1410 
	#KEY_REPLACE
 0566

	)

1411 
	#KEY_RESTART
 0567

	)

1412 
	#KEY_RESUME
 0570

	)

1413 
	#KEY_SAVE
 0571

	)

1414 
	#KEY_SBEG
 0572

	)

1415 
	#KEY_SCANCEL
 0573

	)

1416 
	#KEY_SCOMMAND
 0574

	)

1417 
	#KEY_SCOPY
 0575

	)

1418 
	#KEY_SCREATE
 0576

	)

1419 
	#KEY_SDC
 0577

	)

1420 
	#KEY_SDL
 0600

	)

1421 
	#KEY_SELECT
 0601

	)

1422 
	#KEY_SEND
 0602

	)

1423 
	#KEY_SEOL
 0603

	)

1424 
	#KEY_SEXIT
 0604

	)

1425 
	#KEY_SFIND
 0605

	)

1426 
	#KEY_SHELP
 0606

	)

1427 
	#KEY_SHOME
 0607

	)

1428 
	#KEY_SIC
 0610

	)

1429 
	#KEY_SLEFT
 0611

	)

1430 
	#KEY_SMESSAGE
 0612

	)

1431 
	#KEY_SMOVE
 0613

	)

1432 
	#KEY_SNEXT
 0614

	)

1433 
	#KEY_SOPTIONS
 0615

	)

1434 
	#KEY_SPREVIOUS
 0616

	)

1435 
	#KEY_SPRINT
 0617

	)

1436 
	#KEY_SREDO
 0620

	)

1437 
	#KEY_SREPLACE
 0621

	)

1438 
	#KEY_SRIGHT
 0622

	)

1439 
	#KEY_SRSUME
 0623

	)

1440 
	#KEY_SSAVE
 0624

	)

1441 
	#KEY_SSUSPEND
 0625

	)

1442 
	#KEY_SUNDO
 0626

	)

1443 
	#KEY_SUSPEND
 0627

	)

1444 
	#KEY_UNDO
 0630

	)

1445 
	#KEY_MOUSE
 0631

	)

1446 
	#KEY_RESIZE
 0632

	)

1447 
	#KEY_EVENT
 0633

	)

1449 
	#KEY_MAX
 0777

	)

1459 #i‡
NCURSES_MOUSE_VERSION
 > 1

1460 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1462 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1465 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1466 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1467 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1468 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1469 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1470 
	#NCURSES_RESERVED_EVENT
 040L

	)

1473 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1474 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1475 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1476 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1477 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1479 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1480 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1481 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1482 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1483 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1485 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1486 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1487 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1488 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1489 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1491 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1492 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1493 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1494 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1495 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1501 #i‡
NCURSES_MOUSE_VERSION
 > 1

1503 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1504 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1505 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1506 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1507 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1509 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1510 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1511 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1512 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1516 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1517 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1518 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1519 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1521 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1522 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1523 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1524 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1528 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1531 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 001))

	)

1532 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 002))

	)

1533 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 004))

	)

1534 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 010))

	)

1535 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 020))

	)

1536 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 040))

	)

1540 
	gid
;

1541 
	gx
, 
	gy
, 
	gz
;

1542 
mmask_t
 
	gb°©e
;

1544 
	tMEVENT
;

1546 
NCURSES_EXPORT
(
boﬁ
Ë
has_mou£
();

1547 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

1548 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

1549 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

1550 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

1551 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

1552 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

1553 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

1555 #i‡
NCURSES_SP_FUNCS


1556 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_mou£
Ë(
SCREEN
*);

1557 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gëmou£
Ë(
SCREEN
*, 
MEVENT
 *);

1558 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëmou£
Ë(
SCREEN
*,
MEVENT
 *);

1559 
NCURSES_EXPORT
(
mmask_t
Ë
NCURSES_SP_NAME
(
mou£mask
Ë(
SCREEN
*, mmask_t, mmask_t *);

1560 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mou£öãrvÆ
Ë(
SCREEN
*, );

1563 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

1567 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

1568 
NCURSES_EXPORT
(Ë
has_key
 ();

1570 #i‡
NCURSES_SP_FUNCS


1571 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
has_key
Ë(
SCREEN
*, );

1572 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
m˝röt
Ë(
SCREEN
*, *, );

1577 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

1578 
NCURSES_EXPORT
(Ë
_åa˚dump
 (c⁄° *, 
WINDOW
 *);

1579 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

1580 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

1581 
NCURSES_EXPORT
(*Ë
_nc_åa˚bôs
 ();

1582 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

1583 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

1584 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

1585 #ifde‡
_XOPEN_SOURCE_EXTENDED


1586 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

1587 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

1588 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

1589 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

1591 
	#_åa˚ch_t
 
_åa˚chty≥


	)

1592 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

1594 
NCURSES_EXPORT
(*Ë
_åa˚mou£
 (c⁄° 
MEVENT
 *);

1595 
NCURSES_EXPORT
(Ë
åa˚
 (const );

1598 
	#TRACE_DISABLE
 0x0000

	)

1599 
	#TRACE_TIMES
 0x0001

	)

1600 
	#TRACE_TPUTS
 0x0002

	)

1601 
	#TRACE_UPDATE
 0x0004

	)

1602 
	#TRACE_MOVE
 0x0008

	)

1603 
	#TRACE_CHARPUT
 0x0010

	)

1604 
	#TRACE_ORDINARY
 0x001F

	)

1605 
	#TRACE_CALLS
 0x0020

	)

1606 
	#TRACE_VIRTPUT
 0x0040

	)

1607 
	#TRACE_IEVENT
 0x0080

	)

1608 
	#TRACE_BITS
 0x0100

	)

1609 
	#TRACE_ICALLS
 0x0200

	)

1610 
	#TRACE_CCALLS
 0x0400

	)

1611 
	#TRACE_DATABASE
 0x0800

	)

1612 
	#TRACE_ATTRS
 0x1000

	)

1614 
	#TRACE_SHIFT
 13

	)

1615 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

1617 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1618 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

1619 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

1620 
	#OPTIMIZE_MVCUR
 0x01

	)

1621 
	#OPTIMIZE_HASHMAP
 0x02

	)

1622 
	#OPTIMIZE_SCROLL
 0x04

	)

1623 
	#OPTIMIZE_ALL
 0xf‡

	)

1626 
	~<un˘æ.h
>

1628 #ifde‡
__˝lu•lus


1630 #i‚de‡
NCURSES_NOMACROS


1633 #unde‡
box


1634 #unde‡
˛ór


1635 #unde‡
îa£


1636 #unde‡
move


1637 #unde‡
ª‰esh


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/eti.h

35 #i‚de‡
NCURSES_ETI_H_ö˛


36 
	#NCURSES_ETI_H_ö˛
 1

	)

38 
	#E_OK
 (0)

	)

39 
	#E_SYSTEM_ERROR
 (-1)

	)

40 
	#E_BAD_ARGUMENT
 (-2)

	)

41 
	#E_POSTED
 (-3)

	)

42 
	#E_CONNECTED
 (-4)

	)

43 
	#E_BAD_STATE
 (-5)

	)

44 
	#E_NO_ROOM
 (-6)

	)

45 
	#E_NOT_POSTED
 (-7)

	)

46 
	#E_UNKNOWN_COMMAND
 (-8)

	)

47 
	#E_NO_MATCH
 (-9)

	)

48 
	#E_NOT_SELECTABLE
 (-10)

	)

49 
	#E_NOT_CONNECTED
 (-11)

	)

50 
	#E_REQUEST_DENIED
 (-12)

	)

51 
	#E_INVALID_FIELD
 (-13)

	)

52 
	#E_CURRENT
 (-14)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/locale.h

20 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


24 #i‚de‡
_BITS_LOCALE_H


25 
	#_BITS_LOCALE_H
 1

	)

29 
	m__LC_CTYPE
 = 0,

30 
	m__LC_NUMERIC
 = 1,

31 
	m__LC_TIME
 = 2,

32 
	m__LC_COLLATE
 = 3,

33 
	m__LC_MONETARY
 = 4,

34 
	m__LC_MESSAGES
 = 5,

35 
	m__LC_ALL
 = 6,

36 
	m__LC_PAPER
 = 7,

37 
	m__LC_NAME
 = 8,

38 
	m__LC_ADDRESS
 = 9,

39 
	m__LC_TELEPHONE
 = 10,

40 
	m__LC_MEASUREMENT
 = 11,

41 
	m__LC_IDENTIFICATION
 = 12

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #unde‡
NCURSES_DLL


38 
	#NCURSES_STATIC


	)

40 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__MINGW32__
)

41 #i‡
deföed
(
NCURSES_DLL
)

42 #i‡
deföed
(
NCURSES_STATIC
)

43 #unde‡
NCURSES_STATIC


46 #unde‡
NCURSES_IMPEXP


47 #unde‡
NCURSES_API


48 #unde‡
NCURSES_EXPORT


49 #unde‡
NCURSES_EXPORT_VAR


50 #i‡
deföed
(
NCURSES_DLL
)

52 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

53 #ñi‡
deföed
(
NCURSES_STATIC
)

55 
	#NCURSES_IMPEXP


	)

58 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

60 
	#NCURSES_API
 
__cde˛


	)

61 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

62 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

66 #i‡!
deföed
(
NCURSES_IMPEXP
)

67 
	#NCURSES_IMPEXP


	)

69 #i‡!
deföed
(
NCURSES_API
)

70 
	#NCURSES_API


	)

72 #i‡!
deföed
(
NCURSES_EXPORT
)

73 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

75 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

76 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/unctrl.h

44 #i‚de‡
NCURSES_UNCTRL_H_ö˛


45 
	#NCURSES_UNCTRL_H_ö˛
 1

	)

47 #unde‡
NCURSES_VERSION


48 
	#NCURSES_VERSION
 "5.7"

	)

50 #ifde‡
__˝lu•lus


54 
	~<cur£s.h
>

56 #unde‡
un˘æ


57 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
un˘æ
 (
chty≥
);

60 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
un˘æ
Ë(
SCREEN
*, 
chty≥
);

63 #ifde‡
__˝lu•lus


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
208
5058
cmdline-bootloader/circ_buffer.c
cmdline-bootloader/circ_buffer.h
cmdline-bootloader/defs.h
cmdline-bootloader/hostserial.c
cmdline-bootloader/hostserial.h
cmdline-bootloader/reprogrammer.c
hw-api/audio.h
hw-api/hwAccelerometer.h
hw-api/hwBlockTick.h
hw-api/hwBoot.h
hw-api/hwDataLink.h
hw-api/hwDebug.h
hw-api/hwLED.h
hw-api/hwMemory.h
hw-api/hwSerial.h
hw-api/hwTime.h
hw-block/audio.c
hw-block/avr_compiler.h
hw-block/eeprom_driver.c
hw-block/eeprom_driver.h
hw-block/ext_memory.c
hw-block/ext_memory.h
hw-block/hwAccelerometer.c
hw-block/hwBlockTick.c
hw-block/hwBoot.c
hw-block/hwDataLink.c
hw-block/hwDebug.c
hw-block/hwLED.c
hw-block/hwMemory.c
hw-block/hwSerial.c
hw-block/hwTime.c
hw-block/soft_uart2.c
hw-block/soft_uart2.h
hw-block/system.c
hw-block/twi_master_driver.c
hw-block/twi_master_driver.h
hw-sim/audio.c
hw-sim/hwAccelerometer.c
hw-sim/hwBlockTick.c
hw-sim/hwBoot.c
hw-sim/hwDataLink.c
hw-sim/hwDebug.c
hw-sim/hwLED.c
hw-sim/hwMemory.c
hw-sim/hwSerial.c
hw-sim/hwTime.c
ldpsyntax/ldp.h
ldpsyntax/ldp.tab.c
ldpsyntax/ldp.tab.h
ldpsyntax/ldp.y
ldpsyntax/scanner.c
ldpsyntax/scanner.h
ldpsyntax/table.c
meldinterp-runtime.witoutinstru/api.h
meldinterp-runtime.witoutinstru/core.c
meldinterp-runtime.witoutinstru/core.h
meldinterp-runtime.witoutinstru/list_runtime.c
meldinterp-runtime.witoutinstru/list_runtime.h
meldinterp-runtime.witoutinstru/set_runtime.c
meldinterp-runtime.witoutinstru/set_runtime.h
meldinterp-runtime/api.h
meldinterp-runtime/core.c
meldinterp-runtime/core.h
meldinterp-runtime/list_runtime.c
meldinterp-runtime/list_runtime.h
meldinterp-runtime/meldvm_instrumentation.c
meldinterp-runtime/meldvm_instrumentation.h
meldinterp-runtime/set_runtime.c
meldinterp-runtime/set_runtime.h
meldinterp/runtime/extern_functions.c
meldinterp/runtime/extern_functions.h
meldinterp/runtime/meldvm.c
runtime/accelerometer.c
runtime/accelerometer.h
runtime/block.h
runtime/ensemble.c
runtime/ensemble.h
runtime/led.c
runtime/led.h
runtime/util.c
runtime/util.h
sim/block.c
sim/block.h
sim/block_dispatch.c
sim/block_dispatch.h
sim/click.c
sim/click.h
sim/config.c
sim/config.h
sim/menu.c
sim/menu.h
sim/render.c
sim/render.h
sim/sim.c
sim/sim.h
sim/variable_queue.h
sim/viewer.c
sim/viewer.h
sim/world.c
sim/world.h
system/myassert.h
/usr/include/GL/gl.h
/usr/include/GL/glu.h
/usr/include/GL/glut.h
/usr/include/alloca.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/menu.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/stat.h
/usr/include/sys/timeb.h
/usr/include/sys/types.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/GL/glext.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/curses.h
/usr/include/endian.h
/usr/include/eti.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/locale.h
/usr/include/sched.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/locale.h
/usr/include/bits/predefs.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/ncurses_dll.h
/usr/include/sys/cdefs.h
/usr/include/unctrl.h
/usr/include/wchar.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/wctype.h
/usr/include/asm-generic/errno.h
/usr/include/gnu/option-groups.h
/usr/include/asm-generic/errno-base.h
